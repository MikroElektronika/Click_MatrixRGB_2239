;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 7/19/2016 10:04:25 AM
;----------------------------------------------

;Address Opcode 	ASM
____SysVT:
0x0000	0x00300B88  JMP	_main
0x0004	0x00300B78  JMP	___GenExcept
0x0008	0x00300B78  JMP	___GenExcept
0x000C	0x00300B78  JMP	___GenExcept
0x0010	0x00300B78  JMP	___GenExcept
0x0014	0x00300B78  JMP	___GenExcept
0x0018	0x00300B78  JMP	___GenExcept
0x001C	0x00300B78  JMP	___GenExcept
0x0020	0x00300B78  JMP	___GenExcept
0x0024	0x00300B78  JMP	___GenExcept
0x0028	0x00300B78  JMP	___GenExcept
0x002C	0x00300B78  JMP	___GenExcept
0x0030	0x00300B78  JMP	___GenExcept
0x0034	0x00300B78  JMP	___GenExcept
0x0038	0x00300B78  JMP	___GenExcept
0x003C	0x00300B78  JMP	___GenExcept
0x0040	0x00300B78  JMP	___GenExcept
0x0044	0x00300B78  JMP	___GenExcept
0x0048	0x00300B78  JMP	___GenExcept
0x004C	0x00300B7A  JMP	_TimerInterrupt
0x0050	0x00300B78  JMP	___GenExcept
0x0054	0x00300B78  JMP	___GenExcept
0x0058	0x00300B78  JMP	___GenExcept
0x005C	0x00300B78  JMP	___GenExcept
0x0060	0x00300B78  JMP	___GenExcept
0x0064	0x00300B78  JMP	___GenExcept
0x0068	0x00300B78  JMP	___GenExcept
0x006C	0x00300B78  JMP	___GenExcept
0x0070	0x00300B78  JMP	___GenExcept
0x0074	0x00300B78  JMP	___GenExcept
0x0078	0x00300B78  JMP	___GenExcept
0x007C	0x00300B78  JMP	___GenExcept
0x0080	0x00300B78  JMP	___GenExcept
0x0084	0x00300B78  JMP	___GenExcept
0x0088	0x00300B78  JMP	___GenExcept
0x008C	0x00300B78  JMP	___GenExcept
; end of ____SysVT
_main:
;matrixrgb_firmware_main.c, 31 :: 		void main()
0x2E20	0x65F0FFFC  LDK.L	SP, #65532
0x2E24	0x0034109A  CALL	_ZeroStaticLink
0x2E28	0x00340C01  CALL	__Lib_System_InitialSetUpCLKPMC
0x2E2C	0x00341095  CALL	_InitStaticLink
;matrixrgb_firmware_main.c, 34 :: 		spi_bus_init();
0x2E30	0x0034097A  CALL	_spi_bus_init+0
;matrixrgb_firmware_main.c, 35 :: 		Delay_ms(300);
0x2E34	0x6DC00B93  LPM.L	R28, $+24
0x2E38	0x44004000  NOP	
L_main0:
0x2E3C	0x45CE4012  SUB.L	R28, R28, #1
0x2E40	0x5DEE4002  CMP.L	R28, #0
0x2E44	0x00200B8F  JMPC	R30, Z, #0, L_main0
0x2E48	0x00300B94  JMP	$+8
0x2E4C	0x0098967E  	#9999998
0x2E50	0x44004000  NOP	
;matrixrgb_firmware_main.c, 37 :: 		while (1)
L_main2:
;matrixrgb_firmware_main.c, 39 :: 		receive_data( &buffer, 1 );
0x2E54	0x64100001  LDK.L	R1, #1
0x2E58	0x640000A1  LDK.L	R0, #_buffer+0
0x2E5C	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware_main.c, 41 :: 		switch ( buffer[0] )
0x2E60	0x00300BC2  JMP	L_main4
;matrixrgb_firmware_main.c, 43 :: 		case SETUP_CMD:
L_main6:
;matrixrgb_firmware_main.c, 44 :: 		setup_command();
0x2E64	0x00340935  CALL	_setup_command+0
;matrixrgb_firmware_main.c, 45 :: 		break;
0x2E68	0x00300BFF  JMP	L_main5
;matrixrgb_firmware_main.c, 46 :: 		case IMAGE_LOAD_CMD:
L_main7:
;matrixrgb_firmware_main.c, 47 :: 		image_load_command();
0x2E6C	0x00340B42  CALL	_image_load_command+0
;matrixrgb_firmware_main.c, 48 :: 		break;
0x2E70	0x00300BFF  JMP	L_main5
;matrixrgb_firmware_main.c, 49 :: 		case SCROLL_IMG_LEFT_CMD:
L_main8:
;matrixrgb_firmware_main.c, 50 :: 		scroll_img_left_command();
0x2E74	0x00340AD8  CALL	_scroll_img_left_command+0
;matrixrgb_firmware_main.c, 51 :: 		break;
0x2E78	0x00300BFF  JMP	L_main5
;matrixrgb_firmware_main.c, 52 :: 		case SCROLL_IMG_RIGHT_CMD:
L_main9:
;matrixrgb_firmware_main.c, 53 :: 		scroll_img_right_command();
0x2E7C	0x00340A30  CALL	_scroll_img_right_command+0
;matrixrgb_firmware_main.c, 54 :: 		break;
0x2E80	0x00300BFF  JMP	L_main5
;matrixrgb_firmware_main.c, 55 :: 		case WRITE_PXL_CMD:
L_main10:
;matrixrgb_firmware_main.c, 56 :: 		write_pxl_command();
0x2E84	0x00340A98  CALL	_write_pxl_command+0
;matrixrgb_firmware_main.c, 57 :: 		break;
0x2E88	0x00300BFF  JMP	L_main5
;matrixrgb_firmware_main.c, 58 :: 		case WRITE_PXL_IMG_CMD:
L_main11:
;matrixrgb_firmware_main.c, 59 :: 		write_pxl_img_command();
0x2E8C	0x00340AB5  CALL	_write_pxl_img_command+0
;matrixrgb_firmware_main.c, 60 :: 		break;
0x2E90	0x00300BFF  JMP	L_main5
;matrixrgb_firmware_main.c, 61 :: 		case ERASE_PXL_CMD:
L_main12:
;matrixrgb_firmware_main.c, 62 :: 		erase_pxl_command();
0x2E94	0x003409C5  CALL	_erase_pxl_command+0
;matrixrgb_firmware_main.c, 63 :: 		break;
0x2E98	0x00300BFF  JMP	L_main5
;matrixrgb_firmware_main.c, 64 :: 		case SCROLL_TEXT_LEFT_CMD:
L_main13:
;matrixrgb_firmware_main.c, 65 :: 		scroll_text_left_command();
0x2E9C	0x003409D8  CALL	_scroll_text_left_command+0
;matrixrgb_firmware_main.c, 66 :: 		break;
0x2EA0	0x00300BFF  JMP	L_main5
;matrixrgb_firmware_main.c, 67 :: 		case SCROLL_TEXT_RIGHT_CMD:
L_main14:
;matrixrgb_firmware_main.c, 68 :: 		scroll_text_right_command();
0x2EA4	0x00340A04  CALL	_scroll_text_right_command+0
;matrixrgb_firmware_main.c, 69 :: 		break;
0x2EA8	0x00300BFF  JMP	L_main5
;matrixrgb_firmware_main.c, 70 :: 		case DISPLAY_SHIFT_UP_CMD:
L_main15:
;matrixrgb_firmware_main.c, 71 :: 		display_shift_up_command();
0x2EAC	0x00340B40  CALL	_display_shift_up_command+0
;matrixrgb_firmware_main.c, 72 :: 		break;
0x2EB0	0x00300BFF  JMP	L_main5
;matrixrgb_firmware_main.c, 73 :: 		case DISPLAY_SHIFT_DOWN_CMD:
L_main16:
;matrixrgb_firmware_main.c, 74 :: 		display_shift_down_command();
0x2EB4	0x00340AD2  CALL	_display_shift_down_command+0
;matrixrgb_firmware_main.c, 75 :: 		break;
0x2EB8	0x00300BFF  JMP	L_main5
;matrixrgb_firmware_main.c, 76 :: 		case DISPLAY_SHIFT_RIGHT_CMD:
L_main17:
;matrixrgb_firmware_main.c, 77 :: 		display_shift_right_command();
0x2EBC	0x00340AD4  CALL	_display_shift_right_command+0
;matrixrgb_firmware_main.c, 78 :: 		break;
0x2EC0	0x00300BFF  JMP	L_main5
;matrixrgb_firmware_main.c, 79 :: 		case DISPLAY_SHIFT_LEFT_CMD:
L_main18:
;matrixrgb_firmware_main.c, 80 :: 		display_shift_left_command();
0x2EC4	0x00340AD6  CALL	_display_shift_left_command+0
;matrixrgb_firmware_main.c, 81 :: 		break;
0x2EC8	0x00300BFF  JMP	L_main5
;matrixrgb_firmware_main.c, 82 :: 		case DISPLAY_SCROLL_OFF_SCRN_UP_CMD:
L_main19:
;matrixrgb_firmware_main.c, 83 :: 		display_scroll_off_scrn_up_command();
0x2ECC	0x00340915  CALL	_display_scroll_off_scrn_up_command+0
;matrixrgb_firmware_main.c, 84 :: 		break;
0x2ED0	0x00300BFF  JMP	L_main5
;matrixrgb_firmware_main.c, 85 :: 		case DISPLAY_SCROLL_OFF_SCRN_DWN_CMD:
L_main20:
;matrixrgb_firmware_main.c, 86 :: 		display_scroll_off_scrn_down_command();
0x2ED4	0x0034092F  CALL	_display_scroll_off_scrn_down_command+0
;matrixrgb_firmware_main.c, 87 :: 		break;
0x2ED8	0x00300BFF  JMP	L_main5
;matrixrgb_firmware_main.c, 88 :: 		case DISPLAY_SCROLL_OFF_SCRN_LEFT_CMD:
L_main21:
;matrixrgb_firmware_main.c, 89 :: 		display_scroll_off_scrn_left_command();
0x2EDC	0x003409B9  CALL	_display_scroll_off_scrn_left_command+0
;matrixrgb_firmware_main.c, 90 :: 		break;
0x2EE0	0x00300BFF  JMP	L_main5
;matrixrgb_firmware_main.c, 91 :: 		case DISPLAY_SCROLL_OFF_SCRN_RIGHT_CMD:
L_main22:
;matrixrgb_firmware_main.c, 92 :: 		display_scroll_off_scrn_right_command();
0x2EE4	0x003409BF  CALL	_display_scroll_off_scrn_right_command+0
;matrixrgb_firmware_main.c, 93 :: 		break;
0x2EE8	0x00300BFF  JMP	L_main5
;matrixrgb_firmware_main.c, 94 :: 		case REFRESH_CMD:
L_main23:
;matrixrgb_firmware_main.c, 95 :: 		refresh();
0x2EEC	0x00340384  CALL	_refresh+0
;matrixrgb_firmware_main.c, 96 :: 		break;
0x2EF0	0x00300BFF  JMP	L_main5
;matrixrgb_firmware_main.c, 97 :: 		case CLR_SCRN_CMD:
L_main24:
;matrixrgb_firmware_main.c, 98 :: 		clear_screen_command();
0x2EF4	0x003409B7  CALL	_clear_screen_command+0
;matrixrgb_firmware_main.c, 99 :: 		break;
0x2EF8	0x00300BFF  JMP	L_main5
;matrixrgb_firmware_main.c, 100 :: 		case WRITE_TEXT_CMD:
L_main25:
;matrixrgb_firmware_main.c, 101 :: 		write_text_command();
0x2EFC	0x0034093C  CALL	_write_text_command+0
;matrixrgb_firmware_main.c, 102 :: 		break;
0x2F00	0x00300BFF  JMP	L_main5
;matrixrgb_firmware_main.c, 103 :: 		default:
L_main26:
;matrixrgb_firmware_main.c, 104 :: 		break;
0x2F04	0x00300BFF  JMP	L_main5
;matrixrgb_firmware_main.c, 105 :: 		}
L_main4:
0x2F08	0xC00000A1  LDA.B	R0, _buffer+0
0x2F0C	0x59E04012  CMP.B	R0, #1
0x2F10	0x00280B99  JMPC	R30, Z, #1, L_main6
0x2F14	0xC00000A1  LDA.B	R0, _buffer+0
0x2F18	0x59E04022  CMP.B	R0, #2
0x2F1C	0x00280B9B  JMPC	R30, Z, #1, L_main7
0x2F20	0xC00000A1  LDA.B	R0, _buffer+0
0x2F24	0x59E04032  CMP.B	R0, #3
0x2F28	0x00280B9D  JMPC	R30, Z, #1, L_main8
0x2F2C	0xC00000A1  LDA.B	R0, _buffer+0
0x2F30	0x59E04042  CMP.B	R0, #4
0x2F34	0x00280B9F  JMPC	R30, Z, #1, L_main9
0x2F38	0xC00000A1  LDA.B	R0, _buffer+0
0x2F3C	0x59E04052  CMP.B	R0, #5
0x2F40	0x00280BA1  JMPC	R30, Z, #1, L_main10
0x2F44	0xC00000A1  LDA.B	R0, _buffer+0
0x2F48	0x59E04062  CMP.B	R0, #6
0x2F4C	0x00280BA3  JMPC	R30, Z, #1, L_main11
0x2F50	0xC00000A1  LDA.B	R0, _buffer+0
0x2F54	0x59E04072  CMP.B	R0, #7
0x2F58	0x00280BA5  JMPC	R30, Z, #1, L_main12
0x2F5C	0xC00000A1  LDA.B	R0, _buffer+0
0x2F60	0x59E04082  CMP.B	R0, #8
0x2F64	0x00280BA7  JMPC	R30, Z, #1, L_main13
0x2F68	0xC00000A1  LDA.B	R0, _buffer+0
0x2F6C	0x59E04092  CMP.B	R0, #9
0x2F70	0x00280BA9  JMPC	R30, Z, #1, L_main14
0x2F74	0xC00000A1  LDA.B	R0, _buffer+0
0x2F78	0x59E040A2  CMP.B	R0, #10
0x2F7C	0x00280BAB  JMPC	R30, Z, #1, L_main15
0x2F80	0xC00000A1  LDA.B	R0, _buffer+0
0x2F84	0x59E040B2  CMP.B	R0, #11
0x2F88	0x00280BAD  JMPC	R30, Z, #1, L_main16
0x2F8C	0xC00000A1  LDA.B	R0, _buffer+0
0x2F90	0x59E040C2  CMP.B	R0, #12
0x2F94	0x00280BAF  JMPC	R30, Z, #1, L_main17
0x2F98	0xC00000A1  LDA.B	R0, _buffer+0
0x2F9C	0x59E040D2  CMP.B	R0, #13
0x2FA0	0x00280BB1  JMPC	R30, Z, #1, L_main18
0x2FA4	0xC00000A1  LDA.B	R0, _buffer+0
0x2FA8	0x59E040E2  CMP.B	R0, #14
0x2FAC	0x00280BB3  JMPC	R30, Z, #1, L_main19
0x2FB0	0xC00000A1  LDA.B	R0, _buffer+0
0x2FB4	0x59E040F2  CMP.B	R0, #15
0x2FB8	0x00280BB5  JMPC	R30, Z, #1, L_main20
0x2FBC	0xC00000A1  LDA.B	R0, _buffer+0
0x2FC0	0x59E04102  CMP.B	R0, #16
0x2FC4	0x00280BB7  JMPC	R30, Z, #1, L_main21
0x2FC8	0xC00000A1  LDA.B	R0, _buffer+0
0x2FCC	0x59E04112  CMP.B	R0, #17
0x2FD0	0x00280BB9  JMPC	R30, Z, #1, L_main22
0x2FD4	0xC00000A1  LDA.B	R0, _buffer+0
0x2FD8	0x59E04122  CMP.B	R0, #18
0x2FDC	0x00280BBB  JMPC	R30, Z, #1, L_main23
0x2FE0	0xC00000A1  LDA.B	R0, _buffer+0
0x2FE4	0x59E04132  CMP.B	R0, #19
0x2FE8	0x00280BBD  JMPC	R30, Z, #1, L_main24
0x2FEC	0xC00000A1  LDA.B	R0, _buffer+0
0x2FF0	0x59E04142  CMP.B	R0, #20
0x2FF4	0x00280BBF  JMPC	R30, Z, #1, L_main25
0x2FF8	0x00300BC1  JMP	L_main26
L_main5:
;matrixrgb_firmware_main.c, 106 :: 		}
0x2FFC	0x00300B95  JMP	L_main2
;matrixrgb_firmware_main.c, 107 :: 		}
L_end_main:
L__main_end_loop:
0x3000	0x00300C00  JMP	L__main_end_loop
; end of _main
_spi_bus_init:
;matrixrgb_firmware.c, 527 :: 		void spi_bus_init()
0x25E8	0x95D00008  LINK	LR, #8
;matrixrgb_firmware.c, 535 :: 		};
0x25EC	0x64000024  LDK.L	R0, #36
0x25F0	0xB1F00000  STI.B	SP, #0, R0
0x25F4	0x64000025  LDK.L	R0, #37
0x25F8	0xB1F00001  STI.B	SP, #1, R0
0x25FC	0x64000026  LDK.L	R0, #38
0x2600	0xB1F00002  STI.B	SP, #2, R0
0x2604	0x64000027  LDK.L	R0, #39
0x2608	0xB1F00003  STI.B	SP, #3, R0
0x260C	0x64000012  LDK.L	R0, #18
0x2610	0xB1F00004  STI.B	SP, #4, R0
0x2614	0x64000011  LDK.L	R0, #17
0x2618	0xB1F00005  STI.B	SP, #5, R0
0x261C	0x64000032  LDK.L	R0, #50
0x2620	0xB1F00006  STI.B	SP, #6, R0
;matrixrgb_firmware.c, 539 :: 		};
;matrixrgb_firmware.c, 544 :: 		for ( i = 0; i < sizeof( output_pins ); i++ )
; i start address is: 32 (R8)
0x2624	0x64800000  LDK.L	R8, #0
; i end address is: 32 (R8)
L_spi_bus_init51:
; i start address is: 32 (R8)
0x2628	0x5BE44032  CMP.S	R8, #3
0x262C	0x01280995  JMPC	R30, GTE, #1, L_spi_bus_init52
;matrixrgb_firmware.c, 546 :: 		GPIO_Pin_Config( output_pins[i],
0x2630	0x440FC040  ADD.L	R0, SP, #4
0x2634	0x44000080  ADD.L	R0, R0, R8
0x2638	0xA8000000  LDI.B	R0, R0, #0
;matrixrgb_firmware.c, 552 :: 		_GPIO_CFG_SPEC_NONE );
0x263C	0x6C2009B5  LPM.L	R2, $+152
;matrixrgb_firmware.c, 547 :: 		_GPIO_DIR_OUTPUT,
0x2640	0x64100004  LDK.L	R1, #4
;matrixrgb_firmware.c, 546 :: 		GPIO_Pin_Config( output_pins[i],
;matrixrgb_firmware.c, 552 :: 		_GPIO_CFG_SPEC_NONE );
0x2644	0x0034085B  CALL	_GPIO_Pin_Config+0
;matrixrgb_firmware.c, 544 :: 		for ( i = 0; i < sizeof( output_pins ); i++ )
0x2648	0x44844010  ADD.L	R8, R8, #1
0x264C	0x4484400C  BEXTS.L	R8, R8, #0
;matrixrgb_firmware.c, 553 :: 		}
; i end address is: 32 (R8)
0x2650	0x0030098A  JMP	L_spi_bus_init51
L_spi_bus_init52:
;matrixrgb_firmware.c, 555 :: 		PWR_EnableModule( _PWR_CLK_SPIS0 );
0x2654	0x64000040  LDK.L	R0, #64
0x2658	0x00340906  CALL	_PWR_EnableModule+0
;matrixrgb_firmware.c, 557 :: 		for ( i = 0; i < sizeof( slave_pins ); i++ )
; i start address is: 32 (R8)
0x265C	0x64800000  LDK.L	R8, #0
; i end address is: 32 (R8)
L_spi_bus_init54:
; i start address is: 32 (R8)
0x2660	0x5BE44042  CMP.S	R8, #4
0x2664	0x012809A7  JMPC	R30, GTE, #1, L_spi_bus_init55
;matrixrgb_firmware.c, 560 :: 		( i == _GPIO_PIN_NUM_39 ) ? _GPIO_DIR_OUTPUT : _GPIO_DIR_INPUT,
0x2668	0x5BE44272  CMP.S	R8, #39
0x266C	0x0020099E  JMPC	R30, Z, #0, L_spi_bus_init57
; ?FLOC___spi_bus_init?T270 start address is: 4 (R1)
0x2670	0x64100004  LDK.L	R1, #4
; ?FLOC___spi_bus_init?T270 end address is: 4 (R1)
0x2674	0x0030099F  JMP	L_spi_bus_init58
L_spi_bus_init57:
; ?FLOC___spi_bus_init?T270 start address is: 4 (R1)
0x2678	0x64100000  LDK.L	R1, #0
; ?FLOC___spi_bus_init?T270 end address is: 4 (R1)
L_spi_bus_init58:
;matrixrgb_firmware.c, 559 :: 		GPIO_Pin_Config( slave_pins[i],
; ?FLOC___spi_bus_init?T270 start address is: 4 (R1)
0x267C	0x440FC000  ADD.L	R0, SP, #0
0x2680	0x44000080  ADD.L	R0, R0, R8
0x2684	0xA8000000  LDI.B	R0, R0, #0
;matrixrgb_firmware.c, 565 :: 		_GPIO_CFG_SPEC_FUNC_1 );
0x2688	0x6C2009B6  LPM.L	R2, $+80
;matrixrgb_firmware.c, 560 :: 		( i == _GPIO_PIN_NUM_39 ) ? _GPIO_DIR_OUTPUT : _GPIO_DIR_INPUT,
; ?FLOC___spi_bus_init?T270 end address is: 4 (R1)
;matrixrgb_firmware.c, 559 :: 		GPIO_Pin_Config( slave_pins[i],
;matrixrgb_firmware.c, 565 :: 		_GPIO_CFG_SPEC_FUNC_1 );
0x268C	0x0034085B  CALL	_GPIO_Pin_Config+0
;matrixrgb_firmware.c, 557 :: 		for ( i = 0; i < sizeof( slave_pins ); i++ )
0x2690	0x44844010  ADD.L	R8, R8, #1
0x2694	0x4484400C  BEXTS.L	R8, R8, #0
;matrixrgb_firmware.c, 566 :: 		}
; i end address is: 32 (R8)
0x2698	0x00300998  JMP	L_spi_bus_init54
L_spi_bus_init55:
;matrixrgb_firmware.c, 567 :: 		GPIO_Pin_Digital_Input( _GPIO_PIN_NUM_37 );
0x269C	0x64000025  LDK.L	R0, #37
0x26A0	0x00340856  CALL	_GPIO_Pin_Digital_Input+0
;matrixrgb_firmware.c, 574 :: 		( 1 << SP_R2 );
0x26A4	0x640000E3  LDK.L	R0, #227
0x26A8	0xBC0102C0  STA.L	SPIS1_CNTL+0, R0
;matrixrgb_firmware.c, 576 :: 		SPIS1_CNTL &= ~( 1 << CLK_POL );
0x26AC	0xC40102C0  LDA.L	R0, SPIS1_CNTL+0
0x26B0	0x44007F74  AND.L	R0, R0, #-9
0x26B4	0xBC0102C0  STA.L	SPIS1_CNTL+0, R0
;matrixrgb_firmware.c, 582 :: 		( 1 << FIFO_EN );      // FIFO Enable
0x26B8	0x64000027  LDK.L	R0, #39
0x26BC	0xBC0102D0  STA.L	SPIS1_FIFO_CNTL+0, R0
;matrixrgb_firmware.c, 586 :: 		SPIS1_TNSFR_FRMT_CNTL |= ( 1 << MULTI_REC );    // Allow continuous reception of data
0x26C0	0xC40102D4  LDA.L	R0, SPIS1_TNSFR_FRMT_CNTL+0
0x26C4	0x44004205  OR.L	R0, R0, #32
0x26C8	0xBC0102D4  STA.L	SPIS1_TNSFR_FRMT_CNTL+0, R0
;matrixrgb_firmware.c, 589 :: 		}
L_end_spi_bus_init:
0x26CC	0x99D00000  UNLINK	LR
0x26D0	0xA0000000  RETURN	
0x26D4	0x00341825  	#3414053
0x26D8	0x00702815  	#7350293
; end of _spi_bus_init
_GPIO_Pin_Config:
;__Lib_GPIO.c, 180 :: 		
; config start address is: 8 (R2)
; dir start address is: 4 (R1)
; pinNum start address is: 0 (R0)
0x216C	0x44614000  MOVE.L	R6, R2
; config end address is: 8 (R2)
; dir end address is: 4 (R1)
; pinNum end address is: 0 (R0)
; pinNum start address is: 0 (R0)
; dir start address is: 4 (R1)
; config start address is: 24 (R6)
;__Lib_GPIO.c, 186 :: 		
0x2170	0x59E04002  CMP.B	R0, #0
0x2174	0x00680861  JMPC	R30, C, #1, L__GPIO_Pin_Config38
0x2178	0x59E04422  CMP.B	R0, #66
0x217C	0x01A80861  JMPC	R30, A, #1, L__GPIO_Pin_Config37
0x2180	0x00300863  JMP	L_GPIO_Pin_Config2
; pinNum end address is: 0 (R0)
; dir end address is: 4 (R1)
; config end address is: 24 (R6)
L__GPIO_Pin_Config38:
L__GPIO_Pin_Config37:
;__Lib_GPIO.c, 188 :: 		
0x2184	0x640000FE  LDK.L	R0, #254
0x2188	0x003008C7  JMP	L_end_GPIO_Pin_Config
;__Lib_GPIO.c, 189 :: 		
L_GPIO_Pin_Config2:
;__Lib_GPIO.c, 191 :: 		
; config start address is: 24 (R6)
; dir start address is: 4 (R1)
; pinNum start address is: 0 (R0)
0x218C	0x6431001C  LDK.L	R3, #PIN_00_03+0
0x2190	0x44318000  ADD.L	R3, R3, R0
0x2194	0xA8318000  LDI.B	R3, R3, #0
;__Lib_GPIO.c, 192 :: 		
0x2198	0x4431C3F4  AND.L	R3, R3, #63
; tmpRdRegpad start address is: 28 (R7)
0x219C	0x4471D00D  BEXTU.L	R7, R3, #256
;__Lib_GPIO.c, 193 :: 		
; configLow start address is: 8 (R2)
0x21A0	0x4423400D  BEXTU.L	R2, R6, #0
;__Lib_GPIO.c, 194 :: 		
0x21A4	0x44334109  LSHR.L	R3, R6, #16
; configHigh start address is: 20 (R5)
0x21A8	0x4451C00D  BEXTU.L	R5, R3, #0
;__Lib_GPIO.c, 196 :: 		
0x21AC	0x4443400D  BEXTU.L	R4, R6, #0
; config end address is: 24 (R6)
0x21B0	0x64310003  LDK.L	R3, #65539
0x21B4	0x44320034  AND.L	R3, R4, R3
0x21B8	0x5DE1C002  CMP.L	R3, #0
0x21BC	0x00280877  JMPC	R30, Z, #1, L__GPIO_Pin_Config39
;__Lib_GPIO.c, 198 :: 		
0x21C0	0x4443CFE4  AND.L	R4, R7, #254
0x21C4	0x4442500D  BEXTU.L	R4, R4, #256
; tmpRdRegpad end address is: 28 (R7)
;__Lib_GPIO.c, 199 :: 		
0x21C8	0x4432C014  AND.L	R3, R5, #1
0x21CC	0x4431C00D  BEXTU.L	R3, R3, #0
0x21D0	0x44320035  OR.L	R3, R4, R3
; tmpRdRegpad start address is: 24 (R6)
0x21D4	0x4461D00D  BEXTU.L	R6, R3, #256
; tmpRdRegpad end address is: 24 (R6)
;__Lib_GPIO.c, 200 :: 		
0x21D8	0x00300878  JMP	L_GPIO_Pin_Config3
L__GPIO_Pin_Config39:
;__Lib_GPIO.c, 196 :: 		
0x21DC	0x4463D00D  BEXTU.L	R6, R7, #256
;__Lib_GPIO.c, 200 :: 		
L_GPIO_Pin_Config3:
;__Lib_GPIO.c, 202 :: 		
; tmpRdRegpad start address is: 24 (R6)
0x21E0	0x6432000C  LDK.L	R3, #131084
0x21E4	0x44310034  AND.L	R3, R2, R3
0x21E8	0x5DE1C002  CMP.L	R3, #0
0x21EC	0x00280883  JMPC	R30, Z, #1, L__GPIO_Pin_Config40
;__Lib_GPIO.c, 204 :: 		
0x21F0	0x44434FD4  AND.L	R4, R6, #253
0x21F4	0x4442500D  BEXTU.L	R4, R4, #256
; tmpRdRegpad end address is: 24 (R6)
;__Lib_GPIO.c, 205 :: 		
0x21F8	0x4432C024  AND.L	R3, R5, #2
0x21FC	0x4431C00D  BEXTU.L	R3, R3, #0
0x2200	0x44320035  OR.L	R3, R4, R3
; tmpRdRegpad start address is: 24 (R6)
0x2204	0x4461D00D  BEXTU.L	R6, R3, #256
; tmpRdRegpad end address is: 24 (R6)
;__Lib_GPIO.c, 206 :: 		
0x2208	0x00300883  JMP	L_GPIO_Pin_Config4
L__GPIO_Pin_Config40:
;__Lib_GPIO.c, 202 :: 		
;__Lib_GPIO.c, 206 :: 		
L_GPIO_Pin_Config4:
;__Lib_GPIO.c, 208 :: 		
; tmpRdRegpad start address is: 24 (R6)
0x220C	0x6C3008C8  LPM.L	R3, $+276
0x2210	0x44310034  AND.L	R3, R2, R3
0x2214	0x5DE1C002  CMP.L	R3, #0
0x2218	0x0028088E  JMPC	R30, Z, #1, L__GPIO_Pin_Config41
;__Lib_GPIO.c, 210 :: 		
0x221C	0x44434F34  AND.L	R4, R6, #243
0x2220	0x4442500D  BEXTU.L	R4, R4, #256
; tmpRdRegpad end address is: 24 (R6)
;__Lib_GPIO.c, 211 :: 		
0x2224	0x4432C0C4  AND.L	R3, R5, #12
0x2228	0x4431C00D  BEXTU.L	R3, R3, #0
0x222C	0x44320035  OR.L	R3, R4, R3
; tmpRdRegpad start address is: 24 (R6)
0x2230	0x4461D00D  BEXTU.L	R6, R3, #256
; tmpRdRegpad end address is: 24 (R6)
;__Lib_GPIO.c, 212 :: 		
0x2234	0x0030088E  JMP	L_GPIO_Pin_Config5
L__GPIO_Pin_Config41:
;__Lib_GPIO.c, 208 :: 		
;__Lib_GPIO.c, 212 :: 		
L_GPIO_Pin_Config5:
;__Lib_GPIO.c, 214 :: 		
; tmpRdRegpad start address is: 24 (R6)
0x2238	0x6C3008C9  LPM.L	R3, $+236
0x223C	0x44310034  AND.L	R3, R2, R3
0x2240	0x5DE1C002  CMP.L	R3, #0
0x2244	0x00280899  JMPC	R30, Z, #1, L__GPIO_Pin_Config42
;__Lib_GPIO.c, 216 :: 		
0x2248	0x44434CF4  AND.L	R4, R6, #207
0x224C	0x4442500D  BEXTU.L	R4, R4, #256
; tmpRdRegpad end address is: 24 (R6)
;__Lib_GPIO.c, 217 :: 		
0x2250	0x4432C304  AND.L	R3, R5, #48
0x2254	0x4431C00D  BEXTU.L	R3, R3, #0
0x2258	0x44320035  OR.L	R3, R4, R3
; tmpRdRegpad start address is: 24 (R6)
0x225C	0x4461D00D  BEXTU.L	R6, R3, #256
; tmpRdRegpad end address is: 24 (R6)
;__Lib_GPIO.c, 218 :: 		
0x2260	0x00300899  JMP	L_GPIO_Pin_Config6
L__GPIO_Pin_Config42:
;__Lib_GPIO.c, 214 :: 		
;__Lib_GPIO.c, 218 :: 		
L_GPIO_Pin_Config6:
;__Lib_GPIO.c, 220 :: 		
; tmpRdRegpad start address is: 24 (R6)
0x2264	0x6C3008CA  LPM.L	R3, $+196
0x2268	0x44310034  AND.L	R3, R2, R3
; configLow end address is: 8 (R2)
0x226C	0x5DE1C002  CMP.L	R3, #0
0x2270	0x002808A5  JMPC	R30, Z, #1, L__GPIO_Pin_Config43
;__Lib_GPIO.c, 222 :: 		
0x2274	0x444343F4  AND.L	R4, R6, #63
0x2278	0x4442500D  BEXTU.L	R4, R4, #256
; tmpRdRegpad end address is: 24 (R6)
;__Lib_GPIO.c, 223 :: 		
0x227C	0x643000C0  LDK.L	R3, #192
0x2280	0x44318054  AND.L	R3, R3, R5
0x2284	0x4431C00D  BEXTU.L	R3, R3, #0
; configHigh end address is: 20 (R5)
0x2288	0x44320035  OR.L	R3, R4, R3
; tmpRdRegpad start address is: 8 (R2)
0x228C	0x4421D00D  BEXTU.L	R2, R3, #256
; tmpRdRegpad end address is: 8 (R2)
;__Lib_GPIO.c, 224 :: 		
0x2290	0x003008A6  JMP	L_GPIO_Pin_Config7
L__GPIO_Pin_Config43:
;__Lib_GPIO.c, 220 :: 		
0x2294	0x4423500D  BEXTU.L	R2, R6, #256
;__Lib_GPIO.c, 224 :: 		
L_GPIO_Pin_Config7:
;__Lib_GPIO.c, 226 :: 		
; tmpRdRegpad start address is: 8 (R2)
0x2298	0x6431001C  LDK.L	R3, #PIN_00_03+0
0x229C	0x44318000  ADD.L	R3, R3, R0
0x22A0	0xB0310000  STI.B	R3, #0, R2
; tmpRdRegpad end address is: 8 (R2)
;__Lib_GPIO.c, 228 :: 		
0x22A4	0x59E0C102  CMP.B	R1, #16
0x22A8	0x002808C6  JMPC	R30, Z, #1, L_GPIO_Pin_Config8
;__Lib_GPIO.c, 230 :: 		
0x22AC	0x4430500D  BEXTU.L	R3, R0, #256
0x22B0	0x4471C019  LSHR.L	R7, R3, #1
0x22B4	0x4473D00D  BEXTU.L	R7, R7, #256
0x22B8	0x64310060  LDK.L	R3, #GPIO_CFG_00_07+0
0x22BC	0x44318070  ADD.L	R3, R3, R7
0x22C0	0xA8418000  LDI.B	R4, R3, #0
;__Lib_GPIO.c, 232 :: 		
0x22C4	0x44304014  AND.L	R3, R0, #1
0x22C8	0x4431D00D  BEXTU.L	R3, R3, #256
; pinNum end address is: 0 (R0)
0x22CC	0x4431C028  ASHL.L	R3, R3, #2
0x22D0	0x4431C00D  BEXTU.L	R3, R3, #0
;__Lib_GPIO.c, 233 :: 		
0x22D4	0x4461D00D  BEXTU.L	R6, R3, #256
0x22D8	0x6430000C  LDK.L	R3, #12
0x22DC	0x44318068  ASHL.L	R3, R3, R6
0x22E0	0x4431C00C  BEXTS.L	R3, R3, #0
0x22E4	0x4431FFF6  XOR.L	R3, R3, #-1
0x22E8	0x4431C00C  BEXTS.L	R3, R3, #0
0x22EC	0x44520034  AND.L	R5, R4, R3
;__Lib_GPIO.c, 234 :: 		
0x22F0	0x4440D00D  BEXTU.L	R4, R1, #256
; dir end address is: 4 (R1)
0x22F4	0x4433500D  BEXTU.L	R3, R6, #256
0x22F8	0x44420038  ASHL.L	R4, R4, R3
0x22FC	0x4442400D  BEXTU.L	R4, R4, #0
0x2300	0x4432D00D  BEXTU.L	R3, R5, #256
0x2304	0x44518045  OR.L	R5, R3, R4
;__Lib_GPIO.c, 236 :: 		
0x2308	0x64310060  LDK.L	R3, #GPIO_CFG_00_07+0
0x230C	0x44418070  ADD.L	R4, R3, R7
0x2310	0x4432D00D  BEXTU.L	R3, R5, #256
0x2314	0xB0418000  STI.B	R4, #0, R3
;__Lib_GPIO.c, 237 :: 		
L_GPIO_Pin_Config8:
;__Lib_GPIO.c, 239 :: 		
0x2318	0x640000FF  LDK.L	R0, #255
;__Lib_GPIO.c, 240 :: 		
L_end_GPIO_Pin_Config:
0x231C	0xA0000000  RETURN	
0x2320	0x000C00F0  	#786672
0x2324	0x00300F00  	#3149568
0x2328	0x00C0E000  	#12640256
; end of _GPIO_Pin_Config
_PWR_EnableModule:
;__Lib_PWR.c, 65 :: 		
; config start address is: 0 (R0)
; config end address is: 0 (R0)
; config start address is: 0 (R0)
;__Lib_PWR.c, 67 :: 		
0x2418	0xC4110008  LDA.L	R1, CLKCFG+0
0x241C	0x44108005  OR.L	R1, R1, R0
; config end address is: 0 (R0)
0x2420	0xBC110008  STA.L	CLKCFG+0, R1
;__Lib_PWR.c, 68 :: 		
0x2424	0xC4110008  LDA.L	R1, CLKCFG+0
0x2428	0x64204000  LDK.L	R2, #16384
0x242C	0x44108024  AND.L	R1, R1, R2
0x2430	0x5DE08022  CMP.L	R1, R2
0x2434	0x64200000  LDK.L	R2, #0
0x2438	0x00200910  JMPC	R30, Z, #0, L__PWR_EnableModule10
0x243C	0x64200001  LDK.L	R2, #1
L__PWR_EnableModule10:
0x2440	0xC411000C  LDA.L	R1, PMCFG+0
0x2444	0x45E142A3  LDL.L	R30, R2, #42
0x2448	0x441081EB  BINS.L	R1, R1, R30
0x244C	0xBC11000C  STA.L	PMCFG+0, R1
;__Lib_PWR.c, 69 :: 		
L_end_PWR_EnableModule:
0x2450	0xA0000000  RETURN	
; end of _PWR_EnableModule
_GPIO_Pin_Digital_Input:
;__Lib_GPIO.c, 255 :: 		
; pinNum start address is: 0 (R0)
; pinNum end address is: 0 (R0)
; pinNum start address is: 0 (R0)
;__Lib_GPIO.c, 257 :: 		
0x2158	0x6C20085A  LPM.L	R2, $+16
0x215C	0x64100000  LDK.L	R1, #0
; pinNum end address is: 0 (R0)
0x2160	0x0034085B  CALL	_GPIO_Pin_Config+0
;__Lib_GPIO.c, 258 :: 		
L_end_GPIO_Pin_Digital_Input:
0x2164	0xA0000000  RETURN	
0x2168	0x00100215  	#1049109
; end of _GPIO_Pin_Digital_Input
_receive_data:
;matrixrgb_firmware.c, 513 :: 		void receive_data(uint8_t* dataPtr, uint16_t dataSize)
; dataSize start address is: 4 (R1)
; dataPtr start address is: 0 (R0)
0x246C	0x95D00004  LINK	LR, #4
; dataSize end address is: 4 (R1)
; dataPtr end address is: 0 (R0)
; dataPtr start address is: 0 (R0)
; dataSize start address is: 4 (R1)
;matrixrgb_firmware.c, 516 :: 		SetReady();
0x2470	0xC4210084  LDA.L	R2, GPIO_PIN17_bit+0
0x2474	0x4421631B  BINS.L	R2, R2, #BitPos(GPIO_PIN17_bit+0)=1
0x2478	0xBC210084  STA.L	GPIO_PIN17_bit+0, R2
; dataPtr end address is: 0 (R0)
; dataSize end address is: 4 (R1)
0x247C	0xB3F08000  STI.S	SP, #0, R1
0x2480	0x44104000  MOVE.L	R1, R0
0x2484	0xAA0F8000  LDI.S	R0, SP, #0
;matrixrgb_firmware.c, 518 :: 		while (SPIS1_RX_FIFO_COUNT < dataSize) ;
L_receive_data49:
; dataSize start address is: 0 (R0)
; dataPtr start address is: 4 (R1)
0x2488	0xC42102DC  LDA.L	R2, SPIS1_RX_FIFO_COUNT+0
0x248C	0x5DE10002  CMP.L	R2, R0
0x2490	0x00600926  JMPC	R30, C, #0, L_receive_data50
0x2494	0x00300922  JMP	L_receive_data49
L_receive_data50:
;matrixrgb_firmware.c, 520 :: 		STREAMIN_B(dataPtr, &SPIS1_DATA, dataSize);
0x2498	0x45A0C000  MOVE.L	R26, R1
; dataPtr end address is: 4 (R1)
0x249C	0x65B102C8  LDK.L	R27, #SPIS1_DATA+0
0x24A0	0x45C04000  MOVE.L	R28, R0
; dataSize end address is: 0 (R0)
0x24A4	0xF1AD81CC  STREAMIN.B	R26, R27, R28
;matrixrgb_firmware.c, 522 :: 		SetNotReady();
0x24A8	0xC4210084  LDA.L	R2, GPIO_PIN17_bit+0
0x24AC	0x4421431B  BINS.L	R2, R2, #BitPos(GPIO_PIN17_bit+0)=0
0x24B0	0xBC210084  STA.L	GPIO_PIN17_bit+0, R2
;matrixrgb_firmware.c, 525 :: 		}
L_end_receive_data:
0x24B4	0x99D00000  UNLINK	LR
0x24B8	0xA0000000  RETURN	
; end of _receive_data
_setup_command:
;matrixrgb_firmware.c, 130 :: 		void setup_command( void )
;matrixrgb_firmware.c, 132 :: 		receive_data( &firm_buffer, 2 );
0x24D4	0x64100002  LDK.L	R1, #2
0x24D8	0x6400005F  LDK.L	R0, #_firm_buffer+0
0x24DC	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware.c, 133 :: 		system_setup( firm_buffer[0], firm_buffer[1] );
0x24E0	0xC0100060  LDA.B	R1, _firm_buffer+1
0x24E4	0xC000005F  LDA.B	R0, _firm_buffer+0
0x24E8	0x003408CB  CALL	_system_setup+0
;matrixrgb_firmware.c, 134 :: 		}
L_end_setup_command:
0x24EC	0xA0000000  RETURN	
; end of _setup_command
_system_setup:
;matrixrgb_firmware.c, 591 :: 		void system_setup( uint8_t width, uint8_t height )
; height start address is: 4 (R1)
; width start address is: 0 (R0)
0x232C	0x44C0500D  BEXTU.L	R12, R0, #256
0x2330	0x44D0D00D  BEXTU.L	R13, R1, #256
; height end address is: 4 (R1)
; width end address is: 0 (R0)
; width start address is: 48 (R12)
; height start address is: 52 (R13)
;matrixrgb_firmware.c, 594 :: 		uint8_t currRow = 0;
;matrixrgb_firmware.c, 597 :: 		GPIO_Digital_Output(&GPIO_PORT_08_15, _GPIO_PINMASK_ALL);
0x2334	0x641000FF  LDK.L	R1, #255
0x2338	0x64010085  LDK.L	R0, #GPIO_PORT_08_15+0
0x233C	0x00340494  CALL	_GPIO_Digital_Output+0
;matrixrgb_firmware.c, 599 :: 		_GPIO_PINMASK_2 | _GPIO_PINMASK_3 );
0x2340	0x6410000F  LDK.L	R1, #15
0x2344	0x64010088  LDK.L	R0, #GPIO_PORT_32_39+0
0x2348	0x00340494  CALL	_GPIO_Digital_Output+0
;matrixrgb_firmware.c, 600 :: 		GPIO_Digital_Output(&GPIO_PORT_40_47, _GPIO_PINMASK_4 | _GPIO_PINMASK_5 );
0x234C	0x64100030  LDK.L	R1, #48
0x2350	0x64010089  LDK.L	R0, #GPIO_PORT_40_47+0
0x2354	0x00340494  CALL	_GPIO_Digital_Output+0
;matrixrgb_firmware.c, 602 :: 		GPIO_Digital_Output(&GPIO_PORT_48_55, _GPIO_PINMASK_4 );         // OE Pin
0x2358	0x64100010  LDK.L	R1, #16
0x235C	0x6401008A  LDK.L	R0, #GPIO_PORT_48_55+0
0x2360	0x00340494  CALL	_GPIO_Digital_Output+0
;matrixrgb_firmware.c, 605 :: 		Led_Matrix_Data = 0; asm nop;
0x2364	0x64200000  LDK.L	R2, #0
0x2368	0xB8210085  STA.B	GPIO_PORT_08_15+0, R2
0x236C	0x44004000  NOP	
;matrixrgb_firmware.c, 606 :: 		Led_Matrix_A = 0; asm nop;
0x2370	0xC4210088  LDA.L	R2, GPIO_PIN32_bit+0
0x2374	0x4421420B  BINS.L	R2, R2, #BitPos(GPIO_PIN32_bit+0)=0
0x2378	0xBC210088  STA.L	GPIO_PIN32_bit+0, R2
0x237C	0x44004000  NOP	
;matrixrgb_firmware.c, 607 :: 		Led_Matrix_B = 0; asm nop;
0x2380	0xC4210088  LDA.L	R2, GPIO_PIN33_bit+0
0x2384	0x4421421B  BINS.L	R2, R2, #BitPos(GPIO_PIN33_bit+0)=0
0x2388	0xBC210088  STA.L	GPIO_PIN33_bit+0, R2
0x238C	0x44004000  NOP	
;matrixrgb_firmware.c, 608 :: 		Led_Matrix_C = 0; asm nop;
0x2390	0xC4210088  LDA.L	R2, GPIO_PIN34_bit+0
0x2394	0x4421422B  BINS.L	R2, R2, #BitPos(GPIO_PIN34_bit+0)=0
0x2398	0xBC210088  STA.L	GPIO_PIN34_bit+0, R2
0x239C	0x44004000  NOP	
;matrixrgb_firmware.c, 609 :: 		Led_Matrix_D = 0; asm nop;
0x23A0	0xC4210088  LDA.L	R2, GPIO_PIN35_bit+0
0x23A4	0x4421423B  BINS.L	R2, R2, #BitPos(GPIO_PIN35_bit+0)=0
0x23A8	0xBC210088  STA.L	GPIO_PIN35_bit+0, R2
0x23AC	0x44004000  NOP	
;matrixrgb_firmware.c, 610 :: 		Led_Matrix_CLK = 0; asm nop;
0x23B0	0xC4210088  LDA.L	R2, GPIO_PIN45_bit+0
0x23B4	0x442142DB  BINS.L	R2, R2, #BitPos(GPIO_PIN45_bit+0)=0
0x23B8	0xBC210088  STA.L	GPIO_PIN45_bit+0, R2
0x23BC	0x44004000  NOP	
;matrixrgb_firmware.c, 611 :: 		Led_Matrix_STB = 1; asm nop;
0x23C0	0xC4210088  LDA.L	R2, GPIO_PIN44_bit+0
0x23C4	0x442162CB  BINS.L	R2, R2, #BitPos(GPIO_PIN44_bit+0)=1
0x23C8	0xBC210088  STA.L	GPIO_PIN44_bit+0, R2
0x23CC	0x44004000  NOP	
;matrixrgb_firmware.c, 612 :: 		Led_Matrix_OE  = 1; asm nop;
0x23D0	0xC4210088  LDA.L	R2, GPIO_PIN52_bit+0
0x23D4	0x4421634B  BINS.L	R2, R2, #BitPos(GPIO_PIN52_bit+0)=1
0x23D8	0xBC210088  STA.L	GPIO_PIN52_bit+0, R2
0x23DC	0x44004000  NOP	
;matrixrgb_firmware.c, 613 :: 		Delay_ms(100);
0x23E0	0x6DC008FE  LPM.L	R28, $+24
0x23E4	0x44004000  NOP	
L_system_setup59:
0x23E8	0x45CE4012  SUB.L	R28, R28, #1
0x23EC	0x5DEE4002  CMP.L	R28, #0
0x23F0	0x002008FA  JMPC	R30, Z, #0, L_system_setup59
0x23F4	0x003008FF  JMP	$+8
0x23F8	0x0032DCD3  	#3333331
0x23FC	0x44004000  NOP	
0x2400	0x44004000  NOP	
;matrixrgb_firmware.c, 619 :: 		init_parameters( width, height );
0x2404	0x4416D00D  BEXTU.L	R1, R13, #256
; height end address is: 52 (R13)
0x2408	0x4406500D  BEXTU.L	R0, R12, #256
; width end address is: 48 (R12)
0x240C	0x00340486  CALL	_init_parameters+0
;matrixrgb_firmware.c, 622 :: 		create_frame_buffer();
0x2410	0x0034047A  CALL	_create_frame_buffer+0
;matrixrgb_firmware.c, 627 :: 		}
L_end_system_setup:
0x2414	0xA0000000  RETURN	
; end of _system_setup
_GPIO_Digital_Output:
;__Lib_GPIO.c, 472 :: 		
; pinMask start address is: 4 (R1)
; port start address is: 0 (R0)
; pinMask end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; pinMask start address is: 4 (R1)
;__Lib_GPIO.c, 474 :: 		
0x1250	0x6C300498  LPM.L	R3, $+16
0x1254	0x64200004  LDK.L	R2, #4
; pinMask end address is: 4 (R1)
; port end address is: 0 (R0)
0x1258	0x00340254  CALL	_GPIO_Config+0
;__Lib_GPIO.c, 475 :: 		
L_end_GPIO_Digital_Output:
0x125C	0xA0000000  RETURN	
0x1260	0x00100215  	#1049109
; end of _GPIO_Digital_Output
_GPIO_Config:
;__Lib_GPIO.c, 378 :: 		
; config start address is: 12 (R3)
; dir start address is: 8 (R2)
; pinMask start address is: 4 (R1)
; port start address is: 0 (R0)
0x0950	0x95D00004  LINK	LR, #4
; config end address is: 12 (R3)
; dir end address is: 8 (R2)
; pinMask end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; pinMask start address is: 4 (R1)
; dir start address is: 8 (R2)
; config start address is: 12 (R3)
;__Lib_GPIO.c, 389 :: 		
; configLow start address is: 20 (R5)
0x0954	0x4451C00D  BEXTU.L	R5, R3, #0
;__Lib_GPIO.c, 390 :: 		
0x0958	0x4441C109  LSHR.L	R4, R3, #16
; config end address is: 12 (R3)
; configHigh start address is: 24 (R6)
0x095C	0x4462400D  BEXTU.L	R6, R4, #0
;__Lib_GPIO.c, 392 :: 		
0x0960	0x6441008C  LDK.L	R4, #GPIO_PORT_64_66+0
0x0964	0x5DE00042  CMP.L	R0, R4
0x0968	0x0020025D  JMPC	R30, Z, #0, L_GPIO_Config22
;__Lib_GPIO.c, 394 :: 		
; portNumOfPins start address is: 12 (R3)
0x096C	0x64300003  LDK.L	R3, #3
;__Lib_GPIO.c, 395 :: 		
; portNumOfPins end address is: 12 (R3)
0x0970	0x0030025E  JMP	L_GPIO_Config23
L_GPIO_Config22:
;__Lib_GPIO.c, 398 :: 		
; portNumOfPins start address is: 12 (R3)
0x0974	0x64300008  LDK.L	R3, #8
; portNumOfPins end address is: 12 (R3)
;__Lib_GPIO.c, 399 :: 		
L_GPIO_Config23:
;__Lib_GPIO.c, 402 :: 		
; portNumOfPins start address is: 12 (R3)
; clearMask start address is: 32 (R8)
0x0978	0x64800000  LDK.L	R8, #0
;__Lib_GPIO.c, 403 :: 		
; setMask start address is: 28 (R7)
0x097C	0x64700000  LDK.L	R7, #0
;__Lib_GPIO.c, 405 :: 		
0x0980	0x64410003  LDK.L	R4, #65539
0x0984	0x44428044  AND.L	R4, R5, R4
0x0988	0x5DE24002  CMP.L	R4, #0
0x098C	0x00280269  JMPC	R30, Z, #1, L__GPIO_Config53
;__Lib_GPIO.c, 407 :: 		
0x0990	0x44844015  OR.L	R8, R8, #1
;__Lib_GPIO.c, 408 :: 		
0x0994	0x44434014  AND.L	R4, R6, #1
0x0998	0x4442400D  BEXTU.L	R4, R4, #0
0x099C	0x44738045  OR.L	R7, R7, R4
; setMask end address is: 28 (R7)
; clearMask end address is: 32 (R8)
;__Lib_GPIO.c, 409 :: 		
0x09A0	0x00300269  JMP	L_GPIO_Config24
L__GPIO_Config53:
;__Lib_GPIO.c, 405 :: 		
;__Lib_GPIO.c, 409 :: 		
L_GPIO_Config24:
;__Lib_GPIO.c, 411 :: 		
; setMask start address is: 28 (R7)
; clearMask start address is: 32 (R8)
0x09A4	0x6442000C  LDK.L	R4, #131084
0x09A8	0x44428044  AND.L	R4, R5, R4
0x09AC	0x5DE24002  CMP.L	R4, #0
0x09B0	0x00280272  JMPC	R30, Z, #1, L__GPIO_Config54
;__Lib_GPIO.c, 413 :: 		
0x09B4	0x44844025  OR.L	R8, R8, #2
;__Lib_GPIO.c, 414 :: 		
0x09B8	0x44434024  AND.L	R4, R6, #2
0x09BC	0x4442400D  BEXTU.L	R4, R4, #0
0x09C0	0x44738045  OR.L	R7, R7, R4
; setMask end address is: 28 (R7)
; clearMask end address is: 32 (R8)
;__Lib_GPIO.c, 415 :: 		
0x09C4	0x00300272  JMP	L_GPIO_Config25
L__GPIO_Config54:
;__Lib_GPIO.c, 411 :: 		
;__Lib_GPIO.c, 415 :: 		
L_GPIO_Config25:
;__Lib_GPIO.c, 417 :: 		
; setMask start address is: 28 (R7)
; clearMask start address is: 32 (R8)
0x09C8	0x6C4002CE  LPM.L	R4, $+368
0x09CC	0x44428044  AND.L	R4, R5, R4
0x09D0	0x5DE24002  CMP.L	R4, #0
0x09D4	0x0028027E  JMPC	R30, Z, #1, L__GPIO_Config55
;__Lib_GPIO.c, 419 :: 		
0x09D8	0x448440C5  OR.L	R8, R8, #12
;__Lib_GPIO.c, 420 :: 		
0x09DC	0x444340C4  AND.L	R4, R6, #12
0x09E0	0x4442400D  BEXTU.L	R4, R4, #0
0x09E4	0x44738045  OR.L	R7, R7, R4
; setMask end address is: 28 (R7)
; clearMask end address is: 32 (R8)
0x09E8	0xB5F38000  STI.L	SP, #0, R7
0x09EC	0x44744000  MOVE.L	R7, R8
0x09F0	0xAC8F8000  LDI.L	R8, SP, #0
;__Lib_GPIO.c, 421 :: 		
0x09F4	0x00300281  JMP	L_GPIO_Config26
L__GPIO_Config55:
;__Lib_GPIO.c, 417 :: 		
0x09F8	0xB5F40000  STI.L	SP, #0, R8
0x09FC	0x4483C000  MOVE.L	R8, R7
0x0A00	0xAC7F8000  LDI.L	R7, SP, #0
;__Lib_GPIO.c, 421 :: 		
L_GPIO_Config26:
;__Lib_GPIO.c, 423 :: 		
; setMask start address is: 32 (R8)
; clearMask start address is: 28 (R7)
0x0A04	0x6C4002CF  LPM.L	R4, $+312
0x0A08	0x44428044  AND.L	R4, R5, R4
; configLow end address is: 20 (R5)
0x0A0C	0x5DE24002  CMP.L	R4, #0
0x0A10	0x0028028A  JMPC	R30, Z, #1, L__GPIO_Config56
;__Lib_GPIO.c, 425 :: 		
0x0A14	0x4473C305  OR.L	R7, R7, #48
;__Lib_GPIO.c, 426 :: 		
0x0A18	0x44434304  AND.L	R4, R6, #48
0x0A1C	0x4442400D  BEXTU.L	R4, R4, #0
; configHigh end address is: 24 (R6)
0x0A20	0x44840045  OR.L	R8, R8, R4
; clearMask end address is: 28 (R7)
; setMask end address is: 32 (R8)
;__Lib_GPIO.c, 427 :: 		
0x0A24	0x0030028A  JMP	L_GPIO_Config27
L__GPIO_Config56:
;__Lib_GPIO.c, 423 :: 		
;__Lib_GPIO.c, 427 :: 		
L_GPIO_Config27:
;__Lib_GPIO.c, 429 :: 		
; setMask start address is: 32 (R8)
; clearMask start address is: 28 (R7)
0x0A28	0x64410084  LDK.L	R4, #GPIO_VAL_00_31+0
0x0A2C	0x44400042  SUB.L	R4, R0, R4
0x0A30	0x44524038  ASHL.L	R5, R4, #3
0x0A34	0x6441001C  LDK.L	R4, #PIN_00_03+0
0x0A38	0x44420050  ADD.L	R4, R4, R5
; regByteAddr start address is: 16 (R4)
;__Lib_GPIO.c, 431 :: 		
; tmpPinMask start address is: 44 (R11)
0x0A3C	0x44B0D00D  BEXTU.L	R11, R1, #256
;__Lib_GPIO.c, 432 :: 		
; cnt start address is: 40 (R10)
0x0A40	0x64A00000  LDK.L	R10, #0
; portNumOfPins end address is: 12 (R3)
; regByteAddr end address is: 16 (R4)
; dir end address is: 8 (R2)
; pinMask end address is: 4 (R1)
; tmpPinMask end address is: 44 (R11)
; cnt end address is: 40 (R10)
; port end address is: 0 (R0)
0x0A44	0x4491D00D  BEXTU.L	R9, R3, #256
0x0A48	0x44324000  MOVE.L	R3, R4
L_GPIO_Config28:
; cnt start address is: 40 (R10)
; regByteAddr start address is: 12 (R3)
; tmpPinMask start address is: 44 (R11)
; regByteAddr start address is: 12 (R3)
; regByteAddr end address is: 12 (R3)
; clearMask start address is: 28 (R7)
; clearMask end address is: 28 (R7)
; setMask start address is: 32 (R8)
; setMask end address is: 32 (R8)
; portNumOfPins start address is: 36 (R9)
; dir start address is: 8 (R2)
; pinMask start address is: 4 (R1)
; port start address is: 0 (R0)
0x0A4C	0x5DE50092  CMP.L	R10, R9
0x0A50	0x006002A8  JMPC	R30, C, #0, L_GPIO_Config29
; regByteAddr end address is: 12 (R3)
; clearMask end address is: 28 (R7)
; setMask end address is: 32 (R8)
;__Lib_GPIO.c, 434 :: 		
; setMask start address is: 32 (R8)
; clearMask start address is: 28 (R7)
; regByteAddr start address is: 12 (R3)
0x0A54	0x4445C014  AND.L	R4, R11, #1
0x0A58	0x5DE24002  CMP.L	R4, #0
0x0A5C	0x002802A5  JMPC	R30, Z, #1, L_GPIO_Config31
;__Lib_GPIO.c, 436 :: 		
0x0A60	0x445180A0  ADD.L	R5, R3, R10
0x0A64	0xA8428000  LDI.B	R4, R5, #0
0x0A68	0x444243F4  AND.L	R4, R4, #63
0x0A6C	0xB0520000  STI.B	R5, #0, R4
;__Lib_GPIO.c, 437 :: 		
0x0A70	0x446180A0  ADD.L	R6, R3, R10
0x0A74	0x4453FFF6  XOR.L	R5, R7, #-1
0x0A78	0xA8430000  LDI.B	R4, R6, #0
0x0A7C	0x44420054  AND.L	R4, R4, R5
0x0A80	0xB0620000  STI.B	R6, #0, R4
;__Lib_GPIO.c, 438 :: 		
0x0A84	0x445180A0  ADD.L	R5, R3, R10
0x0A88	0xA8428000  LDI.B	R4, R5, #0
0x0A8C	0x44420085  OR.L	R4, R4, R8
0x0A90	0xB0520000  STI.B	R5, #0, R4
;__Lib_GPIO.c, 439 :: 		
L_GPIO_Config31:
;__Lib_GPIO.c, 440 :: 		
0x0A94	0x44B5C019  LSHR.L	R11, R11, #1
;__Lib_GPIO.c, 432 :: 		
0x0A98	0x44A54010  ADD.L	R10, R10, #1
;__Lib_GPIO.c, 441 :: 		
; regByteAddr end address is: 12 (R3)
; clearMask end address is: 28 (R7)
; setMask end address is: 32 (R8)
; portNumOfPins end address is: 36 (R9)
; tmpPinMask end address is: 44 (R11)
; cnt end address is: 40 (R10)
0x0A9C	0x00300293  JMP	L_GPIO_Config28
L_GPIO_Config29:
;__Lib_GPIO.c, 447 :: 		
; clearMask start address is: 32 (R8)
0x0AA0	0x64800000  LDK.L	R8, #0
;__Lib_GPIO.c, 448 :: 		
; setMask start address is: 28 (R7)
0x0AA4	0x64700000  LDK.L	R7, #0
;__Lib_GPIO.c, 450 :: 		
; tmpPinMask start address is: 12 (R3)
0x0AA8	0x4430D00D  BEXTU.L	R3, R1, #256
; pinMask end address is: 4 (R1)
;__Lib_GPIO.c, 451 :: 		
; cnt start address is: 4 (R1)
0x0AAC	0x64100000  LDK.L	R1, #0
; dir end address is: 8 (R2)
; cnt end address is: 4 (R1)
; port end address is: 0 (R0)
; setMask end address is: 28 (R7)
; clearMask end address is: 32 (R8)
; tmpPinMask end address is: 12 (R3)
0x0AB0	0xB5F08000  STI.L	SP, #0, R1
0x0AB4	0x4411500D  BEXTU.L	R1, R2, #256
0x0AB8	0xAC2F8000  LDI.L	R2, SP, #0
L_GPIO_Config32:
; cnt start address is: 8 (R2)
; dir start address is: 4 (R1)
; tmpPinMask start address is: 12 (R3)
; setMask start address is: 28 (R7)
; clearMask start address is: 32 (R8)
; port start address is: 0 (R0)
; dir start address is: 4 (R1)
; dir end address is: 4 (R1)
0x0ABC	0x5DE14202  CMP.L	R2, #32
0x0AC0	0x006002BE  JMPC	R30, C, #0, L_GPIO_Config33
; dir end address is: 4 (R1)
;__Lib_GPIO.c, 453 :: 		
; dir start address is: 4 (R1)
0x0AC4	0x4441C014  AND.L	R4, R3, #1
0x0AC8	0x5DE24002  CMP.L	R4, #0
0x0ACC	0x002802BB  JMPC	R30, Z, #1, L__GPIO_Config57
;__Lib_GPIO.c, 455 :: 		
0x0AD0	0x6440000C  LDK.L	R4, #12
0x0AD4	0x44420028  ASHL.L	R4, R4, R2
0x0AD8	0x44840045  OR.L	R8, R8, R4
;__Lib_GPIO.c, 456 :: 		
0x0ADC	0x4440D00D  BEXTU.L	R4, R1, #256
0x0AE0	0x44420028  ASHL.L	R4, R4, R2
0x0AE4	0x44738045  OR.L	R7, R7, R4
; setMask end address is: 28 (R7)
; clearMask end address is: 32 (R8)
;__Lib_GPIO.c, 457 :: 		
0x0AE8	0x003002BB  JMP	L_GPIO_Config35
L__GPIO_Config57:
;__Lib_GPIO.c, 453 :: 		
;__Lib_GPIO.c, 457 :: 		
L_GPIO_Config35:
;__Lib_GPIO.c, 458 :: 		
; setMask start address is: 28 (R7)
; clearMask start address is: 32 (R8)
0x0AEC	0x4431C019  LSHR.L	R3, R3, #1
;__Lib_GPIO.c, 451 :: 		
0x0AF0	0x44214040  ADD.L	R2, R2, #4
;__Lib_GPIO.c, 459 :: 		
; dir end address is: 4 (R1)
; tmpPinMask end address is: 12 (R3)
; cnt end address is: 8 (R2)
0x0AF4	0x003002AF  JMP	L_GPIO_Config32
L_GPIO_Config33:
;__Lib_GPIO.c, 461 :: 		
0x0AF8	0x64410084  LDK.L	R4, #GPIO_VAL_00_31+0
0x0AFC	0x44400042  SUB.L	R4, R0, R4
; port end address is: 0 (R0)
0x0B00	0x44524028  ASHL.L	R5, R4, #2
0x0B04	0x64410060  LDK.L	R4, #GPIO_CFG_00_07+0
0x0B08	0x44620050  ADD.L	R6, R4, R5
; regLongAddr start address is: 0 (R0)
0x0B0C	0x44034000  MOVE.L	R0, R6
;__Lib_GPIO.c, 462 :: 		
0x0B10	0x44547FF6  XOR.L	R5, R8, #-1
; clearMask end address is: 32 (R8)
0x0B14	0xAC430000  LDI.L	R4, R6, #0
0x0B18	0x44420054  AND.L	R4, R4, R5
0x0B1C	0xB4620000  STI.L	R6, #0, R4
;__Lib_GPIO.c, 463 :: 		
0x0B20	0xAC400000  LDI.L	R4, R0, #0
0x0B24	0x44420075  OR.L	R4, R4, R7
; setMask end address is: 28 (R7)
0x0B28	0xB4020000  STI.L	R0, #0, R4
; regLongAddr end address is: 0 (R0)
;__Lib_GPIO.c, 465 :: 		
0x0B2C	0x640000FF  LDK.L	R0, #255
;__Lib_GPIO.c, 466 :: 		
L_end_GPIO_Config:
0x0B30	0x99D00000  UNLINK	LR
0x0B34	0xA0000000  RETURN	
0x0B38	0x000C00F0  	#786672
0x0B3C	0x00300F00  	#3149568
; end of _GPIO_Config
_init_parameters:
;matrixrgb_firmware.c, 657 :: 		void init_parameters( uint8_t width, uint8_t height )
; height start address is: 4 (R1)
; width start address is: 0 (R0)
; height end address is: 4 (R1)
; width end address is: 0 (R0)
; width start address is: 0 (R0)
; height start address is: 4 (R1)
;matrixrgb_firmware.c, 659 :: 		pan_width  = width;
0x1218	0xB800EB46  STA.B	_pan_width+0, R0
;matrixrgb_firmware.c, 660 :: 		pan_height = height;
0x121C	0xB810EB47  STA.B	_pan_height+0, R1
;matrixrgb_firmware.c, 661 :: 		p_height = height * 32;
0x1220	0x4420D00D  BEXTU.L	R2, R1, #256
0x1224	0x44214058  ASHL.L	R2, R2, #5
0x1228	0xBA20EB44  STA.S	_p_height+0, R2
;matrixrgb_firmware.c, 662 :: 		p_width  = width * 32;
0x122C	0x4420500D  BEXTU.L	R2, R0, #256
0x1230	0x44214058  ASHL.L	R2, R2, #5
0x1234	0xBA2000E2  STA.S	_p_width+0, R2
;matrixrgb_firmware.c, 663 :: 		shift_reg = 64 * ( width * height );
0x1238	0xF4200018  MUL.L	R2, R0, R1
0x123C	0x4421400C  BEXTS.L	R2, R2, #0
; width end address is: 0 (R0)
; height end address is: 4 (R1)
0x1240	0x44214068  ASHL.L	R2, R2, #6
0x1244	0x4421400C  BEXTS.L	R2, R2, #0
0x1248	0xBC20EB50  STA.L	_shift_reg+0, R2
;matrixrgb_firmware.c, 665 :: 		}
L_end_init_parameters:
0x124C	0xA0000000  RETURN	
; end of _init_parameters
_create_frame_buffer:
;matrixrgb_firmware.c, 667 :: 		void create_frame_buffer( void )
;matrixrgb_firmware.c, 669 :: 		uint16_t size = p_width * p_height;
0x11E8	0xC210EB44  LDA.S	R1, _p_height+0
0x11EC	0xC20000E2  LDA.S	R0, _p_width+0
0x11F0	0xF4000018  MUL.L	R0, R0, R1
; size start address is: 36 (R9)
0x11F4	0x4490400D  BEXTU.L	R9, R0, #0
;matrixrgb_firmware.c, 671 :: 		MM_Init();
0x11F8	0x003401EF  CALL	_MM_Init+0
;matrixrgb_firmware.c, 672 :: 		FB = Malloc( sizeof( uint8_t ) * size );
0x11FC	0x4404C00D  BEXTU.L	R0, R9, #0
0x1200	0x003401D3  CALL	_Malloc+0
0x1204	0xBC00EB48  STA.L	_FB+0, R0
;matrixrgb_firmware.c, 673 :: 		memset( FB, 0, size );
0x1208	0x4424C00C  BEXTS.L	R2, R9, #0
; size end address is: 36 (R9)
0x120C	0x64100000  LDK.L	R1, #0
0x1210	0x003401C4  CALL	_memset+0
;matrixrgb_firmware.c, 674 :: 		}
L_end_create_frame_buffer:
0x1214	0xA0000000  RETURN	
; end of _create_frame_buffer
_MM_Init:
;__Lib_MemManager.c, 32 :: 		void MM_Init() {
;__Lib_MemManager.c, 35 :: 		MM_FreeMemTable[0].Size    = HEAP_SIZE;
0x07BC	0x6C00020C  LPM.L	R0, $+116
0x07C0	0xBC00EB58  STA.L	_MM_FreeMemTable+4, R0
;__Lib_MemManager.c, 36 :: 		MM_FreeMemTable[0].Pointer = HEAP_START;
0x07C4	0x6C00020D  LPM.L	R0, $+112
0x07C8	0xBC00EB54  STA.L	_MM_FreeMemTable+0, R0
;__Lib_MemManager.c, 39 :: 		for(i=1; i<NR_FREE_BLOCKS; i++) {
; i start address is: 8 (R2)
0x07CC	0x64200001  LDK.L	R2, #1
; i end address is: 8 (R2)
L_MM_Init0:
; i start address is: 8 (R2)
0x07D0	0x5BE14142  CMP.S	R2, #20
0x07D4	0x01280206  JMPC	R30, GTE, #1, L_MM_Init1
;__Lib_MemManager.c, 40 :: 		MM_FreeMemTable[i].Pointer = NULL;  // clear other table entries
0x07D8	0x4401500D  BEXTU.L	R0, R2, #256
0x07DC	0x44104038  ASHL.L	R1, R0, #3
0x07E0	0x6400EB54  LDK.L	R0, #_MM_FreeMemTable+0
0x07E4	0x44100010  ADD.L	R1, R0, R1
0x07E8	0x64000000  LDK.L	R0, #0
0x07EC	0xB4100000  STI.L	R1, #0, R0
;__Lib_MemManager.c, 41 :: 		MM_FreeMemTable[i].Size    = 0;
0x07F0	0x4401500D  BEXTU.L	R0, R2, #256
0x07F4	0x44104038  ASHL.L	R1, R0, #3
0x07F8	0x6400EB54  LDK.L	R0, #_MM_FreeMemTable+0
0x07FC	0x44000010  ADD.L	R0, R0, R1
0x0800	0x44104040  ADD.L	R1, R0, #4
0x0804	0x64000000  LDK.L	R0, #0
0x0808	0xB4100000  STI.L	R1, #0, R0
;__Lib_MemManager.c, 39 :: 		for(i=1; i<NR_FREE_BLOCKS; i++) {
0x080C	0x44214010  ADD.L	R2, R2, #1
0x0810	0x4421500D  BEXTU.L	R2, R2, #256
;__Lib_MemManager.c, 42 :: 		}
; i end address is: 8 (R2)
0x0814	0x003001F4  JMP	L_MM_Init0
L_MM_Init1:
;__Lib_MemManager.c, 44 :: 		MM_NrFreeBlocksUsed = 1;
0x0818	0x64000001  LDK.L	R0, #1
0x081C	0xB800EBF4  STA.B	_MM_NrFreeBlocksUsed+0, R0
;__Lib_MemManager.c, 45 :: 		MM_Error_ = 0;
0x0820	0x64000000  LDK.L	R0, #0
0x0824	0xB800EBF6  STA.B	_MM_Error_+0, R0
;__Lib_MemManager.c, 46 :: 		MM_PossiblyFragmented = 0;
0x0828	0xB800EBF5  STA.B	_MM_PossiblyFragmented+0, R0
;__Lib_MemManager.c, 47 :: 		}
L_end_MM_Init:
0x082C	0xA0000000  RETURN	
0x0830	0x0000EA60  	_HEAP_SIZE
0x0834	0x000000E4  	_HEAP_START
; end of _MM_Init
_Malloc:
;__Lib_MemManager.c, 200 :: 		void *Malloc(unsigned long Size) {
; Size start address is: 0 (R0)
0x074C	0x95D00004  LINK	LR, #4
0x0750	0x44704000  MOVE.L	R7, R0
; Size end address is: 0 (R0)
; Size start address is: 28 (R7)
;__Lib_MemManager.c, 204 :: 		alignment = 1;
; alignment start address is: 32 (R8)
0x0754	0x64800001  LDK.L	R8, #1
;__Lib_MemManager.c, 205 :: 		if (Size >= 4)
0x0758	0x5DE3C042  CMP.L	R7, #4
0x075C	0x006801DA  JMPC	R30, C, #1, L_Malloc58
;__Lib_MemManager.c, 206 :: 		alignment = 4;
0x0760	0x64800004  LDK.L	R8, #4
0x0764	0x003001DE  JMP	L_Malloc59
L_Malloc58:
;__Lib_MemManager.c, 207 :: 		else if (Size == 2)
0x0768	0x5DE3C022  CMP.L	R7, #2
0x076C	0x002001DE  JMPC	R30, Z, #0, L__Malloc107
;__Lib_MemManager.c, 208 :: 		alignment = 2;
0x0770	0x64800002  LDK.L	R8, #2
; alignment end address is: 32 (R8)
0x0774	0x003001DE  JMP	L_Malloc60
L__Malloc107:
;__Lib_MemManager.c, 207 :: 		else if (Size == 2)
;__Lib_MemManager.c, 208 :: 		alignment = 2;
L_Malloc60:
; alignment start address is: 32 (R8)
; alignment end address is: 32 (R8)
L_Malloc59:
;__Lib_MemManager.c, 210 :: 		P = MM_GetMemAlign(Size, alignment);
; alignment start address is: 32 (R8)
0x0778	0x4414500D  BEXTU.L	R1, R8, #256
0x077C	0x4403C000  MOVE.L	R0, R7
0x0780	0x0034003B  CALL	__Lib_MemManager_MM_GetMemAlign+0
0x0784	0xB5F00000  STI.L	SP, #0, R0
;__Lib_MemManager.c, 211 :: 		if ((P == NULL) && (MM_PossiblyFragmented)) {// try again after defragmentation
0x0788	0x5DE04002  CMP.L	R0, #0
0x078C	0x002001EC  JMPC	R30, Z, #0, L__Malloc106
0x0790	0xC010EBF5  LDA.B	R1, _MM_PossiblyFragmented+0
0x0794	0x59E0C002  CMP.B	R1, #0
0x0798	0x002801EC  JMPC	R30, Z, #1, L__Malloc105
L__Malloc104:
;__Lib_MemManager.c, 212 :: 		MM_Defragment();
0x079C	0x0034013F  CALL	__Lib_MemManager_MM_Defragment+0
;__Lib_MemManager.c, 213 :: 		P = MM_GetMemAlign(Size, alignment);
0x07A0	0x4414500D  BEXTU.L	R1, R8, #256
; alignment end address is: 32 (R8)
0x07A4	0x4403C000  MOVE.L	R0, R7
; Size end address is: 28 (R7)
0x07A8	0x0034003B  CALL	__Lib_MemManager_MM_GetMemAlign+0
0x07AC	0xB5F00000  STI.L	SP, #0, R0
;__Lib_MemManager.c, 211 :: 		if ((P == NULL) && (MM_PossiblyFragmented)) {// try again after defragmentation
L__Malloc106:
L__Malloc105:
;__Lib_MemManager.c, 215 :: 		return P;
0x07B0	0xAC0F8000  LDI.L	R0, SP, #0
;__Lib_MemManager.c, 216 :: 		}
L_end_Malloc:
0x07B4	0x99D00000  UNLINK	LR
0x07B8	0xA0000000  RETURN	
; end of _Malloc
__Lib_MemManager_MM_GetMemAlign:
;__Lib_MemManager.c, 107 :: 		static void *MM_GetMemAlign(unsigned long Size, char alignment) {
; alignment start address is: 4 (R1)
; Size start address is: 0 (R0)
0x00EC	0x95D00008  LINK	LR, #8
; alignment end address is: 4 (R1)
; Size end address is: 0 (R0)
; Size start address is: 0 (R0)
; alignment start address is: 4 (R1)
;__Lib_MemManager.c, 113 :: 		P = NULL; // nil in case no large enough memory is available
; P start address is: 16 (R4)
0x00F0	0x64400000  LDK.L	R4, #0
;__Lib_MemManager.c, 115 :: 		if (MM_Error_)
0x00F4	0xC020EBF6  LDA.B	R2, _MM_Error_+0
0x00F8	0x59E14002  CMP.B	R2, #0
0x00FC	0x00280042  JMPC	R30, Z, #1, L___Lib_MemManager_MM_GetMemAlign27
; alignment end address is: 4 (R1)
; Size end address is: 0 (R0)
;__Lib_MemManager.c, 116 :: 		return P;
0x0100	0x44024000  MOVE.L	R0, R4
; P end address is: 16 (R4)
0x0104	0x0030013D  JMP	L_end_MM_GetMemAlign
L___Lib_MemManager_MM_GetMemAlign27:
;__Lib_MemManager.c, 119 :: 		for(i=0; i < NR_FREE_BLOCKS; i++) {
; Size start address is: 0 (R0)
; P start address is: 16 (R4)
; i start address is: 8 (R2)
; alignment start address is: 4 (R1)
0x0108	0x64200000  LDK.L	R2, #0
; alignment end address is: 4 (R1)
; i end address is: 8 (R2)
; P end address is: 16 (R4)
; Size end address is: 0 (R0)
0x010C	0x4450D00D  BEXTU.L	R5, R1, #256
0x0110	0x4411500D  BEXTU.L	R1, R2, #256
L___Lib_MemManager_MM_GetMemAlign28:
; i start address is: 4 (R1)
; P start address is: 16 (R4)
; alignment start address is: 20 (R5)
; Size start address is: 0 (R0)
0x0114	0x5BE0C142  CMP.S	R1, #20
0x0118	0x012800A1  JMPC	R30, GTE, #1, L___Lib_MemManager_MM_GetMemAlign29
;__Lib_MemManager.c, 120 :: 		tryIt = 1;
; tryIt start address is: 24 (R6)
0x011C	0x64600001  LDK.L	R6, #1
;__Lib_MemManager.c, 121 :: 		if (alignment > 1)
0x0120	0x59E2C012  CMP.B	R5, #1
0x0124	0x01A00056  JMPC	R30, A, #0, L___Lib_MemManager_MM_GetMemAlign100
;__Lib_MemManager.c, 122 :: 		if ((unsigned long)MM_FreeMemTable[i].Pointer % alignment != 0)
0x0128	0x4420D00D  BEXTU.L	R2, R1, #256
0x012C	0x44314038  ASHL.L	R3, R2, #3
0x0130	0x6420EB54  LDK.L	R2, #_MM_FreeMemTable+0
0x0134	0x44210030  ADD.L	R2, R2, R3
0x0138	0xAC210000  LDI.L	R2, R2, #0
0x013C	0xF4210051  UMOD.L	R2, R2, R5
0x0140	0x5DE14002  CMP.L	R2, #0
0x0144	0x00280054  JMPC	R30, Z, #1, L___Lib_MemManager_MM_GetMemAlign99
; tryIt end address is: 24 (R6)
;__Lib_MemManager.c, 123 :: 		tryIt = 0;
; tryIt start address is: 8 (R2)
0x0148	0x64200000  LDK.L	R2, #0
; tryIt end address is: 8 (R2)
0x014C	0x00300055  JMP	L___Lib_MemManager_MM_GetMemAlign32
L___Lib_MemManager_MM_GetMemAlign99:
;__Lib_MemManager.c, 122 :: 		if ((unsigned long)MM_FreeMemTable[i].Pointer % alignment != 0)
0x0150	0x4423500D  BEXTU.L	R2, R6, #256
;__Lib_MemManager.c, 123 :: 		tryIt = 0;
L___Lib_MemManager_MM_GetMemAlign32:
; tryIt start address is: 8 (R2)
; tryIt end address is: 8 (R2)
0x0154	0x00300057  JMP	L___Lib_MemManager_MM_GetMemAlign31
L___Lib_MemManager_MM_GetMemAlign100:
;__Lib_MemManager.c, 121 :: 		if (alignment > 1)
0x0158	0x4423500D  BEXTU.L	R2, R6, #256
;__Lib_MemManager.c, 123 :: 		tryIt = 0;
L___Lib_MemManager_MM_GetMemAlign31:
;__Lib_MemManager.c, 125 :: 		if (tryIt)
; tryIt start address is: 8 (R2)
0x015C	0x59E14002  CMP.B	R2, #0
0x0160	0x0028009E  JMPC	R30, Z, #1, L___Lib_MemManager_MM_GetMemAlign33
; tryIt end address is: 8 (R2)
;__Lib_MemManager.c, 126 :: 		if ((MM_FreeMemTable[i].Pointer > 0) && (MM_FreeMemTable[i].Size >= Size)) { // there is some free memory
0x0164	0x4420D00D  BEXTU.L	R2, R1, #256
0x0168	0x44314038  ASHL.L	R3, R2, #3
0x016C	0x6420EB54  LDK.L	R2, #_MM_FreeMemTable+0
0x0170	0x44210030  ADD.L	R2, R2, R3
0x0174	0xAC210000  LDI.L	R2, R2, #0
0x0178	0x5DE14002  CMP.L	R2, #0
0x017C	0x01A0009E  JMPC	R30, A, #0, L___Lib_MemManager_MM_GetMemAlign98
0x0180	0x4420D00D  BEXTU.L	R2, R1, #256
0x0184	0x44314038  ASHL.L	R3, R2, #3
0x0188	0x6420EB54  LDK.L	R2, #_MM_FreeMemTable+0
0x018C	0x44210030  ADD.L	R2, R2, R3
0x0190	0x44214040  ADD.L	R2, R2, #4
0x0194	0xAC210000  LDI.L	R2, R2, #0
0x0198	0x5DE10002  CMP.L	R2, R0
0x019C	0x0068009E  JMPC	R30, C, #1, L___Lib_MemManager_MM_GetMemAlign97
; P end address is: 16 (R4)
; alignment end address is: 20 (R5)
L___Lib_MemManager_MM_GetMemAlign96:
;__Lib_MemManager.c, 127 :: 		P = MM_FreeMemTable[i].Pointer; // pointer to memory block that will be given
0x01A0	0x4420D00D  BEXTU.L	R2, R1, #256
0x01A4	0x44214038  ASHL.L	R2, R2, #3
0x01A8	0x6430EB54  LDK.L	R3, #_MM_FreeMemTable+0
0x01AC	0x44218020  ADD.L	R2, R3, R2
0x01B0	0xAC210000  LDI.L	R2, R2, #0
; P start address is: 20 (R5)
0x01B4	0x44514000  MOVE.L	R5, R2
;__Lib_MemManager.c, 130 :: 		if (MM_FreeMemTable[i].Size > Size) {
0x01B8	0x4420D00D  BEXTU.L	R2, R1, #256
0x01BC	0x44214038  ASHL.L	R2, R2, #3
0x01C0	0x44218020  ADD.L	R2, R3, R2
0x01C4	0x44214040  ADD.L	R2, R2, #4
0x01C8	0xAC210000  LDI.L	R2, R2, #0
0x01CC	0x5DE10002  CMP.L	R2, R0
0x01D0	0x01A0008C  JMPC	R30, A, #0, L___Lib_MemManager_MM_GetMemAlign37
;__Lib_MemManager.c, 131 :: 		MM_FreeMemTable[i].Pointer = MM_FreeMemTable[i].Pointer + Size;
0x01D4	0x4420D00D  BEXTU.L	R2, R1, #256
0x01D8	0x44214038  ASHL.L	R2, R2, #3
0x01DC	0x6440EB54  LDK.L	R4, #_MM_FreeMemTable+0
0x01E0	0x44320020  ADD.L	R3, R4, R2
0x01E4	0x4420D00D  BEXTU.L	R2, R1, #256
0x01E8	0x44214038  ASHL.L	R2, R2, #3
0x01EC	0x44220020  ADD.L	R2, R4, R2
0x01F0	0xAC210000  LDI.L	R2, R2, #0
0x01F4	0x44210000  ADD.L	R2, R2, R0
0x01F8	0xB4310000  STI.L	R3, #0, R2
;__Lib_MemManager.c, 132 :: 		MM_FreeMemTable[i].Size    = MM_FreeMemTable[i].Size    - Size;
0x01FC	0x4420D00D  BEXTU.L	R2, R1, #256
0x0200	0x44214038  ASHL.L	R2, R2, #3
0x0204	0x6440EB54  LDK.L	R4, #_MM_FreeMemTable+0
0x0208	0x44220020  ADD.L	R2, R4, R2
0x020C	0x44314040  ADD.L	R3, R2, #4
0x0210	0x4420D00D  BEXTU.L	R2, R1, #256
; i end address is: 4 (R1)
0x0214	0x44214038  ASHL.L	R2, R2, #3
0x0218	0x44220020  ADD.L	R2, R4, R2
0x021C	0x44214040  ADD.L	R2, R2, #4
0x0220	0xAC210000  LDI.L	R2, R2, #0
0x0224	0x44210002  SUB.L	R2, R2, R0
; Size end address is: 0 (R0)
0x0228	0xB4310000  STI.L	R3, #0, R2
;__Lib_MemManager.c, 133 :: 		} else { // nothing remains of the free block, discard it
0x022C	0x0030009C  JMP	L___Lib_MemManager_MM_GetMemAlign38
L___Lib_MemManager_MM_GetMemAlign37:
;__Lib_MemManager.c, 134 :: 		MM_FreeMemTable[i].Pointer = NULL;
; i start address is: 4 (R1)
0x0230	0x4420D00D  BEXTU.L	R2, R1, #256
0x0234	0x44314038  ASHL.L	R3, R2, #3
0x0238	0x6420EB54  LDK.L	R2, #_MM_FreeMemTable+0
0x023C	0x44310030  ADD.L	R3, R2, R3
0x0240	0x64200000  LDK.L	R2, #0
0x0244	0xB4310000  STI.L	R3, #0, R2
;__Lib_MemManager.c, 135 :: 		MM_FreeMemTable[i].Size    = 0;
0x0248	0x4420D00D  BEXTU.L	R2, R1, #256
; i end address is: 4 (R1)
0x024C	0x44314038  ASHL.L	R3, R2, #3
0x0250	0x6420EB54  LDK.L	R2, #_MM_FreeMemTable+0
0x0254	0x44210030  ADD.L	R2, R2, R3
0x0258	0x44314040  ADD.L	R3, R2, #4
0x025C	0x64200000  LDK.L	R2, #0
0x0260	0xB4310000  STI.L	R3, #0, R2
;__Lib_MemManager.c, 136 :: 		MM_NrFreeBlocksUsed--;
0x0264	0xC020EBF4  LDA.B	R2, _MM_NrFreeBlocksUsed+0
0x0268	0x44214012  SUB.L	R2, R2, #1
0x026C	0xB820EBF4  STA.B	_MM_NrFreeBlocksUsed+0, R2
;__Lib_MemManager.c, 137 :: 		}
L___Lib_MemManager_MM_GetMemAlign38:
;__Lib_MemManager.c, 139 :: 		return P;
0x0270	0x4402C000  MOVE.L	R0, R5
; P end address is: 20 (R5)
0x0274	0x0030013D  JMP	L_end_MM_GetMemAlign
;__Lib_MemManager.c, 126 :: 		if ((MM_FreeMemTable[i].Pointer > 0) && (MM_FreeMemTable[i].Size >= Size)) { // there is some free memory
L___Lib_MemManager_MM_GetMemAlign98:
; alignment start address is: 20 (R5)
; i start address is: 4 (R1)
; Size start address is: 0 (R0)
; P start address is: 16 (R4)
L___Lib_MemManager_MM_GetMemAlign97:
;__Lib_MemManager.c, 140 :: 		}
L___Lib_MemManager_MM_GetMemAlign33:
;__Lib_MemManager.c, 119 :: 		for(i=0; i < NR_FREE_BLOCKS; i++) {
0x0278	0x4420C010  ADD.L	R2, R1, #1
0x027C	0x4411500D  BEXTU.L	R1, R2, #256
;__Lib_MemManager.c, 141 :: 		}
; i end address is: 4 (R1)
0x0280	0x00300045  JMP	L___Lib_MemManager_MM_GetMemAlign28
L___Lib_MemManager_MM_GetMemAlign29:
;__Lib_MemManager.c, 145 :: 		if (alignment <= 1)
0x0284	0x59E2C012  CMP.B	R5, #1
0x0288	0x01A800A5  JMPC	R30, A, #1, L___Lib_MemManager_MM_GetMemAlign39
; Size end address is: 0 (R0)
; alignment end address is: 20 (R5)
;__Lib_MemManager.c, 146 :: 		return P;
0x028C	0x44024000  MOVE.L	R0, R4
; P end address is: 16 (R4)
0x0290	0x0030013D  JMP	L_end_MM_GetMemAlign
L___Lib_MemManager_MM_GetMemAlign39:
;__Lib_MemManager.c, 151 :: 		if (MM_NrFreeBlocksUsed == (NR_FREE_BLOCKS - 1))
; alignment start address is: 20 (R5)
; Size start address is: 0 (R0)
; P start address is: 16 (R4)
0x0294	0xC020EBF4  LDA.B	R2, _MM_NrFreeBlocksUsed+0
0x0298	0x59E14132  CMP.B	R2, #19
0x029C	0x002000AA  JMPC	R30, Z, #0, L___Lib_MemManager_MM_GetMemAlign40
; Size end address is: 0 (R0)
; alignment end address is: 20 (R5)
;__Lib_MemManager.c, 152 :: 		return P;
0x02A0	0x44024000  MOVE.L	R0, R4
; P end address is: 16 (R4)
0x02A4	0x0030013D  JMP	L_end_MM_GetMemAlign
L___Lib_MemManager_MM_GetMemAlign40:
;__Lib_MemManager.c, 154 :: 		j = -1;
; alignment start address is: 20 (R5)
; j start address is: 8 (R2)
; Size start address is: 0 (R0)
; P start address is: 16 (R4)
0x02A8	0x642FFFFF  LDK.L	R2, #-1
;__Lib_MemManager.c, 155 :: 		for (i=0; i<NR_FREE_BLOCKS; i++) {
; i start address is: 4 (R1)
0x02AC	0x64100000  LDK.L	R1, #0
; P end address is: 16 (R4)
; Size end address is: 0 (R0)
; j end address is: 8 (R2)
; i end address is: 4 (R1)
; alignment end address is: 20 (R5)
0x02B0	0x44624000  MOVE.L	R6, R4
0x02B4	0x44404000  MOVE.L	R4, R0
0x02B8	0x4400D00D  BEXTU.L	R0, R1, #256
0x02BC	0x4411500C  BEXTS.L	R1, R2, #256
L___Lib_MemManager_MM_GetMemAlign41:
; i start address is: 0 (R0)
; j start address is: 4 (R1)
; Size start address is: 16 (R4)
; alignment start address is: 20 (R5)
; P start address is: 24 (R6)
0x02C0	0x5BE04142  CMP.S	R0, #20
0x02C4	0x0128013C  JMPC	R30, GTE, #1, L___Lib_MemManager_MM_GetMemAlign42
;__Lib_MemManager.c, 156 :: 		if (MM_FreeMemTable[i].Pointer > 0) {
0x02C8	0x4420500D  BEXTU.L	R2, R0, #256
0x02CC	0x44314038  ASHL.L	R3, R2, #3
0x02D0	0x6420EB54  LDK.L	R2, #_MM_FreeMemTable+0
0x02D4	0x44210030  ADD.L	R2, R2, R3
0x02D8	0xAC210000  LDI.L	R2, R2, #0
0x02DC	0x5DE14002  CMP.L	R2, #0
0x02E0	0x01A00135  JMPC	R30, A, #0, L___Lib_MemManager_MM_GetMemAlign44
;__Lib_MemManager.c, 157 :: 		addr = MM_FreeMemTable[i].Pointer;
0x02E4	0x4420500D  BEXTU.L	R2, R0, #256
0x02E8	0x44314038  ASHL.L	R3, R2, #3
0x02EC	0x6420EB54  LDK.L	R2, #_MM_FreeMemTable+0
0x02F0	0x44210030  ADD.L	R2, R2, R3
0x02F4	0xAC210000  LDI.L	R2, R2, #0
0x02F8	0xB5F10000  STI.L	SP, #0, R2
;__Lib_MemManager.c, 159 :: 		lsize = Size;
0x02FC	0xB5F20004  STI.L	SP, #4, R4
;__Lib_MemManager.c, 160 :: 		if (alignment > 1)
0x0300	0x59E2C012  CMP.B	R5, #1
0x0304	0x01A000CE  JMPC	R30, A, #0, L___Lib_MemManager_MM_GetMemAlign101
; j end address is: 4 (R1)
; P end address is: 24 (R6)
; alignment end address is: 20 (R5)
; Size end address is: 16 (R4)
; i end address is: 0 (R0)
;__Lib_MemManager.c, 161 :: 		while (addr % alignment)
L___Lib_MemManager_MM_GetMemAlign46:
; P start address is: 24 (R6)
; alignment start address is: 20 (R5)
; Size start address is: 16 (R4)
; j start address is: 4 (R1)
; i start address is: 0 (R0)
0x0308	0xAC2F8000  LDI.L	R2, SP, #0
0x030C	0xF4210051  UMOD.L	R2, R2, R5
0x0310	0x5DE14002  CMP.L	R2, #0
0x0314	0x002800CD  JMPC	R30, Z, #1, L___Lib_MemManager_MM_GetMemAlign47
;__Lib_MemManager.c, 162 :: 		addr++, lsize++;
0x0318	0xAC2F8000  LDI.L	R2, SP, #0
0x031C	0x44214010  ADD.L	R2, R2, #1
0x0320	0xB5F10000  STI.L	SP, #0, R2
0x0324	0xAC2F8004  LDI.L	R2, SP, #4
0x0328	0x44214010  ADD.L	R2, R2, #1
0x032C	0xB5F10004  STI.L	SP, #4, R2
0x0330	0x003000C2  JMP	L___Lib_MemManager_MM_GetMemAlign46
L___Lib_MemManager_MM_GetMemAlign47:
; P end address is: 24 (R6)
; alignment end address is: 20 (R5)
; Size end address is: 16 (R4)
; i end address is: 0 (R0)
0x0334	0x003000CE  JMP	L___Lib_MemManager_MM_GetMemAlign45
; j end address is: 4 (R1)
L___Lib_MemManager_MM_GetMemAlign101:
;__Lib_MemManager.c, 160 :: 		if (alignment > 1)
;__Lib_MemManager.c, 162 :: 		addr++, lsize++;
L___Lib_MemManager_MM_GetMemAlign45:
;__Lib_MemManager.c, 164 :: 		if (MM_FreeMemTable[i].Size >= lsize) { // there is some free memory
; P start address is: 24 (R6)
; alignment start address is: 20 (R5)
; Size start address is: 16 (R4)
; j start address is: 4 (R1)
; i start address is: 0 (R0)
0x0338	0x4420500D  BEXTU.L	R2, R0, #256
0x033C	0x44314038  ASHL.L	R3, R2, #3
0x0340	0x6420EB54  LDK.L	R2, #_MM_FreeMemTable+0
0x0344	0x44210030  ADD.L	R2, R2, R3
0x0348	0x44214040  ADD.L	R2, R2, #4
0x034C	0xAC310000  LDI.L	R3, R2, #0
0x0350	0xAC2F8004  LDI.L	R2, SP, #4
0x0354	0x5DE18022  CMP.L	R3, R2
0x0358	0x00680134  JMPC	R30, C, #1, L___Lib_MemManager_MM_GetMemAlign48
; P end address is: 24 (R6)
; alignment end address is: 20 (R5)
;__Lib_MemManager.c, 166 :: 		if (j == -1)
0x035C	0x59E0FFF2  CMP.B	R1, #-1
0x0360	0x002000EA  JMPC	R30, Z, #0, L___Lib_MemManager_MM_GetMemAlign102
; j end address is: 4 (R1)
;__Lib_MemManager.c, 167 :: 		for (j=i+1; j<NR_FREE_BLOCKS; j++)
0x0364	0x44204010  ADD.L	R2, R0, #1
; j start address is: 4 (R1)
0x0368	0x4411500C  BEXTS.L	R1, R2, #256
; j end address is: 4 (R1)
; Size end address is: 16 (R4)
; i end address is: 0 (R0)
0x036C	0x44524000  MOVE.L	R5, R4
L___Lib_MemManager_MM_GetMemAlign50:
; j start address is: 4 (R1)
; i start address is: 0 (R0)
; Size start address is: 20 (R5)
0x0370	0x5BE0C142  CMP.S	R1, #20
0x0374	0x012800E9  JMPC	R30, GTE, #1, L___Lib_MemManager_MM_GetMemAlign51
;__Lib_MemManager.c, 168 :: 		if (MM_FreeMemTable[j].Pointer == 0)
0x0378	0x4420D00C  BEXTS.L	R2, R1, #256
0x037C	0x44314038  ASHL.L	R3, R2, #3
0x0380	0x6420EB54  LDK.L	R2, #_MM_FreeMemTable+0
0x0384	0x44210030  ADD.L	R2, R2, R3
0x0388	0xAC210000  LDI.L	R2, R2, #0
0x038C	0x5DE14002  CMP.L	R2, #0
0x0390	0x002000E6  JMPC	R30, Z, #0, L___Lib_MemManager_MM_GetMemAlign53
;__Lib_MemManager.c, 169 :: 		break;
0x0394	0x003000E9  JMP	L___Lib_MemManager_MM_GetMemAlign51
L___Lib_MemManager_MM_GetMemAlign53:
;__Lib_MemManager.c, 167 :: 		for (j=i+1; j<NR_FREE_BLOCKS; j++)
0x0398	0x4410C010  ADD.L	R1, R1, #1
0x039C	0x4410D00C  BEXTS.L	R1, R1, #256
;__Lib_MemManager.c, 169 :: 		break;
0x03A0	0x003000DC  JMP	L___Lib_MemManager_MM_GetMemAlign50
L___Lib_MemManager_MM_GetMemAlign51:
; j end address is: 4 (R1)
; i end address is: 0 (R0)
0x03A4	0x003000EB  JMP	L___Lib_MemManager_MM_GetMemAlign49
; Size end address is: 20 (R5)
L___Lib_MemManager_MM_GetMemAlign102:
;__Lib_MemManager.c, 166 :: 		if (j == -1)
0x03A8	0x44524000  MOVE.L	R5, R4
;__Lib_MemManager.c, 169 :: 		break;
L___Lib_MemManager_MM_GetMemAlign49:
;__Lib_MemManager.c, 172 :: 		MM_FreeMemTable[j].Pointer = MM_FreeMemTable[i].Pointer;
; i start address is: 0 (R0)
; j start address is: 4 (R1)
; Size start address is: 20 (R5)
0x03AC	0x4420D00C  BEXTS.L	R2, R1, #256
0x03B0	0x44214038  ASHL.L	R2, R2, #3
0x03B4	0x6440EB54  LDK.L	R4, #_MM_FreeMemTable+0
0x03B8	0x44320020  ADD.L	R3, R4, R2
0x03BC	0x4420500D  BEXTU.L	R2, R0, #256
0x03C0	0x44214038  ASHL.L	R2, R2, #3
0x03C4	0x44220020  ADD.L	R2, R4, R2
0x03C8	0xAC210000  LDI.L	R2, R2, #0
0x03CC	0xB4310000  STI.L	R3, #0, R2
;__Lib_MemManager.c, 173 :: 		MM_FreeMemTable[j].Size    = lsize - Size;
0x03D0	0x4420D00C  BEXTS.L	R2, R1, #256
; j end address is: 4 (R1)
0x03D4	0x44314038  ASHL.L	R3, R2, #3
0x03D8	0x6420EB54  LDK.L	R2, #_MM_FreeMemTable+0
0x03DC	0x44210030  ADD.L	R2, R2, R3
0x03E0	0x44314040  ADD.L	R3, R2, #4
0x03E4	0xAC2F8004  LDI.L	R2, SP, #4
0x03E8	0x44210052  SUB.L	R2, R2, R5
; Size end address is: 20 (R5)
0x03EC	0xB4310000  STI.L	R3, #0, R2
;__Lib_MemManager.c, 174 :: 		MM_NrFreeBlocksUsed++;
0x03F0	0xC020EBF4  LDA.B	R2, _MM_NrFreeBlocksUsed+0
0x03F4	0x44214010  ADD.L	R2, R2, #1
0x03F8	0xB820EBF4  STA.B	_MM_NrFreeBlocksUsed+0, R2
;__Lib_MemManager.c, 176 :: 		P = addr; // pointer to memory block that will be given
; P start address is: 4 (R1)
0x03FC	0xAC1F8000  LDI.L	R1, SP, #0
;__Lib_MemManager.c, 178 :: 		if (MM_FreeMemTable[i].Size > lsize) {
0x0400	0x4420500D  BEXTU.L	R2, R0, #256
0x0404	0x44314038  ASHL.L	R3, R2, #3
0x0408	0x6420EB54  LDK.L	R2, #_MM_FreeMemTable+0
0x040C	0x44210030  ADD.L	R2, R2, R3
0x0410	0x44214040  ADD.L	R2, R2, #4
0x0414	0xAC310000  LDI.L	R3, R2, #0
0x0418	0xAC2F8004  LDI.L	R2, SP, #4
0x041C	0x5DE18022  CMP.L	R3, R2
0x0420	0x01A00122  JMPC	R30, A, #0, L___Lib_MemManager_MM_GetMemAlign54
;__Lib_MemManager.c, 179 :: 		MM_FreeMemTable[i].Pointer = MM_FreeMemTable[i].Pointer + lsize;
0x0424	0x4420500D  BEXTU.L	R2, R0, #256
0x0428	0x44214038  ASHL.L	R2, R2, #3
0x042C	0x6430EB54  LDK.L	R3, #_MM_FreeMemTable+0
0x0430	0x44418020  ADD.L	R4, R3, R2
0x0434	0x4420500D  BEXTU.L	R2, R0, #256
0x0438	0x44214038  ASHL.L	R2, R2, #3
0x043C	0x44218020  ADD.L	R2, R3, R2
0x0440	0xAC310000  LDI.L	R3, R2, #0
0x0444	0xAC2F8004  LDI.L	R2, SP, #4
0x0448	0x44218020  ADD.L	R2, R3, R2
0x044C	0xB4410000  STI.L	R4, #0, R2
;__Lib_MemManager.c, 180 :: 		MM_FreeMemTable[i].Size    = MM_FreeMemTable[i].Size    - lsize;
0x0450	0x4420500D  BEXTU.L	R2, R0, #256
0x0454	0x44214038  ASHL.L	R2, R2, #3
0x0458	0x6430EB54  LDK.L	R3, #_MM_FreeMemTable+0
0x045C	0x44218020  ADD.L	R2, R3, R2
0x0460	0x44414040  ADD.L	R4, R2, #4
0x0464	0x4420500D  BEXTU.L	R2, R0, #256
; i end address is: 0 (R0)
0x0468	0x44214038  ASHL.L	R2, R2, #3
0x046C	0x44218020  ADD.L	R2, R3, R2
0x0470	0x44214040  ADD.L	R2, R2, #4
0x0474	0xAC310000  LDI.L	R3, R2, #0
0x0478	0xAC2F8004  LDI.L	R2, SP, #4
0x047C	0x44218022  SUB.L	R2, R3, R2
0x0480	0xB4410000  STI.L	R4, #0, R2
;__Lib_MemManager.c, 181 :: 		}
0x0484	0x00300132  JMP	L___Lib_MemManager_MM_GetMemAlign55
L___Lib_MemManager_MM_GetMemAlign54:
;__Lib_MemManager.c, 183 :: 		MM_FreeMemTable[i].Pointer = NULL;
; i start address is: 0 (R0)
0x0488	0x4420500D  BEXTU.L	R2, R0, #256
0x048C	0x44314038  ASHL.L	R3, R2, #3
0x0490	0x6420EB54  LDK.L	R2, #_MM_FreeMemTable+0
0x0494	0x44310030  ADD.L	R3, R2, R3
0x0498	0x64200000  LDK.L	R2, #0
0x049C	0xB4310000  STI.L	R3, #0, R2
;__Lib_MemManager.c, 184 :: 		MM_FreeMemTable[i].Size    = 0;
0x04A0	0x4420500D  BEXTU.L	R2, R0, #256
; i end address is: 0 (R0)
0x04A4	0x44314038  ASHL.L	R3, R2, #3
0x04A8	0x6420EB54  LDK.L	R2, #_MM_FreeMemTable+0
0x04AC	0x44210030  ADD.L	R2, R2, R3
0x04B0	0x44314040  ADD.L	R3, R2, #4
0x04B4	0x64200000  LDK.L	R2, #0
0x04B8	0xB4310000  STI.L	R3, #0, R2
;__Lib_MemManager.c, 185 :: 		MM_NrFreeBlocksUsed--;
0x04BC	0xC020EBF4  LDA.B	R2, _MM_NrFreeBlocksUsed+0
0x04C0	0x44214012  SUB.L	R2, R2, #1
0x04C4	0xB820EBF4  STA.B	_MM_NrFreeBlocksUsed+0, R2
;__Lib_MemManager.c, 186 :: 		}
L___Lib_MemManager_MM_GetMemAlign55:
;__Lib_MemManager.c, 188 :: 		return P;
0x04C8	0x4400C000  MOVE.L	R0, R1
; P end address is: 4 (R1)
0x04CC	0x0030013D  JMP	L_end_MM_GetMemAlign
;__Lib_MemManager.c, 189 :: 		};
L___Lib_MemManager_MM_GetMemAlign48:
;__Lib_MemManager.c, 190 :: 		}
; i start address is: 0 (R0)
; Size start address is: 16 (R4)
; alignment start address is: 20 (R5)
; P start address is: 24 (R6)
; j start address is: 4 (R1)
0x04D0	0x00300139  JMP	L___Lib_MemManager_MM_GetMemAlign56
L___Lib_MemManager_MM_GetMemAlign44:
;__Lib_MemManager.c, 192 :: 		if (j == -1)
0x04D4	0x59E0FFF2  CMP.B	R1, #-1
0x04D8	0x00200139  JMPC	R30, Z, #0, L___Lib_MemManager_MM_GetMemAlign103
;__Lib_MemManager.c, 193 :: 		j = i; // mark first empty slot
0x04DC	0x4410500C  BEXTS.L	R1, R0, #256
; j end address is: 4 (R1)
0x04E0	0x00300139  JMP	L___Lib_MemManager_MM_GetMemAlign57
L___Lib_MemManager_MM_GetMemAlign103:
;__Lib_MemManager.c, 192 :: 		if (j == -1)
;__Lib_MemManager.c, 193 :: 		j = i; // mark first empty slot
L___Lib_MemManager_MM_GetMemAlign57:
;__Lib_MemManager.c, 194 :: 		}
; j start address is: 4 (R1)
; j end address is: 4 (R1)
; P end address is: 24 (R6)
; alignment end address is: 20 (R5)
; Size end address is: 16 (R4)
; i end address is: 0 (R0)
L___Lib_MemManager_MM_GetMemAlign56:
;__Lib_MemManager.c, 155 :: 		for (i=0; i<NR_FREE_BLOCKS; i++) {
; j start address is: 4 (R1)
; P start address is: 24 (R6)
; alignment start address is: 20 (R5)
; Size start address is: 16 (R4)
; i start address is: 0 (R0)
0x04E4	0x44204010  ADD.L	R2, R0, #1
0x04E8	0x4401500D  BEXTU.L	R0, R2, #256
;__Lib_MemManager.c, 195 :: 		}
; j end address is: 4 (R1)
; alignment end address is: 20 (R5)
; Size end address is: 16 (R4)
; i end address is: 0 (R0)
0x04EC	0x003000B0  JMP	L___Lib_MemManager_MM_GetMemAlign41
L___Lib_MemManager_MM_GetMemAlign42:
;__Lib_MemManager.c, 197 :: 		return P;
0x04F0	0x44034000  MOVE.L	R0, R6
; P end address is: 24 (R6)
;__Lib_MemManager.c, 198 :: 		}
L_end_MM_GetMemAlign:
0x04F4	0x99D00000  UNLINK	LR
0x04F8	0xA0000000  RETURN	
; end of __Lib_MemManager_MM_GetMemAlign
__Lib_MemManager_MM_Defragment:
;__Lib_MemManager.c, 69 :: 		static void MM_Defragment() {
0x04FC	0x95D00004  LINK	LR, #4
;__Lib_MemManager.c, 73 :: 		do {
L___Lib_MemManager_MM_Defragment9:
;__Lib_MemManager.c, 74 :: 		MergeHappened = 0;
0x0500	0x64000000  LDK.L	R0, #0
0x0504	0xB1F00000  STI.B	SP, #0, R0
;__Lib_MemManager.c, 75 :: 		i = 0;
0x0508	0xB1F00001  STI.B	SP, #1, R0
;__Lib_MemManager.c, 76 :: 		while ((i < NR_FREE_BLOCKS-1) && (!MergeHappened)) {
L___Lib_MemManager_MM_Defragment12:
0x050C	0xA80F8001  LDI.B	R0, SP, #1
0x0510	0x59E04132  CMP.B	R0, #19
0x0514	0x006001A9  JMPC	R30, C, #0, L___Lib_MemManager_MM_Defragment95
0x0518	0xA80F8000  LDI.B	R0, SP, #0
0x051C	0x59E04002  CMP.B	R0, #0
0x0520	0x002001A9  JMPC	R30, Z, #0, L___Lib_MemManager_MM_Defragment94
L___Lib_MemManager_MM_Defragment91:
;__Lib_MemManager.c, 77 :: 		j = i + 1;
0x0524	0xA80F8001  LDI.B	R0, SP, #1
0x0528	0x44004010  ADD.L	R0, R0, #1
; j start address is: 20 (R5)
0x052C	0x4450500D  BEXTU.L	R5, R0, #256
; j end address is: 20 (R5)
;__Lib_MemManager.c, 78 :: 		while ((j < NR_FREE_BLOCKS) && (!MergeHappened)) {
L___Lib_MemManager_MM_Defragment16:
; j start address is: 20 (R5)
0x0530	0x5BE2C142  CMP.S	R5, #20
0x0534	0x012801A5  JMPC	R30, GTE, #1, L___Lib_MemManager_MM_Defragment93
0x0538	0xA80F8000  LDI.B	R0, SP, #0
0x053C	0x59E04002  CMP.B	R0, #0
0x0540	0x002001A5  JMPC	R30, Z, #0, L___Lib_MemManager_MM_Defragment92
L___Lib_MemManager_MM_Defragment90:
;__Lib_MemManager.c, 79 :: 		Tmp = MM_CheckBlocks(MM_FreeMemTable[i].Pointer, MM_FreeMemTable[i].Size, MM_FreeMemTable[j].Pointer, MM_FreeMemTable[j].Size);
0x0544	0x4402D00D  BEXTU.L	R0, R5, #256
0x0548	0x44004038  ASHL.L	R0, R0, #3
0x054C	0x6420EB54  LDK.L	R2, #_MM_FreeMemTable+0
0x0550	0x44110000  ADD.L	R1, R2, R0
0x0554	0x4400C040  ADD.L	R0, R1, #4
0x0558	0xAC000000  LDI.L	R0, R0, #0
0x055C	0x44404000  MOVE.L	R4, R0
0x0560	0xAC008000  LDI.L	R0, R1, #0
0x0564	0x44304000  MOVE.L	R3, R0
0x0568	0xA80F8001  LDI.B	R0, SP, #1
0x056C	0x44004038  ASHL.L	R0, R0, #3
0x0570	0x44210000  ADD.L	R2, R2, R0
0x0574	0x44014040  ADD.L	R0, R2, #4
0x0578	0xAC000000  LDI.L	R0, R0, #0
0x057C	0x44104000  MOVE.L	R1, R0
0x0580	0xAC010000  LDI.L	R0, R2, #0
0x0584	0x4421C000  MOVE.L	R2, R3
0x0588	0x44324000  MOVE.L	R3, R4
0x058C	0x00340024  CALL	__Lib_MemManager_MM_CheckBlocks+0
; Tmp start address is: 4 (R1)
0x0590	0x4410500D  BEXTU.L	R1, R0, #256
;__Lib_MemManager.c, 80 :: 		if (Tmp == 1) { // block MM_FreeMemTable[I].Pointer is adjacent beneath block MM_FreeMemTable[J].Pointer
0x0594	0x59E04012  CMP.B	R0, #1
0x0598	0x00200184  JMPC	R30, Z, #0, L___Lib_MemManager_MM_Defragment20
; Tmp end address is: 4 (R1)
;__Lib_MemManager.c, 81 :: 		MM_FreeMemTable[i].Size    = MM_FreeMemTable[i].Size + MM_FreeMemTable[j].Size;
0x059C	0xA80F8001  LDI.B	R0, SP, #1
0x05A0	0x44004038  ASHL.L	R0, R0, #3
0x05A4	0x6430EB54  LDK.L	R3, #_MM_FreeMemTable+0
0x05A8	0x44018000  ADD.L	R0, R3, R0
0x05AC	0x44204040  ADD.L	R2, R0, #4
0x05B0	0xAC110000  LDI.L	R1, R2, #0
0x05B4	0x4402D00D  BEXTU.L	R0, R5, #256
0x05B8	0x44004038  ASHL.L	R0, R0, #3
0x05BC	0x44018000  ADD.L	R0, R3, R0
0x05C0	0x44004040  ADD.L	R0, R0, #4
0x05C4	0xAC000000  LDI.L	R0, R0, #0
0x05C8	0x44008000  ADD.L	R0, R1, R0
0x05CC	0xB4200000  STI.L	R2, #0, R0
;__Lib_MemManager.c, 82 :: 		MM_FreeMemTable[j].Pointer = NULL;
0x05D0	0x4402D00D  BEXTU.L	R0, R5, #256
0x05D4	0x44104038  ASHL.L	R1, R0, #3
0x05D8	0x6400EB54  LDK.L	R0, #_MM_FreeMemTable+0
0x05DC	0x44100010  ADD.L	R1, R0, R1
0x05E0	0x64000000  LDK.L	R0, #0
0x05E4	0xB4100000  STI.L	R1, #0, R0
;__Lib_MemManager.c, 83 :: 		MM_FreeMemTable[j].Size    = 0;
0x05E8	0x4402D00D  BEXTU.L	R0, R5, #256
0x05EC	0x44104038  ASHL.L	R1, R0, #3
0x05F0	0x6400EB54  LDK.L	R0, #_MM_FreeMemTable+0
0x05F4	0x44000010  ADD.L	R0, R0, R1
0x05F8	0x44104040  ADD.L	R1, R0, #4
0x05FC	0x64000000  LDK.L	R0, #0
0x0600	0xB4100000  STI.L	R1, #0, R0
;__Lib_MemManager.c, 84 :: 		MergeHappened = 1;
0x0604	0x64000001  LDK.L	R0, #1
0x0608	0xB1F00000  STI.B	SP, #0, R0
;__Lib_MemManager.c, 85 :: 		}
0x060C	0x003001A2  JMP	L___Lib_MemManager_MM_Defragment21
L___Lib_MemManager_MM_Defragment20:
;__Lib_MemManager.c, 86 :: 		else if (Tmp == 2) { // block MM_FreeMemTable[I].Pointer is adjacent above block MM_FreeMemTable[J].Pointer
; Tmp start address is: 4 (R1)
0x0610	0x59E0C022  CMP.B	R1, #2
0x0614	0x002001A2  JMPC	R30, Z, #0, L___Lib_MemManager_MM_Defragment22
; Tmp end address is: 4 (R1)
;__Lib_MemManager.c, 87 :: 		MM_FreeMemTable[j].Size    = MM_FreeMemTable[j].Size + MM_FreeMemTable[i].Size;
0x0618	0x4402D00D  BEXTU.L	R0, R5, #256
0x061C	0x44004038  ASHL.L	R0, R0, #3
0x0620	0x6430EB54  LDK.L	R3, #_MM_FreeMemTable+0
0x0624	0x44018000  ADD.L	R0, R3, R0
0x0628	0x44204040  ADD.L	R2, R0, #4
0x062C	0xAC110000  LDI.L	R1, R2, #0
0x0630	0xA80F8001  LDI.B	R0, SP, #1
0x0634	0x44004038  ASHL.L	R0, R0, #3
0x0638	0x44018000  ADD.L	R0, R3, R0
0x063C	0x44004040  ADD.L	R0, R0, #4
0x0640	0xAC000000  LDI.L	R0, R0, #0
0x0644	0x44008000  ADD.L	R0, R1, R0
0x0648	0xB4200000  STI.L	R2, #0, R0
;__Lib_MemManager.c, 88 :: 		MM_FreeMemTable[i].Pointer = NULL;
0x064C	0xA80F8001  LDI.B	R0, SP, #1
0x0650	0x44104038  ASHL.L	R1, R0, #3
0x0654	0x6400EB54  LDK.L	R0, #_MM_FreeMemTable+0
0x0658	0x44100010  ADD.L	R1, R0, R1
0x065C	0x64000000  LDK.L	R0, #0
0x0660	0xB4100000  STI.L	R1, #0, R0
;__Lib_MemManager.c, 89 :: 		MM_FreeMemTable[i].Size    = 0;
0x0664	0xA80F8001  LDI.B	R0, SP, #1
0x0668	0x44104038  ASHL.L	R1, R0, #3
0x066C	0x6400EB54  LDK.L	R0, #_MM_FreeMemTable+0
0x0670	0x44000010  ADD.L	R0, R0, R1
0x0674	0x44104040  ADD.L	R1, R0, #4
0x0678	0x64000000  LDK.L	R0, #0
0x067C	0xB4100000  STI.L	R1, #0, R0
;__Lib_MemManager.c, 90 :: 		MergeHappened = 1;
0x0680	0x64000001  LDK.L	R0, #1
0x0684	0xB1F00000  STI.B	SP, #0, R0
;__Lib_MemManager.c, 91 :: 		}
L___Lib_MemManager_MM_Defragment22:
L___Lib_MemManager_MM_Defragment21:
;__Lib_MemManager.c, 92 :: 		j++;
0x0688	0x4452C010  ADD.L	R5, R5, #1
0x068C	0x4452D00D  BEXTU.L	R5, R5, #256
;__Lib_MemManager.c, 93 :: 		}
; j end address is: 20 (R5)
0x0690	0x0030014C  JMP	L___Lib_MemManager_MM_Defragment16
;__Lib_MemManager.c, 78 :: 		while ((j < NR_FREE_BLOCKS) && (!MergeHappened)) {
L___Lib_MemManager_MM_Defragment93:
L___Lib_MemManager_MM_Defragment92:
;__Lib_MemManager.c, 94 :: 		i++;
0x0694	0xA80F8001  LDI.B	R0, SP, #1
0x0698	0x44004010  ADD.L	R0, R0, #1
0x069C	0xB1F00001  STI.B	SP, #1, R0
;__Lib_MemManager.c, 95 :: 		}
0x06A0	0x00300143  JMP	L___Lib_MemManager_MM_Defragment12
;__Lib_MemManager.c, 76 :: 		while ((i < NR_FREE_BLOCKS-1) && (!MergeHappened)) {
L___Lib_MemManager_MM_Defragment95:
L___Lib_MemManager_MM_Defragment94:
;__Lib_MemManager.c, 96 :: 		} while (MergeHappened == 1);
0x06A4	0xA80F8000  LDI.B	R0, SP, #0
0x06A8	0x59E04012  CMP.B	R0, #1
0x06AC	0x00280140  JMPC	R30, Z, #1, L___Lib_MemManager_MM_Defragment9
;__Lib_MemManager.c, 99 :: 		MM_NrFreeBlocksUsed = 0;
0x06B0	0x64000000  LDK.L	R0, #0
0x06B4	0xB800EBF4  STA.B	_MM_NrFreeBlocksUsed+0, R0
;__Lib_MemManager.c, 100 :: 		for(i=0; i < NR_FREE_BLOCKS; i++)
0x06B8	0xB1F00001  STI.B	SP, #1, R0
L___Lib_MemManager_MM_Defragment23:
0x06BC	0xA80F8001  LDI.B	R0, SP, #1
0x06C0	0x5BE04142  CMP.S	R0, #20
0x06C4	0x012801C0  JMPC	R30, GTE, #1, L___Lib_MemManager_MM_Defragment24
;__Lib_MemManager.c, 101 :: 		if (MM_FreeMemTable[i].Pointer > 0)
0x06C8	0xA80F8001  LDI.B	R0, SP, #1
0x06CC	0x44104038  ASHL.L	R1, R0, #3
0x06D0	0x6400EB54  LDK.L	R0, #_MM_FreeMemTable+0
0x06D4	0x44000010  ADD.L	R0, R0, R1
0x06D8	0xAC000000  LDI.L	R0, R0, #0
0x06DC	0x5DE04002  CMP.L	R0, #0
0x06E0	0x01A001BC  JMPC	R30, A, #0, L___Lib_MemManager_MM_Defragment26
;__Lib_MemManager.c, 102 :: 		MM_NrFreeBlocksUsed++;
0x06E4	0xC000EBF4  LDA.B	R0, _MM_NrFreeBlocksUsed+0
0x06E8	0x44004010  ADD.L	R0, R0, #1
0x06EC	0xB800EBF4  STA.B	_MM_NrFreeBlocksUsed+0, R0
L___Lib_MemManager_MM_Defragment26:
;__Lib_MemManager.c, 100 :: 		for(i=0; i < NR_FREE_BLOCKS; i++)
0x06F0	0xA80F8001  LDI.B	R0, SP, #1
0x06F4	0x44004010  ADD.L	R0, R0, #1
0x06F8	0xB1F00001  STI.B	SP, #1, R0
;__Lib_MemManager.c, 102 :: 		MM_NrFreeBlocksUsed++;
0x06FC	0x003001AF  JMP	L___Lib_MemManager_MM_Defragment23
L___Lib_MemManager_MM_Defragment24:
;__Lib_MemManager.c, 104 :: 		MM_PossiblyFragmented = 0;
0x0700	0x64000000  LDK.L	R0, #0
0x0704	0xB800EBF5  STA.B	_MM_PossiblyFragmented+0, R0
;__Lib_MemManager.c, 105 :: 		}
L_end_MM_Defragment:
0x0708	0x99D00000  UNLINK	LR
0x070C	0xA0000000  RETURN	
; end of __Lib_MemManager_MM_Defragment
__Lib_MemManager_MM_CheckBlocks:
;__Lib_MemManager.c, 53 :: 		static char MM_CheckBlocks(char *P1, unsigned long S1, char * P2, unsigned long S2) {
; S2 start address is: 12 (R3)
; P2 start address is: 8 (R2)
; S1 start address is: 4 (R1)
; P1 start address is: 0 (R0)
; S2 end address is: 12 (R3)
; P2 end address is: 8 (R2)
; S1 end address is: 4 (R1)
; P1 end address is: 0 (R0)
; P1 start address is: 0 (R0)
; S1 start address is: 4 (R1)
; P2 start address is: 8 (R2)
; S2 start address is: 12 (R3)
;__Lib_MemManager.c, 56 :: 		if (P1 == 0)
0x0090	0x5DE04002  CMP.L	R0, #0
0x0094	0x00200028  JMPC	R30, Z, #0, L___Lib_MemManager_MM_CheckBlocks3
; P1 end address is: 0 (R0)
; S1 end address is: 4 (R1)
; P2 end address is: 8 (R2)
; S2 end address is: 12 (R3)
;__Lib_MemManager.c, 57 :: 		return 0;
0x0098	0x64000000  LDK.L	R0, #0
0x009C	0x0030003A  JMP	L_end_MM_CheckBlocks
L___Lib_MemManager_MM_CheckBlocks3:
;__Lib_MemManager.c, 58 :: 		if (P2 == 0)
; S2 start address is: 12 (R3)
; P2 start address is: 8 (R2)
; S1 start address is: 4 (R1)
; P1 start address is: 0 (R0)
0x00A0	0x5DE14002  CMP.L	R2, #0
0x00A4	0x0020002C  JMPC	R30, Z, #0, L___Lib_MemManager_MM_CheckBlocks4
; P1 end address is: 0 (R0)
; S1 end address is: 4 (R1)
; P2 end address is: 8 (R2)
; S2 end address is: 12 (R3)
;__Lib_MemManager.c, 59 :: 		return 0;
0x00A8	0x64000000  LDK.L	R0, #0
0x00AC	0x0030003A  JMP	L_end_MM_CheckBlocks
L___Lib_MemManager_MM_CheckBlocks4:
;__Lib_MemManager.c, 60 :: 		if (P1 == P2)
; S2 start address is: 12 (R3)
; P2 start address is: 8 (R2)
; S1 start address is: 4 (R1)
; P1 start address is: 0 (R0)
0x00B0	0x5DE00022  CMP.L	R0, R2
0x00B4	0x00200030  JMPC	R30, Z, #0, L___Lib_MemManager_MM_CheckBlocks5
; P1 end address is: 0 (R0)
; S1 end address is: 4 (R1)
; P2 end address is: 8 (R2)
; S2 end address is: 12 (R3)
;__Lib_MemManager.c, 61 :: 		return 0;
0x00B8	0x64000000  LDK.L	R0, #0
0x00BC	0x0030003A  JMP	L_end_MM_CheckBlocks
L___Lib_MemManager_MM_CheckBlocks5:
;__Lib_MemManager.c, 63 :: 		if (P1 + S1 == P2)
; S2 start address is: 12 (R3)
; P2 start address is: 8 (R2)
; S1 start address is: 4 (R1)
; P1 start address is: 0 (R0)
0x00C0	0x44400010  ADD.L	R4, R0, R1
; S1 end address is: 4 (R1)
0x00C4	0x5DE20022  CMP.L	R4, R2
0x00C8	0x00200035  JMPC	R30, Z, #0, L___Lib_MemManager_MM_CheckBlocks6
; P1 end address is: 0 (R0)
; P2 end address is: 8 (R2)
; S2 end address is: 12 (R3)
;__Lib_MemManager.c, 64 :: 		return  1;  // block P1 is adjacent beneath block P2
0x00CC	0x64000001  LDK.L	R0, #1
0x00D0	0x0030003A  JMP	L_end_MM_CheckBlocks
L___Lib_MemManager_MM_CheckBlocks6:
;__Lib_MemManager.c, 65 :: 		else if (P2 + S2 == P1)
; S2 start address is: 12 (R3)
; P2 start address is: 8 (R2)
; P1 start address is: 0 (R0)
0x00D4	0x44410030  ADD.L	R4, R2, R3
; P2 end address is: 8 (R2)
; S2 end address is: 12 (R3)
0x00D8	0x5DE20002  CMP.L	R4, R0
0x00DC	0x0020003A  JMPC	R30, Z, #0, L___Lib_MemManager_MM_CheckBlocks8
; P1 end address is: 0 (R0)
;__Lib_MemManager.c, 66 :: 		return  2; // block P2 is adjacent beneath block P1
0x00E0	0x64000002  LDK.L	R0, #2
0x00E4	0x0030003A  JMP	L_end_MM_CheckBlocks
L___Lib_MemManager_MM_CheckBlocks8:
;__Lib_MemManager.c, 67 :: 		}
L_end_MM_CheckBlocks:
0x00E8	0xA0000000  RETURN	
; end of __Lib_MemManager_MM_CheckBlocks
_memset:
;__Lib_CString.c, 84 :: 		
; n start address is: 8 (R2)
; character start address is: 4 (R1)
; p1 start address is: 0 (R0)
0x0710	0x4431400C  BEXTS.L	R3, R2, #0
0x0714	0x44204000  MOVE.L	R2, R0
0x0718	0x4400D00D  BEXTU.L	R0, R1, #256
; n end address is: 8 (R2)
; character end address is: 4 (R1)
; p1 end address is: 0 (R0)
; p1 start address is: 8 (R2)
; character start address is: 0 (R0)
; n start address is: 12 (R3)
;__Lib_CString.c, 87 :: 		
; pp start address is: 4 (R1)
0x071C	0x44114000  MOVE.L	R1, R2
; n end address is: 12 (R3)
; p1 end address is: 8 (R2)
; pp end address is: 4 (R1)
0x0720	0x4451C00C  BEXTS.L	R5, R3, #0
;__Lib_CString.c, 88 :: 		
L_memset20:
; pp start address is: 4 (R1)
; n start address is: 20 (R5)
; n start address is: 20 (R5)
; character start address is: 0 (R0)
; character end address is: 0 (R0)
; p1 start address is: 8 (R2)
0x0724	0x4442C00C  BEXTS.L	R4, R5, #0
0x0728	0x4432C012  SUB.L	R3, R5, #1
0x072C	0x4451C00C  BEXTS.L	R5, R3, #0
; n end address is: 20 (R5)
0x0730	0x5BE24002  CMP.S	R4, #0
0x0734	0x002801D1  JMPC	R30, Z, #1, L_memset21
; character end address is: 0 (R0)
; n end address is: 20 (R5)
;__Lib_CString.c, 89 :: 		
; n start address is: 20 (R5)
; character start address is: 0 (R0)
0x0738	0xB0100000  STI.B	R1, #0, R0
0x073C	0x4410C010  ADD.L	R1, R1, #1
; character end address is: 0 (R0)
; n end address is: 20 (R5)
; pp end address is: 4 (R1)
0x0740	0x003001C9  JMP	L_memset20
L_memset21:
;__Lib_CString.c, 90 :: 		
0x0744	0x44014000  MOVE.L	R0, R2
; p1 end address is: 8 (R2)
;__Lib_CString.c, 91 :: 		
L_end_memset:
0x0748	0xA0000000  RETURN	
; end of _memset
_image_load_command:
;matrixrgb_firmware.c, 196 :: 		void image_load_command( void )
;matrixrgb_firmware.c, 205 :: 		receive_data( &firm_buffer, 4 );
0x2D08	0x64100004  LDK.L	R1, #4
0x2D0C	0x6400005F  LDK.L	R0, #_firm_buffer+0
0x2D10	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware.c, 210 :: 		wid = wid_hi;
; wid start address is: 4 (R1)
0x2D14	0xC0100060  LDA.B	R1, _firm_buffer+1
;matrixrgb_firmware.c, 211 :: 		wid = ( wid << 8 ) | wid_lo;
0x2D18	0x4400C00D  BEXTU.L	R0, R1, #0
; wid end address is: 4 (R1)
0x2D1C	0x44104088  ASHL.L	R1, R0, #8
0x2D20	0x4410C00D  BEXTU.L	R1, R1, #0
0x2D24	0xC000005F  LDA.B	R0, _firm_buffer+0
0x2D28	0x44008005  OR.L	R0, R1, R0
; wid start address is: 8 (R2)
0x2D2C	0x4420400D  BEXTU.L	R2, R0, #0
;matrixrgb_firmware.c, 212 :: 		hei = hei_hi;
; hei start address is: 4 (R1)
0x2D30	0xC0100062  LDA.B	R1, _firm_buffer+3
;matrixrgb_firmware.c, 213 :: 		hei = ( hei << 8 ) | hei_lo;
0x2D34	0x4400C00D  BEXTU.L	R0, R1, #0
; hei end address is: 4 (R1)
0x2D38	0x44904088  ASHL.L	R9, R0, #8
0x2D3C	0x4494C00D  BEXTU.L	R9, R9, #0
0x2D40	0xC0000061  LDA.B	R0, _firm_buffer+2
0x2D44	0x44948005  OR.L	R9, R9, R0
0x2D48	0x4494C00D  BEXTU.L	R9, R9, #0
; hei start address is: 36 (R9)
;matrixrgb_firmware.c, 215 :: 		for ( i = 0; i < hei; i++ )
; i start address is: 0 (R0)
0x2D4C	0x64000000  LDK.L	R0, #0
; wid end address is: 8 (R2)
; i end address is: 0 (R0)
; hei end address is: 36 (R9)
0x2D50	0x4481400D  BEXTU.L	R8, R2, #0
0x2D54	0x44A0400D  BEXTU.L	R10, R0, #0
L_image_load_command16:
; i start address is: 40 (R10)
; hei start address is: 36 (R9)
; wid start address is: 32 (R8)
0x2D58	0x5BE50092  CMP.S	R10, R9
0x2D5C	0x00600B77  JMPC	R30, C, #0, L_image_load_command17
;matrixrgb_firmware.c, 216 :: 		for ( j = 0; j < wid; j++ )
; j start address is: 44 (R11)
0x2D60	0x64B00000  LDK.L	R11, #0
; wid end address is: 32 (R8)
; hei end address is: 36 (R9)
; j end address is: 44 (R11)
; i end address is: 40 (R10)
L_image_load_command19:
; j start address is: 44 (R11)
; wid start address is: 32 (R8)
; hei start address is: 36 (R9)
; i start address is: 40 (R10)
0x2D64	0x5BE58082  CMP.S	R11, R8
0x2D68	0x00600B74  JMPC	R30, C, #0, L_image_load_command20
;matrixrgb_firmware.c, 218 :: 		receive_data( &firm_buffer, 2 );
0x2D6C	0x64100002  LDK.L	R1, #2
0x2D70	0x6400005F  LDK.L	R0, #_firm_buffer+0
0x2D74	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware.c, 220 :: 		tmpCol = firm_buffer[0] + (firm_buffer[1] << 8);
0x2D78	0xC0000060  LDA.B	R0, _firm_buffer+1
0x2D7C	0x44104088  ASHL.L	R1, R0, #8
0x2D80	0x4410C00D  BEXTU.L	R1, R1, #0
0x2D84	0xC000005F  LDA.B	R0, _firm_buffer+0
0x2D88	0x44300010  ADD.L	R3, R0, R1
0x2D8C	0x4431C00D  BEXTU.L	R3, R3, #0
;matrixrgb_firmware.c, 221 :: 		red = tmpCol >> 11;
0x2D90	0x4401C00D  BEXTU.L	R0, R3, #0
0x2D94	0x442040B9  LSHR.L	R2, R0, #11
;matrixrgb_firmware.c, 222 :: 		green = (tmpCol & 0x7FF) >> 5;
0x2D98	0x640007FF  LDK.L	R0, #2047
0x2D9C	0x44018004  AND.L	R0, R3, R0
0x2DA0	0x4400400D  BEXTU.L	R0, R0, #0
0x2DA4	0x44104059  LSHR.L	R1, R0, #5
;matrixrgb_firmware.c, 223 :: 		blue = tmpCol & 0x1F;
0x2DA8	0x4401C1F4  AND.L	R0, R3, #31
;matrixrgb_firmware.c, 225 :: 		write_pixel_img( i, j, red, green, blue);
0x2DAC	0x4440500D  BEXTU.L	R4, R0, #256
0x2DB0	0x4430D00D  BEXTU.L	R3, R1, #256
0x2DB4	0x4421500D  BEXTU.L	R2, R2, #256
0x2DB8	0x4415C00D  BEXTU.L	R1, R11, #0
0x2DBC	0x4405400D  BEXTU.L	R0, R10, #0
0x2DC0	0x0034083B  CALL	_write_pixel_img+0
;matrixrgb_firmware.c, 216 :: 		for ( j = 0; j < wid; j++ )
0x2DC4	0x44B5C010  ADD.L	R11, R11, #1
0x2DC8	0x44B5C00D  BEXTU.L	R11, R11, #0
;matrixrgb_firmware.c, 226 :: 		}
; j end address is: 44 (R11)
0x2DCC	0x00300B59  JMP	L_image_load_command19
L_image_load_command20:
;matrixrgb_firmware.c, 215 :: 		for ( i = 0; i < hei; i++ )
0x2DD0	0x44A54010  ADD.L	R10, R10, #1
0x2DD4	0x44A5400D  BEXTU.L	R10, R10, #0
;matrixrgb_firmware.c, 226 :: 		}
; wid end address is: 32 (R8)
; hei end address is: 36 (R9)
; i end address is: 40 (R10)
0x2DD8	0x00300B56  JMP	L_image_load_command16
L_image_load_command17:
;matrixrgb_firmware.c, 227 :: 		}
L_end_image_load_command:
0x2DDC	0xA0000000  RETURN	
; end of _image_load_command
_write_pixel_img:
;matrixrgb_firmware.c, 1358 :: 		void write_pixel_img( uint16_t row, uint16_t column, char red, char green, char blue)
; blue start address is: 16 (R4)
; green start address is: 12 (R3)
; red start address is: 8 (R2)
; column start address is: 4 (R1)
; row start address is: 0 (R0)
; blue end address is: 16 (R4)
; green end address is: 12 (R3)
; red end address is: 8 (R2)
; column end address is: 4 (R1)
; row end address is: 0 (R0)
; row start address is: 0 (R0)
; column start address is: 4 (R1)
; red start address is: 8 (R2)
; green start address is: 12 (R3)
; blue start address is: 16 (R4)
;matrixrgb_firmware.c, 1360 :: 		uint8_t buffer = 0;
; buffer start address is: 24 (R6)
0x20EC	0x64600000  LDK.L	R6, #0
;matrixrgb_firmware.c, 1362 :: 		if ( ( red & 0x18 ) > 0 )
0x20F0	0x44514184  AND.L	R5, R2, #24
; red end address is: 8 (R2)
0x20F4	0x59E2C002  CMP.B	R5, #0
0x20F8	0x01A00842  JMPC	R30, A, #0, L__write_pixel_img299
;matrixrgb_firmware.c, 1363 :: 		buffer |= 0x04;
0x20FC	0x44234045  OR.L	R2, R6, #4
0x2100	0x4421500D  BEXTU.L	R2, R2, #256
; buffer end address is: 24 (R6)
; buffer start address is: 8 (R2)
; buffer end address is: 8 (R2)
0x2104	0x00300843  JMP	L_write_pixel_img280
L__write_pixel_img299:
;matrixrgb_firmware.c, 1362 :: 		if ( ( red & 0x18 ) > 0 )
0x2108	0x4423500D  BEXTU.L	R2, R6, #256
;matrixrgb_firmware.c, 1363 :: 		buffer |= 0x04;
L_write_pixel_img280:
;matrixrgb_firmware.c, 1364 :: 		if ( ( green & 0x38 ) > 0 )
; buffer start address is: 8 (R2)
0x210C	0x4451C384  AND.L	R5, R3, #56
; green end address is: 12 (R3)
0x2110	0x59E2C002  CMP.B	R5, #0
0x2114	0x01A0084A  JMPC	R30, A, #0, L__write_pixel_img300
;matrixrgb_firmware.c, 1365 :: 		buffer |= 0x02;
0x2118	0x44514025  OR.L	R5, R2, #2
0x211C	0x4422D00D  BEXTU.L	R2, R5, #256
; buffer end address is: 8 (R2)
0x2120	0x4471500D  BEXTU.L	R7, R2, #256
0x2124	0x0030084B  JMP	L_write_pixel_img281
L__write_pixel_img300:
;matrixrgb_firmware.c, 1364 :: 		if ( ( green & 0x38 ) > 0 )
0x2128	0x4471500D  BEXTU.L	R7, R2, #256
;matrixrgb_firmware.c, 1365 :: 		buffer |= 0x02;
L_write_pixel_img281:
;matrixrgb_firmware.c, 1366 :: 		if ( ( blue & 0x18 ) > 0 )
; buffer start address is: 28 (R7)
0x212C	0x44524184  AND.L	R5, R4, #24
; blue end address is: 16 (R4)
0x2130	0x59E2C002  CMP.B	R5, #0
0x2134	0x01A00851  JMPC	R30, A, #0, L__write_pixel_img301
;matrixrgb_firmware.c, 1367 :: 		buffer |= 0x01;
0x2138	0x4473C015  OR.L	R7, R7, #1
0x213C	0x4473D00D  BEXTU.L	R7, R7, #256
; buffer end address is: 28 (R7)
0x2140	0x00300851  JMP	L_write_pixel_img282
L__write_pixel_img301:
;matrixrgb_firmware.c, 1366 :: 		if ( ( blue & 0x18 ) > 0 )
;matrixrgb_firmware.c, 1367 :: 		buffer |= 0x01;
L_write_pixel_img282:
;matrixrgb_firmware.c, 1368 :: 		FB[ get_coord_index( row, column ) ] = buffer;
; buffer start address is: 28 (R7)
; column end address is: 4 (R1)
; row end address is: 0 (R0)
0x2144	0x00340349  CALL	matrixrgb_firmware_get_coord_index+0
0x2148	0xC450EB48  LDA.L	R5, _FB+0
0x214C	0x44528000  ADD.L	R5, R5, R0
0x2150	0xB0538000  STI.B	R5, #0, R7
; buffer end address is: 28 (R7)
;matrixrgb_firmware.c, 1369 :: 		}
L_end_write_pixel_img:
0x2154	0xA0000000  RETURN	
; end of _write_pixel_img
matrixrgb_firmware_get_coord_index:
;matrixrgb_firmware.c, 97 :: 		static uint16_t get_coord_index( uint16_t row, uint16_t col )
; col start address is: 4 (R1)
; row start address is: 0 (R0)
0x0D24	0x95D00004  LINK	LR, #4
0x0D28	0xB3F08000  STI.S	SP, #0, R1
0x0D2C	0x4410400D  BEXTU.L	R1, R0, #0
0x0D30	0xAA0F8000  LDI.S	R0, SP, #0
; col end address is: 4 (R1)
; row end address is: 0 (R0)
; row start address is: 4 (R1)
; col start address is: 0 (R0)
;matrixrgb_firmware.c, 99 :: 		uint16_t incrementer = 0;
;matrixrgb_firmware.c, 100 :: 		uint16_t starter     = 0;
;matrixrgb_firmware.c, 101 :: 		uint16_t buffer      = 0;
;matrixrgb_firmware.c, 102 :: 		uint16_t new         = 0;
;matrixrgb_firmware.c, 103 :: 		uint16_t mult        = 0;
;matrixrgb_firmware.c, 104 :: 		uint16_t new_col     = 0;
;matrixrgb_firmware.c, 107 :: 		if ( row >= 32 )
0x0D34	0x5BE0C202  CMP.S	R1, #32
0x0D38	0x0068035C  JMPC	R30, C, #1, L_matrixrgb_firmware_get_coord_index290
;matrixrgb_firmware.c, 109 :: 		new_col = row / 32;
0x0D3C	0x4420C00D  BEXTU.L	R2, R1, #0
0x0D40	0x44314059  LSHR.L	R3, R2, #5
0x0D44	0x4431C00D  BEXTU.L	R3, R3, #0
;matrixrgb_firmware.c, 110 :: 		new_col *= ( pan_width * 32 );
0x0D48	0xC020EB46  LDA.B	R2, _pan_width+0
0x0D4C	0x44214058  ASHL.L	R2, R2, #5
0x0D50	0x4421400C  BEXTS.L	R2, R2, #0
0x0D54	0xF4318028  MUL.L	R3, R3, R2
0x0D58	0x4431C00D  BEXTU.L	R3, R3, #0
;matrixrgb_firmware.c, 111 :: 		row = row % 32;
0x0D5C	0x4410C1F4  AND.L	R1, R1, #31
0x0D60	0x4410C00D  BEXTU.L	R1, R1, #0
;matrixrgb_firmware.c, 112 :: 		col += new_col;
0x0D64	0x44000030  ADD.L	R0, R0, R3
0x0D68	0x4400400D  BEXTU.L	R0, R0, #0
; col end address is: 0 (R0)
; row end address is: 4 (R1)
;matrixrgb_firmware.c, 113 :: 		}
0x0D6C	0x0030035C  JMP	L_matrixrgb_firmware_get_coord_index0
L_matrixrgb_firmware_get_coord_index290:
;matrixrgb_firmware.c, 107 :: 		if ( row >= 32 )
;matrixrgb_firmware.c, 113 :: 		}
L_matrixrgb_firmware_get_coord_index0:
;matrixrgb_firmware.c, 114 :: 		incrementer = ( row / 8 );
; col start address is: 0 (R0)
; row start address is: 4 (R1)
0x0D70	0x4420C00D  BEXTU.L	R2, R1, #0
0x0D74	0x44214039  LSHR.L	R2, R2, #3
0x0D78	0x4421400D  BEXTU.L	R2, R2, #0
; incrementer start address is: 12 (R3)
0x0D7C	0x4431400D  BEXTU.L	R3, R2, #0
;matrixrgb_firmware.c, 115 :: 		if ( ( ( incrementer % 2 ) == 0 ) || incrementer == 0 )
0x0D80	0x44214014  AND.L	R2, R2, #1
0x0D84	0x5BE14002  CMP.S	R2, #0
0x0D88	0x00280366  JMPC	R30, Z, #1, L_matrixrgb_firmware_get_coord_index289
0x0D8C	0x5BE1C002  CMP.S	R3, #0
0x0D90	0x00280366  JMPC	R30, Z, #1, L_matrixrgb_firmware_get_coord_index288
; incrementer end address is: 12 (R3)
0x0D94	0x00300368  JMP	L_matrixrgb_firmware_get_coord_index3
L_matrixrgb_firmware_get_coord_index289:
L_matrixrgb_firmware_get_coord_index288:
;matrixrgb_firmware.c, 116 :: 		incrementer = 32;
; incrementer start address is: 16 (R4)
0x0D98	0x64400020  LDK.L	R4, #32
; incrementer end address is: 16 (R4)
0x0D9C	0x00300369  JMP	L_matrixrgb_firmware_get_coord_index4
L_matrixrgb_firmware_get_coord_index3:
;matrixrgb_firmware.c, 118 :: 		incrementer = 0;
; incrementer start address is: 16 (R4)
0x0DA0	0x64400000  LDK.L	R4, #0
; incrementer end address is: 16 (R4)
L_matrixrgb_firmware_get_coord_index4:
;matrixrgb_firmware.c, 119 :: 		starter = ( col / 32 ) * 32;
; incrementer start address is: 16 (R4)
0x0DA4	0x4420400D  BEXTU.L	R2, R0, #0
0x0DA8	0x44214059  LSHR.L	R2, R2, #5
0x0DAC	0x4421400D  BEXTU.L	R2, R2, #0
0x0DB0	0x44214058  ASHL.L	R2, R2, #5
; starter start address is: 20 (R5)
0x0DB4	0x4451400D  BEXTU.L	R5, R2, #0
;matrixrgb_firmware.c, 120 :: 		if ( row < 16 )
0x0DB8	0x5BE0C102  CMP.S	R1, #16
0x0DBC	0x00600372  JMPC	R30, C, #0, L_matrixrgb_firmware_get_coord_index5
;matrixrgb_firmware.c, 121 :: 		new = 0;
; new start address is: 24 (R6)
0x0DC0	0x64600000  LDK.L	R6, #0
; new end address is: 24 (R6)
0x0DC4	0x00300375  JMP	L_matrixrgb_firmware_get_coord_index6
L_matrixrgb_firmware_get_coord_index5:
;matrixrgb_firmware.c, 123 :: 		new = shift_reg * 8;
0x0DC8	0xC420EB50  LDA.L	R2, _shift_reg+0
0x0DCC	0x44214038  ASHL.L	R2, R2, #3
; new start address is: 24 (R6)
0x0DD0	0x4461400D  BEXTU.L	R6, R2, #0
; new end address is: 24 (R6)
L_matrixrgb_firmware_get_coord_index6:
;matrixrgb_firmware.c, 124 :: 		mult = ( row % 8 ) * shift_reg;
; new start address is: 24 (R6)
0x0DD4	0x4430C074  AND.L	R3, R1, #7
0x0DD8	0x4431C00D  BEXTU.L	R3, R3, #0
; row end address is: 4 (R1)
0x0DDC	0xC420EB50  LDA.L	R2, _shift_reg+0
0x0DE0	0xF4218028  MUL.L	R2, R3, R2
;matrixrgb_firmware.c, 125 :: 		buffer = incrementer + mult + new + starter + col;
0x0DE4	0x4421400D  BEXTU.L	R2, R2, #0
0x0DE8	0x44220020  ADD.L	R2, R4, R2
0x0DEC	0x4421400D  BEXTU.L	R2, R2, #0
; incrementer end address is: 16 (R4)
0x0DF0	0x44210060  ADD.L	R2, R2, R6
0x0DF4	0x4421400D  BEXTU.L	R2, R2, #0
; new end address is: 24 (R6)
0x0DF8	0x44210050  ADD.L	R2, R2, R5
0x0DFC	0x4421400D  BEXTU.L	R2, R2, #0
; starter end address is: 20 (R5)
0x0E00	0x44210000  ADD.L	R2, R2, R0
; col end address is: 0 (R0)
;matrixrgb_firmware.c, 127 :: 		return buffer;
0x0E04	0x4401400D  BEXTU.L	R0, R2, #0
;matrixrgb_firmware.c, 128 :: 		}
L_end_get_coord_index:
0x0E08	0x99D00000  UNLINK	LR
0x0E0C	0xA0000000  RETURN	
; end of matrixrgb_firmware_get_coord_index
_scroll_img_left_command:
;matrixrgb_firmware.c, 229 :: 		void scroll_img_left_command( void )
0x2B60	0x95D00004  LINK	LR, #4
;matrixrgb_firmware.c, 235 :: 		uint8_t buffer = 0;
;matrixrgb_firmware.c, 236 :: 		uint8_t speed  = 0;
;matrixrgb_firmware.c, 240 :: 		receive_data( &firm_buffer, 4 );
0x2B64	0x64100004  LDK.L	R1, #4
0x2B68	0x6400005F  LDK.L	R0, #_firm_buffer+0
0x2B6C	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware.c, 241 :: 		wid_lo  = firm_buffer[0];
; wid_lo start address is: 20 (R5)
0x2B70	0xC050005F  LDA.B	R5, _firm_buffer+0
;matrixrgb_firmware.c, 242 :: 		wid_hi  = firm_buffer[1];
; wid_hi start address is: 24 (R6)
0x2B74	0xC0600060  LDA.B	R6, _firm_buffer+1
;matrixrgb_firmware.c, 243 :: 		hei_lo  = firm_buffer[2];
; hei_lo start address is: 12 (R3)
0x2B78	0xC0300061  LDA.B	R3, _firm_buffer+2
;matrixrgb_firmware.c, 244 :: 		hei_hi  = firm_buffer[3];
; hei_hi start address is: 16 (R4)
0x2B7C	0xC0400062  LDA.B	R4, _firm_buffer+3
;matrixrgb_firmware.c, 245 :: 		receive_data( &firm_buffer, 1 );
0x2B80	0x64100001  LDK.L	R1, #1
0x2B84	0x6400005F  LDK.L	R0, #_firm_buffer+0
0x2B88	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware.c, 246 :: 		speed = firm_buffer[0];
; speed start address is: 40 (R10)
0x2B8C	0xC0A0005F  LDA.B	R10, _firm_buffer+0
;matrixrgb_firmware.c, 247 :: 		img_w = wid_hi;
; img_w start address is: 4 (R1)
0x2B90	0x4413500D  BEXTU.L	R1, R6, #256
; wid_hi end address is: 24 (R6)
;matrixrgb_firmware.c, 248 :: 		img_w = ( img_w << 8 ) | wid_lo;
0x2B94	0x4400C00D  BEXTU.L	R0, R1, #0
; img_w end address is: 4 (R1)
0x2B98	0x44004088  ASHL.L	R0, R0, #8
0x2B9C	0x4400400D  BEXTU.L	R0, R0, #0
0x2BA0	0x44100055  OR.L	R1, R0, R5
; wid_lo end address is: 20 (R5)
; img_w start address is: 44 (R11)
0x2BA4	0x44B0C00D  BEXTU.L	R11, R1, #0
;matrixrgb_firmware.c, 249 :: 		img_h = hei_hi;
; img_h start address is: 8 (R2)
0x2BA8	0x4422500D  BEXTU.L	R2, R4, #256
; hei_hi end address is: 16 (R4)
;matrixrgb_firmware.c, 250 :: 		img_h = ( img_h << 8 ) | hei_lo;
0x2BAC	0x4401400D  BEXTU.L	R0, R2, #0
; img_h end address is: 8 (R2)
0x2BB0	0x44004088  ASHL.L	R0, R0, #8
0x2BB4	0x4400400D  BEXTU.L	R0, R0, #0
0x2BB8	0x44000035  OR.L	R0, R0, R3
; hei_lo end address is: 12 (R3)
; img_h start address is: 48 (R12)
0x2BBC	0x44C0400D  BEXTU.L	R12, R0, #0
;matrixrgb_firmware.c, 251 :: 		allocate_image( img_w, img_h );
0x2BC0	0xB3F08000  STI.S	SP, #0, R1
0x2BC4	0x4410500D  BEXTU.L	R1, R0, #256
0x2BC8	0xA80F8000  LDI.B	R0, SP, #0
0x2BCC	0x0034082A  CALL	_allocate_image+0
;matrixrgb_firmware.c, 253 :: 		for ( i = 0; i < img_h; i++ )
; i start address is: 24 (R6)
0x2BD0	0x64600000  LDK.L	R6, #0
; speed end address is: 40 (R10)
; img_w end address is: 44 (R11)
; img_h end address is: 48 (R12)
; i end address is: 24 (R6)
0x2BD4	0x4435500D  BEXTU.L	R3, R10, #256
0x2BD8	0x44F5C00D  BEXTU.L	R15, R11, #0
0x2BDC	0x44B6400D  BEXTU.L	R11, R12, #0
L_scroll_img_left_command22:
; i start address is: 24 (R6)
; img_h start address is: 44 (R11)
; img_w start address is: 60 (R15)
; speed start address is: 12 (R3)
0x2BE0	0x5BE300B2  CMP.S	R6, R11
0x2BE4	0x00600B36  JMPC	R30, C, #0, L_scroll_img_left_command23
;matrixrgb_firmware.c, 254 :: 		for ( j = 0; j < img_w; j++ )
; j start address is: 28 (R7)
0x2BE8	0x64700000  LDK.L	R7, #0
; img_h end address is: 44 (R11)
; img_w end address is: 60 (R15)
; speed end address is: 12 (R3)
; j end address is: 28 (R7)
; i end address is: 24 (R6)
0x2BEC	0x4455C00D  BEXTU.L	R5, R11, #0
0x2BF0	0x4447C00D  BEXTU.L	R4, R15, #0
L_scroll_img_left_command25:
; j start address is: 28 (R7)
; speed start address is: 12 (R3)
; img_w start address is: 16 (R4)
; img_h start address is: 20 (R5)
; i start address is: 24 (R6)
0x2BF4	0x5BE38042  CMP.S	R7, R4
0x2BF8	0x00600B31  JMPC	R30, C, #0, L_scroll_img_left_command26
;matrixrgb_firmware.c, 256 :: 		buffer = 0;
; buffer start address is: 32 (R8)
0x2BFC	0x64800000  LDK.L	R8, #0
;matrixrgb_firmware.c, 257 :: 		receive_data( &firm_buffer, 2 );
0x2C00	0x64100002  LDK.L	R1, #2
0x2C04	0x6400005F  LDK.L	R0, #_firm_buffer+0
0x2C08	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware.c, 259 :: 		tmpCol = firm_buffer[0] + (firm_buffer[1] << 8);
0x2C0C	0xC0000060  LDA.B	R0, _firm_buffer+1
0x2C10	0x44104088  ASHL.L	R1, R0, #8
0x2C14	0x4410C00D  BEXTU.L	R1, R1, #0
0x2C18	0xC000005F  LDA.B	R0, _firm_buffer+0
0x2C1C	0x44200010  ADD.L	R2, R0, R1
0x2C20	0x4421400D  BEXTU.L	R2, R2, #0
;matrixrgb_firmware.c, 260 :: 		red = tmpCol >> 11;
0x2C24	0x4401400D  BEXTU.L	R0, R2, #0
0x2C28	0x441040B9  LSHR.L	R1, R0, #11
;matrixrgb_firmware.c, 261 :: 		green = (tmpCol & 0x7FF) >> 5;
0x2C2C	0x640007FF  LDK.L	R0, #2047
0x2C30	0x44010004  AND.L	R0, R2, R0
0x2C34	0x4400400D  BEXTU.L	R0, R0, #0
0x2C38	0x44004059  LSHR.L	R0, R0, #5
; green start address is: 36 (R9)
0x2C3C	0x4490500D  BEXTU.L	R9, R0, #256
;matrixrgb_firmware.c, 262 :: 		blue = tmpCol & 0x1F;
0x2C40	0x440141F4  AND.L	R0, R2, #31
; blue start address is: 8 (R2)
0x2C44	0x4420500D  BEXTU.L	R2, R0, #256
;matrixrgb_firmware.c, 263 :: 		if ( ( red & 0x18 ) > 0 )
0x2C48	0x4400D00D  BEXTU.L	R0, R1, #256
0x2C4C	0x44004184  AND.L	R0, R0, #24
0x2C50	0x59E04002  CMP.B	R0, #0
0x2C54	0x01A00B19  JMPC	R30, A, #0, L__scroll_img_left_command302
;matrixrgb_firmware.c, 264 :: 		buffer |= 0x04;
0x2C58	0x44144045  OR.L	R1, R8, #4
0x2C5C	0x4410D00D  BEXTU.L	R1, R1, #256
; buffer end address is: 32 (R8)
; buffer start address is: 4 (R1)
; buffer end address is: 4 (R1)
0x2C60	0x00300B1A  JMP	L_scroll_img_left_command28
L__scroll_img_left_command302:
;matrixrgb_firmware.c, 263 :: 		if ( ( red & 0x18 ) > 0 )
0x2C64	0x4414500D  BEXTU.L	R1, R8, #256
;matrixrgb_firmware.c, 264 :: 		buffer |= 0x04;
L_scroll_img_left_command28:
;matrixrgb_firmware.c, 265 :: 		if ( ( green & 0x38 ) > 0 )
; buffer start address is: 4 (R1)
0x2C68	0x4404C384  AND.L	R0, R9, #56
; green end address is: 36 (R9)
0x2C6C	0x59E04002  CMP.B	R0, #0
0x2C70	0x01A00B20  JMPC	R30, A, #0, L__scroll_img_left_command303
;matrixrgb_firmware.c, 266 :: 		buffer |= 0x02;
0x2C74	0x4410C025  OR.L	R1, R1, #2
0x2C78	0x4410D00D  BEXTU.L	R1, R1, #256
; buffer end address is: 4 (R1)
0x2C7C	0x00300B20  JMP	L_scroll_img_left_command29
L__scroll_img_left_command303:
;matrixrgb_firmware.c, 265 :: 		if ( ( green & 0x38 ) > 0 )
;matrixrgb_firmware.c, 266 :: 		buffer |= 0x02;
L_scroll_img_left_command29:
;matrixrgb_firmware.c, 267 :: 		if ( ( blue & 0x18 ) > 0 )
; buffer start address is: 4 (R1)
0x2C80	0x44014184  AND.L	R0, R2, #24
; blue end address is: 8 (R2)
0x2C84	0x59E04002  CMP.B	R0, #0
0x2C88	0x01A00B26  JMPC	R30, A, #0, L__scroll_img_left_command304
;matrixrgb_firmware.c, 268 :: 		buffer |= 0x01;
0x2C8C	0x4420C015  OR.L	R2, R1, #1
0x2C90	0x4421500D  BEXTU.L	R2, R2, #256
; buffer end address is: 4 (R1)
; buffer start address is: 8 (R2)
; buffer end address is: 8 (R2)
0x2C94	0x00300B27  JMP	L_scroll_img_left_command30
L__scroll_img_left_command304:
;matrixrgb_firmware.c, 267 :: 		if ( ( blue & 0x18 ) > 0 )
0x2C98	0x4420D00D  BEXTU.L	R2, R1, #256
;matrixrgb_firmware.c, 268 :: 		buffer |= 0x01;
L_scroll_img_left_command30:
;matrixrgb_firmware.c, 269 :: 		img[( i * img_w ) + j] = buffer;
; buffer start address is: 8 (R2)
0x2C9C	0xF4030048  MUL.L	R0, R6, R4
0x2CA0	0x4400400D  BEXTU.L	R0, R0, #0
0x2CA4	0x44100070  ADD.L	R1, R0, R7
0x2CA8	0x4410C00D  BEXTU.L	R1, R1, #0
0x2CAC	0xC400EB4C  LDA.L	R0, matrixrgb_firmware_img+0
0x2CB0	0x44000010  ADD.L	R0, R0, R1
0x2CB4	0xB0010000  STI.B	R0, #0, R2
; buffer end address is: 8 (R2)
;matrixrgb_firmware.c, 254 :: 		for ( j = 0; j < img_w; j++ )
0x2CB8	0x4473C010  ADD.L	R7, R7, #1
0x2CBC	0x4473C00D  BEXTU.L	R7, R7, #0
;matrixrgb_firmware.c, 270 :: 		}
; j end address is: 28 (R7)
0x2CC0	0x00300AFD  JMP	L_scroll_img_left_command25
L_scroll_img_left_command26:
;matrixrgb_firmware.c, 253 :: 		for ( i = 0; i < img_h; i++ )
0x2CC4	0x44634010  ADD.L	R6, R6, #1
0x2CC8	0x4463400D  BEXTU.L	R6, R6, #0
;matrixrgb_firmware.c, 270 :: 		}
; img_w end address is: 16 (R4)
; img_h end address is: 20 (R5)
; i end address is: 24 (R6)
0x2CCC	0x44F2400D  BEXTU.L	R15, R4, #0
0x2CD0	0x44B2C00D  BEXTU.L	R11, R5, #0
0x2CD4	0x00300AF8  JMP	L_scroll_img_left_command22
L_scroll_img_left_command23:
;matrixrgb_firmware.c, 271 :: 		scroll_image_onto_right( img, img_w, img_h, speed );
; img_w start address is: 60 (R15)
; img_h start address is: 44 (R11)
0x2CD8	0xC400EB4C  LDA.L	R0, matrixrgb_firmware_img+0
; speed end address is: 12 (R3)
0x2CDC	0x4425D00D  BEXTU.L	R2, R11, #256
0x2CE0	0x4417D00D  BEXTU.L	R1, R15, #256
0x2CE4	0x0034078B  CALL	_scroll_image_onto_right+0
;matrixrgb_firmware.c, 274 :: 		Free( img, (img_w * img_h) );
0x2CE8	0xF41780B8  MUL.L	R1, R15, R11
0x2CEC	0x4410C00D  BEXTU.L	R1, R1, #0
; img_h end address is: 44 (R11)
; img_w end address is: 60 (R15)
0x2CF0	0xC400EB4C  LDA.L	R0, matrixrgb_firmware_img+0
0x2CF4	0x003407BF  CALL	_Free+0
;matrixrgb_firmware.c, 275 :: 		}
L_end_scroll_img_left_command:
0x2CF8	0x99D00000  UNLINK	LR
0x2CFC	0xA0000000  RETURN	
; end of _scroll_img_left_command
_allocate_image:
;matrixrgb_firmware.c, 502 :: 		void allocate_image( uint8_t width, uint8_t height )
; height start address is: 4 (R1)
; width start address is: 0 (R0)
; height end address is: 4 (R1)
; width end address is: 0 (R0)
; width start address is: 0 (R0)
; height start address is: 4 (R1)
;matrixrgb_firmware.c, 504 :: 		uint16_t size = width * height;
0x20A8	0xF4200018  MUL.L	R2, R0, R1
; width end address is: 0 (R0)
; height end address is: 4 (R1)
; size start address is: 36 (R9)
0x20AC	0x4491400D  BEXTU.L	R9, R2, #0
;matrixrgb_firmware.c, 505 :: 		uint16_t i = 0;
;matrixrgb_firmware.c, 507 :: 		img = Malloc( sizeof( uint8_t ) * size );
0x20B0	0x4404C00D  BEXTU.L	R0, R9, #0
0x20B4	0x003401D3  CALL	_Malloc+0
0x20B8	0xBC00EB4C  STA.L	matrixrgb_firmware_img+0, R0
;matrixrgb_firmware.c, 508 :: 		for ( i = 0; i < size; i++ )
; i start address is: 0 (R0)
0x20BC	0x64000000  LDK.L	R0, #0
; size end address is: 36 (R9)
; i end address is: 0 (R0)
0x20C0	0x4414C00D  BEXTU.L	R1, R9, #0
L_allocate_image46:
; i start address is: 0 (R0)
; size start address is: 4 (R1)
0x20C4	0x5BE00012  CMP.S	R0, R1
0x20C8	0x0060083A  JMPC	R30, C, #0, L_allocate_image47
;matrixrgb_firmware.c, 509 :: 		img[i] = 0x00;
0x20CC	0xC420EB4C  LDA.L	R2, matrixrgb_firmware_img+0
0x20D0	0x44310000  ADD.L	R3, R2, R0
0x20D4	0x64200000  LDK.L	R2, #0
0x20D8	0xB0310000  STI.B	R3, #0, R2
;matrixrgb_firmware.c, 508 :: 		for ( i = 0; i < size; i++ )
0x20DC	0x44004010  ADD.L	R0, R0, #1
0x20E0	0x4400400D  BEXTU.L	R0, R0, #0
;matrixrgb_firmware.c, 509 :: 		img[i] = 0x00;
; size end address is: 4 (R1)
; i end address is: 0 (R0)
0x20E4	0x00300831  JMP	L_allocate_image46
L_allocate_image47:
;matrixrgb_firmware.c, 511 :: 		}
L_end_allocate_image:
0x20E8	0xA0000000  RETURN	
; end of _allocate_image
_scroll_image_onto_right:
;matrixrgb_firmware.c, 967 :: 		void scroll_image_onto_right( uint8_t *bmp, uint8_t width, uint8_t height, uint16_t speed )
; m start address is: 48 (R12)
; height start address is: 8 (R2)
0x1E2C	0x95D0000C  LINK	LR, #12
;matrixrgb_firmware.c, 974 :: 		for ( m = 0; m < width; m++ )
;matrixrgb_firmware.c, 967 :: 		void scroll_image_onto_right( uint8_t *bmp, uint8_t width, uint8_t height, uint16_t speed )
0x1E30	0xB5F00000  STI.L	SP, #0, R0
0x1E34	0xB1F08004  STI.B	SP, #4, R1
0x1E38	0x44A1500D  BEXTU.L	R10, R2, #256
;matrixrgb_firmware.c, 974 :: 		for ( m = 0; m < width; m++ )
;matrixrgb_firmware.c, 967 :: 		void scroll_image_onto_right( uint8_t *bmp, uint8_t width, uint8_t height, uint16_t speed )
0x1E3C	0xB3F18008  STI.S	SP, #8, R3
; m end address is: 48 (R12)
; height end address is: 8 (R2)
; height start address is: 40 (R10)
;matrixrgb_firmware.c, 970 :: 		uint16_t i = 0, j = 64;
;matrixrgb_firmware.c, 971 :: 		uint8_t buffer = 0;
;matrixrgb_firmware.c, 974 :: 		for ( m = 0; m < width; m++ )
; m start address is: 48 (R12)
0x1E40	0x64C00000  LDK.L	R12, #0
; height end address is: 40 (R10)
; m end address is: 48 (R12)
L_scroll_image_onto_right143:
; m start address is: 48 (R12)
; height start address is: 40 (R10)
0x1E44	0xA84F8004  LDI.B	R4, SP, #4
0x1E48	0x59E60042  CMP.B	R12, R4
0x1E4C	0x006007BD  JMPC	R30, C, #0, L_scroll_image_onto_right144
;matrixrgb_firmware.c, 976 :: 		display_shift_left();
0x1E50	0x00340412  CALL	_display_shift_left+0
;matrixrgb_firmware.c, 978 :: 		for ( k = 0; k < height; k++ )
; k start address is: 32 (R8)
0x1E54	0x64800000  LDK.L	R8, #0
; k end address is: 32 (R8)
; height end address is: 40 (R10)
; m end address is: 48 (R12)
L_scroll_image_onto_right146:
; k start address is: 32 (R8)
; height start address is: 40 (R10)
; m start address is: 48 (R12)
0x1E58	0x59E400A2  CMP.B	R8, R10
0x1E5C	0x006007AF  JMPC	R30, C, #0, L_scroll_image_onto_right147
;matrixrgb_firmware.c, 980 :: 		buffer = bmp[( k * width + m )];
0x1E60	0xA84F8004  LDI.B	R4, SP, #4
0x1E64	0xF4440048  MUL.L	R4, R8, R4
0x1E68	0x4442400C  BEXTS.L	R4, R4, #0
0x1E6C	0x445200C0  ADD.L	R5, R4, R12
0x1E70	0x4452C00C  BEXTS.L	R5, R5, #0
0x1E74	0xAC4F8000  LDI.L	R4, SP, #0
0x1E78	0x44420050  ADD.L	R4, R4, R5
0x1E7C	0xA8420000  LDI.B	R4, R4, #0
;matrixrgb_firmware.c, 981 :: 		red   = ( buffer & 0x04 );
0x1E80	0x44724044  AND.L	R7, R4, #4
;matrixrgb_firmware.c, 982 :: 		green = ( buffer & 0x02 );
0x1E84	0x44624024  AND.L	R6, R4, #2
;matrixrgb_firmware.c, 983 :: 		blue  = ( buffer & 0x01 );
0x1E88	0x44524014  AND.L	R5, R4, #1
;matrixrgb_firmware.c, 984 :: 		write_pixel( k, ( p_width - 1 ), red, green, blue );
0x1E8C	0xC24000E2  LDA.S	R4, _p_width+0
0x1E90	0x44424012  SUB.L	R4, R4, #1
0x1E94	0x4433500D  BEXTU.L	R3, R6, #256
0x1E98	0x4423D00D  BEXTU.L	R2, R7, #256
0x1E9C	0x4412400D  BEXTU.L	R1, R4, #0
0x1EA0	0x4442D00D  BEXTU.L	R4, R5, #256
0x1EA4	0x4404500D  BEXTU.L	R0, R8, #256
0x1EA8	0x00340439  CALL	_write_pixel+0
;matrixrgb_firmware.c, 978 :: 		for ( k = 0; k < height; k++ )
0x1EAC	0x44444010  ADD.L	R4, R8, #1
; k end address is: 32 (R8)
; k start address is: 52 (R13)
0x1EB0	0x44D2500D  BEXTU.L	R13, R4, #256
;matrixrgb_firmware.c, 985 :: 		}
; k end address is: 52 (R13)
0x1EB4	0x4486D00D  BEXTU.L	R8, R13, #256
0x1EB8	0x00300796  JMP	L_scroll_image_onto_right146
L_scroll_image_onto_right147:
;matrixrgb_firmware.c, 987 :: 		for ( p = 0; p < speed; p++ )
; p start address is: 56 (R14)
0x1EBC	0x64E00000  LDK.L	R14, #0
; height end address is: 40 (R10)
; p end address is: 56 (R14)
; m end address is: 48 (R12)
0x1EC0	0x44D6500D  BEXTU.L	R13, R12, #256
0x1EC4	0x4497500D  BEXTU.L	R9, R14, #256
L_scroll_image_onto_right149:
; p start address is: 36 (R9)
; m start address is: 52 (R13)
; height start address is: 40 (R10)
0x1EC8	0xAA4F8008  LDI.S	R4, SP, #8
0x1ECC	0x5BE48042  CMP.S	R9, R4
0x1ED0	0x006007BA  JMPC	R30, C, #0, L_scroll_image_onto_right150
;matrixrgb_firmware.c, 988 :: 		refresh();
0x1ED4	0x00340384  CALL	_refresh+0
;matrixrgb_firmware.c, 987 :: 		for ( p = 0; p < speed; p++ )
0x1ED8	0x4444C010  ADD.L	R4, R9, #1
; p end address is: 36 (R9)
; p start address is: 56 (R14)
0x1EDC	0x44E2500D  BEXTU.L	R14, R4, #256
;matrixrgb_firmware.c, 988 :: 		refresh();
; p end address is: 56 (R14)
0x1EE0	0x4497500D  BEXTU.L	R9, R14, #256
0x1EE4	0x003007B2  JMP	L_scroll_image_onto_right149
L_scroll_image_onto_right150:
;matrixrgb_firmware.c, 974 :: 		for ( m = 0; m < width; m++ )
0x1EE8	0x4446C010  ADD.L	R4, R13, #1
; m end address is: 52 (R13)
; m start address is: 48 (R12)
0x1EEC	0x44C2500D  BEXTU.L	R12, R4, #256
;matrixrgb_firmware.c, 990 :: 		}
; height end address is: 40 (R10)
; m end address is: 48 (R12)
0x1EF0	0x00300791  JMP	L_scroll_image_onto_right143
L_scroll_image_onto_right144:
;matrixrgb_firmware.c, 992 :: 		}
L_end_scroll_image_onto_right:
0x1EF4	0x99D00000  UNLINK	LR
0x1EF8	0xA0000000  RETURN	
; end of _scroll_image_onto_right
_display_shift_left:
;matrixrgb_firmware.c, 1228 :: 		void display_shift_left( void )
0x1048	0x95D00004  LINK	LR, #4
;matrixrgb_firmware.c, 1230 :: 		uint16_t row          = 0;
;matrixrgb_firmware.c, 1231 :: 		uint16_t column       = 0;
;matrixrgb_firmware.c, 1232 :: 		uint16_t temp_col_one = 0;
;matrixrgb_firmware.c, 1233 :: 		uint16_t temp_col_two = 0;
;matrixrgb_firmware.c, 1234 :: 		uint8_t buffer        = 0;
;matrixrgb_firmware.c, 1236 :: 		for ( row = 0; row < p_height; row++ )
; row start address is: 28 (R7)
0x104C	0x64700000  LDK.L	R7, #0
; row end address is: 28 (R7)
L_display_shift_left239:
; row start address is: 28 (R7)
0x1050	0xC200EB44  LDA.S	R0, _p_height+0
0x1054	0x5BE38002  CMP.S	R7, R0
0x1058	0x00600437  JMPC	R30, C, #0, L_display_shift_left240
;matrixrgb_firmware.c, 1238 :: 		for ( column = 0; column <= ( p_width - 1 ); column++ )
; column start address is: 32 (R8)
0x105C	0x64800000  LDK.L	R8, #0
; column end address is: 32 (R8)
; row end address is: 28 (R7)
L_display_shift_left242:
; column start address is: 32 (R8)
; row start address is: 28 (R7)
0x1060	0xC20000E2  LDA.S	R0, _p_width+0
0x1064	0x44004012  SUB.L	R0, R0, #1
0x1068	0x5BE40002  CMP.S	R8, R0
0x106C	0x01A8042F  JMPC	R30, A, #1, L_display_shift_left243
;matrixrgb_firmware.c, 1242 :: 		temp_col_two = column + 1;
0x1070	0x44044010  ADD.L	R0, R8, #1
; temp_col_two start address is: 36 (R9)
0x1074	0x4490400D  BEXTU.L	R9, R0, #0
;matrixrgb_firmware.c, 1243 :: 		FB[ get_coord_index( row, temp_col_one ) ] = FB[ get_coord_index( row, temp_col_two ) ];
0x1078	0x4414400D  BEXTU.L	R1, R8, #0
0x107C	0x4403C00D  BEXTU.L	R0, R7, #0
0x1080	0x00340349  CALL	matrixrgb_firmware_get_coord_index+0
0x1084	0xC410EB48  LDA.L	R1, _FB+0
0x1088	0x44008000  ADD.L	R0, R1, R0
0x108C	0xB5F00000  STI.L	SP, #0, R0
0x1090	0x4414C00D  BEXTU.L	R1, R9, #0
; temp_col_two end address is: 36 (R9)
0x1094	0x4403C00D  BEXTU.L	R0, R7, #0
0x1098	0x00340349  CALL	matrixrgb_firmware_get_coord_index+0
0x109C	0xC410EB48  LDA.L	R1, _FB+0
0x10A0	0x44008000  ADD.L	R0, R1, R0
0x10A4	0xA8100000  LDI.B	R1, R0, #0
0x10A8	0xAC0F8000  LDI.L	R0, SP, #0
0x10AC	0xB0008000  STI.B	R0, #0, R1
;matrixrgb_firmware.c, 1238 :: 		for ( column = 0; column <= ( p_width - 1 ); column++ )
0x10B0	0x44844010  ADD.L	R8, R8, #1
0x10B4	0x4484400D  BEXTU.L	R8, R8, #0
;matrixrgb_firmware.c, 1244 :: 		}
; column end address is: 32 (R8)
0x10B8	0x00300418  JMP	L_display_shift_left242
L_display_shift_left243:
;matrixrgb_firmware.c, 1245 :: 		erase_pixel( row, ( p_width - 1 ) );
0x10BC	0xC20000E2  LDA.S	R0, _p_width+0
0x10C0	0x44004012  SUB.L	R0, R0, #1
0x10C4	0x4410400D  BEXTU.L	R1, R0, #0
0x10C8	0x4403C00D  BEXTU.L	R0, R7, #0
0x10CC	0x0034024E  CALL	_erase_pixel+0
;matrixrgb_firmware.c, 1236 :: 		for ( row = 0; row < p_height; row++ )
0x10D0	0x4473C010  ADD.L	R7, R7, #1
0x10D4	0x4473C00D  BEXTU.L	R7, R7, #0
;matrixrgb_firmware.c, 1246 :: 		}
; row end address is: 28 (R7)
0x10D8	0x00300414  JMP	L_display_shift_left239
L_display_shift_left240:
;matrixrgb_firmware.c, 1248 :: 		}
L_end_display_shift_left:
0x10DC	0x99D00000  UNLINK	LR
0x10E0	0xA0000000  RETURN	
; end of _display_shift_left
_erase_pixel:
;matrixrgb_firmware.c, 1386 :: 		void erase_pixel( uint16_t row, uint16_t column )
; column start address is: 4 (R1)
; row start address is: 0 (R0)
; column end address is: 4 (R1)
; row end address is: 0 (R0)
; row start address is: 0 (R0)
; column start address is: 4 (R1)
;matrixrgb_firmware.c, 1388 :: 		uint8_t buffer = 0;
;matrixrgb_firmware.c, 1390 :: 		FB[get_coord_index( row, column ) ] = 0x00;
; column end address is: 4 (R1)
; row end address is: 0 (R0)
0x0938	0x00340349  CALL	matrixrgb_firmware_get_coord_index+0
0x093C	0xC420EB48  LDA.L	R2, _FB+0
0x0940	0x44310000  ADD.L	R3, R2, R0
0x0944	0x64200000  LDK.L	R2, #0
0x0948	0xB0310000  STI.B	R3, #0, R2
;matrixrgb_firmware.c, 1391 :: 		}
L_end_erase_pixel:
0x094C	0xA0000000  RETURN	
; end of _erase_pixel
_write_pixel:
;matrixrgb_firmware.c, 1371 :: 		void write_pixel( uint16_t row, uint16_t column, char red, char green, char blue)
; blue start address is: 16 (R4)
; green start address is: 12 (R3)
; red start address is: 8 (R2)
; column start address is: 4 (R1)
; row start address is: 0 (R0)
0x10E4	0x4451500D  BEXTU.L	R5, R2, #256
; blue end address is: 16 (R4)
; green end address is: 12 (R3)
; red end address is: 8 (R2)
; column end address is: 4 (R1)
; row end address is: 0 (R0)
; row start address is: 0 (R0)
; column start address is: 4 (R1)
; red start address is: 20 (R5)
; green start address is: 12 (R3)
; blue start address is: 16 (R4)
;matrixrgb_firmware.c, 1373 :: 		uint8_t buffer = 0;
; buffer start address is: 8 (R2)
0x10E8	0x64200000  LDK.L	R2, #0
;matrixrgb_firmware.c, 1375 :: 		if ( red  > 0 )
0x10EC	0x59E2C002  CMP.B	R5, #0
0x10F0	0x01A00440  JMPC	R30, A, #0, L__write_pixel291
; red end address is: 20 (R5)
;matrixrgb_firmware.c, 1376 :: 		buffer |= 0x04;
0x10F4	0x44214045  OR.L	R2, R2, #4
0x10F8	0x4421500D  BEXTU.L	R2, R2, #256
; buffer end address is: 8 (R2)
0x10FC	0x00300440  JMP	L_write_pixel283
L__write_pixel291:
;matrixrgb_firmware.c, 1375 :: 		if ( red  > 0 )
;matrixrgb_firmware.c, 1376 :: 		buffer |= 0x04;
L_write_pixel283:
;matrixrgb_firmware.c, 1377 :: 		if ( green > 0 )
; buffer start address is: 8 (R2)
0x1100	0x59E1C002  CMP.B	R3, #0
0x1104	0x01A00446  JMPC	R30, A, #0, L__write_pixel292
; green end address is: 12 (R3)
;matrixrgb_firmware.c, 1378 :: 		buffer |= 0x02;
0x1108	0x44514025  OR.L	R5, R2, #2
0x110C	0x4422D00D  BEXTU.L	R2, R5, #256
; buffer end address is: 8 (R2)
0x1110	0x4471500D  BEXTU.L	R7, R2, #256
0x1114	0x00300447  JMP	L_write_pixel284
L__write_pixel292:
;matrixrgb_firmware.c, 1377 :: 		if ( green > 0 )
0x1118	0x4471500D  BEXTU.L	R7, R2, #256
;matrixrgb_firmware.c, 1378 :: 		buffer |= 0x02;
L_write_pixel284:
;matrixrgb_firmware.c, 1379 :: 		if ( blue > 0 )
; buffer start address is: 28 (R7)
0x111C	0x59E24002  CMP.B	R4, #0
0x1120	0x01A0044C  JMPC	R30, A, #0, L__write_pixel293
; blue end address is: 16 (R4)
;matrixrgb_firmware.c, 1380 :: 		buffer |= 0x01;
0x1124	0x4473C015  OR.L	R7, R7, #1
0x1128	0x4473D00D  BEXTU.L	R7, R7, #256
; buffer end address is: 28 (R7)
0x112C	0x0030044C  JMP	L_write_pixel285
L__write_pixel293:
;matrixrgb_firmware.c, 1379 :: 		if ( blue > 0 )
;matrixrgb_firmware.c, 1380 :: 		buffer |= 0x01;
L_write_pixel285:
;matrixrgb_firmware.c, 1382 :: 		FB[ get_coord_index( row, column ) ] = buffer;
; buffer start address is: 28 (R7)
; column end address is: 4 (R1)
; row end address is: 0 (R0)
0x1130	0x00340349  CALL	matrixrgb_firmware_get_coord_index+0
0x1134	0xC450EB48  LDA.L	R5, _FB+0
0x1138	0x44528000  ADD.L	R5, R5, R0
0x113C	0xB0538000  STI.B	R5, #0, R7
; buffer end address is: 28 (R7)
;matrixrgb_firmware.c, 1384 :: 		}
L_end_write_pixel:
0x1140	0xA0000000  RETURN	
; end of _write_pixel
_refresh:
;matrixrgb_firmware.c, 676 :: 		void refresh( void )
;matrixrgb_firmware.c, 681 :: 		reset_row();
0x0E10	0x00340232  CALL	_reset_row+0
;matrixrgb_firmware.c, 682 :: 		for ( i = 0, j = 8; i < 8; i++, j++ )
; i start address is: 28 (R7)
0x0E14	0x64700000  LDK.L	R7, #0
; j start address is: 24 (R6)
0x0E18	0x64600008  LDK.L	R6, #8
; i end address is: 28 (R7)
; j end address is: 24 (R6)
L_refresh65:
; j start address is: 24 (R6)
; i start address is: 28 (R7)
0x0E1C	0x59E3C082  CMP.B	R7, #8
0x0E20	0x006003EC  JMPC	R30, C, #0, L_refresh66
;matrixrgb_firmware.c, 684 :: 		Latch_Off();
0x0E24	0xC4010088  LDA.L	R0, GPIO_PIN44_bit+0
0x0E28	0x440042CB  BINS.L	R0, R0, #BitPos(GPIO_PIN44_bit+0)=0
0x0E2C	0xBC010088  STA.L	GPIO_PIN44_bit+0, R0
;matrixrgb_firmware.c, 685 :: 		for ( p = 0; p < shift_reg; p++ )
; p start address is: 32 (R8)
0x0E30	0x64800000  LDK.L	R8, #0
; p end address is: 32 (R8)
; i end address is: 28 (R7)
; j end address is: 24 (R6)
L_refresh68:
; p start address is: 32 (R8)
; i start address is: 28 (R7)
; j start address is: 24 (R6)
0x0E34	0xC400EB50  LDA.L	R0, _shift_reg+0
0x0E38	0x5DE40002  CMP.L	R8, R0
0x0E3C	0x006003E3  JMPC	R30, C, #0, L_refresh69
;matrixrgb_firmware.c, 687 :: 		Led_Matrix_Data = 0;
0x0E40	0x64000000  LDK.L	R0, #0
0x0E44	0xB8010085  STA.B	GPIO_PORT_08_15+0, R0
;matrixrgb_firmware.c, 688 :: 		Led_Matrix_Data |= ( FB[( shift_reg * j ) + p] & 4 ) << 1;
0x0E48	0xC450EB50  LDA.L	R5, _shift_reg+0
0x0E4C	0xF4028068  MUL.L	R0, R5, R6
0x0E50	0x44000080  ADD.L	R0, R0, R8
0x0E54	0xC440EB48  LDA.L	R4, _FB+0
0x0E58	0x44320000  ADD.L	R3, R4, R0
0x0E5C	0xA8018000  LDI.B	R0, R3, #0
0x0E60	0x44004044  AND.L	R0, R0, #4
0x0E64	0x4400500D  BEXTU.L	R0, R0, #256
0x0E68	0x44204018  ASHL.L	R2, R0, #1
0x0E6C	0xB8210085  STA.B	GPIO_PORT_08_15+0, R2
;matrixrgb_firmware.c, 689 :: 		Led_Matrix_Data |= ( FB[( shift_reg * j ) + p] & 2 ) << 3;
0x0E70	0xA8018000  LDI.B	R0, R3, #0
0x0E74	0x44004024  AND.L	R0, R0, #2
0x0E78	0x4400500D  BEXTU.L	R0, R0, #256
0x0E7C	0x44104038  ASHL.L	R1, R0, #3
0x0E80	0x4410C00D  BEXTU.L	R1, R1, #0
0x0E84	0x4401500D  BEXTU.L	R0, R2, #256
0x0E88	0x44200015  OR.L	R2, R0, R1
0x0E8C	0xB8210085  STA.B	GPIO_PORT_08_15+0, R2
;matrixrgb_firmware.c, 690 :: 		Led_Matrix_Data |= ( FB[( shift_reg * j ) + p] & 1 ) << 5;
0x0E90	0xA8018000  LDI.B	R0, R3, #0
0x0E94	0x44004014  AND.L	R0, R0, #1
0x0E98	0x4400500D  BEXTU.L	R0, R0, #256
0x0E9C	0x44104058  ASHL.L	R1, R0, #5
0x0EA0	0x4410C00D  BEXTU.L	R1, R1, #0
0x0EA4	0x4401500D  BEXTU.L	R0, R2, #256
0x0EA8	0x44300015  OR.L	R3, R0, R1
0x0EAC	0xB8310085  STA.B	GPIO_PORT_08_15+0, R3
;matrixrgb_firmware.c, 691 :: 		Led_Matrix_Data |= ( FB[( shift_reg * i ) + p] & 4 ) >> 2;
0x0EB0	0xF4028078  MUL.L	R0, R5, R7
0x0EB4	0x44000080  ADD.L	R0, R0, R8
0x0EB8	0x44220000  ADD.L	R2, R4, R0
0x0EBC	0xA8010000  LDI.B	R0, R2, #0
0x0EC0	0x44004044  AND.L	R0, R0, #4
0x0EC4	0x4400500D  BEXTU.L	R0, R0, #256
0x0EC8	0x44104029  LSHR.L	R1, R0, #2
0x0ECC	0x4410D00D  BEXTU.L	R1, R1, #256
0x0ED0	0x4401D00D  BEXTU.L	R0, R3, #256
0x0ED4	0x44100015  OR.L	R1, R0, R1
0x0ED8	0x4410D00D  BEXTU.L	R1, R1, #256
0x0EDC	0xB8110085  STA.B	GPIO_PORT_08_15+0, R1
;matrixrgb_firmware.c, 692 :: 		Led_Matrix_Data |= ( FB[( shift_reg * i ) + p] & 2 );
0x0EE0	0xA8010000  LDI.B	R0, R2, #0
0x0EE4	0x44004024  AND.L	R0, R0, #2
0x0EE8	0x4400500D  BEXTU.L	R0, R0, #256
0x0EEC	0x44108005  OR.L	R1, R1, R0
0x0EF0	0x4410D00D  BEXTU.L	R1, R1, #256
0x0EF4	0xB8110085  STA.B	GPIO_PORT_08_15+0, R1
;matrixrgb_firmware.c, 693 :: 		Led_Matrix_Data |= ( FB[( shift_reg * i ) + p] & 1 ) << 2;
0x0EF8	0xA8010000  LDI.B	R0, R2, #0
0x0EFC	0x44004014  AND.L	R0, R0, #1
0x0F00	0x4400500D  BEXTU.L	R0, R0, #256
0x0F04	0x44004028  ASHL.L	R0, R0, #2
0x0F08	0x4400400D  BEXTU.L	R0, R0, #0
0x0F0C	0x44008005  OR.L	R0, R1, R0
0x0F10	0xB8010085  STA.B	GPIO_PORT_08_15+0, R0
;matrixrgb_firmware.c, 694 :: 		Clk_Toggle();
0x0F14	0x6DC003CB  LPM.L	R28, $+24
0x0F18	0x44004000  NOP	
L_refresh71:
0x0F1C	0x45CE4012  SUB.L	R28, R28, #1
0x0F20	0x5DEE4002  CMP.L	R28, #0
0x0F24	0x002003C7  JMPC	R30, Z, #0, L_refresh71
0x0F28	0x003003CC  JMP	$+8
0x0F2C	0x0000001F  	#31
0x0F30	0x44004000  NOP	
0x0F34	0x44004000  NOP	
0x0F38	0xC4010088  LDA.L	R0, GPIO_PIN45_bit+0
0x0F3C	0x440062DB  BINS.L	R0, R0, #BitPos(GPIO_PIN45_bit+0)=1
0x0F40	0xBC010088  STA.L	GPIO_PIN45_bit+0, R0
0x0F44	0x44004000  NOP	
0x0F48	0x44004000  NOP	
0x0F4C	0x44004000  NOP	
0x0F50	0x6DC003DA  LPM.L	R28, $+24
0x0F54	0x44004000  NOP	
L_refresh73:
0x0F58	0x45CE4012  SUB.L	R28, R28, #1
0x0F5C	0x5DEE4002  CMP.L	R28, #0
0x0F60	0x002003D6  JMPC	R30, Z, #0, L_refresh73
0x0F64	0x003003DB  JMP	$+8
0x0F68	0x0000001F  	#31
0x0F6C	0x44004000  NOP	
0x0F70	0x44004000  NOP	
0x0F74	0xC4010088  LDA.L	R0, GPIO_PIN45_bit+0
0x0F78	0x440042DB  BINS.L	R0, R0, #BitPos(GPIO_PIN45_bit+0)=0
0x0F7C	0xBC010088  STA.L	GPIO_PIN45_bit+0, R0
;matrixrgb_firmware.c, 685 :: 		for ( p = 0; p < shift_reg; p++ )
0x0F80	0x44844010  ADD.L	R8, R8, #1
0x0F84	0x4484400D  BEXTU.L	R8, R8, #0
;matrixrgb_firmware.c, 695 :: 		}
; p end address is: 32 (R8)
0x0F88	0x0030038D  JMP	L_refresh68
L_refresh69:
;matrixrgb_firmware.c, 696 :: 		inc_row();
0x0F8C	0x0034020E  CALL	_inc_row+0
;matrixrgb_firmware.c, 697 :: 		Latch_On();
0x0F90	0xC4010088  LDA.L	R0, GPIO_PIN44_bit+0
0x0F94	0x440062CB  BINS.L	R0, R0, #BitPos(GPIO_PIN44_bit+0)=1
0x0F98	0xBC010088  STA.L	GPIO_PIN44_bit+0, R0
;matrixrgb_firmware.c, 682 :: 		for ( i = 0, j = 8; i < 8; i++, j++ )
0x0F9C	0x4473C010  ADD.L	R7, R7, #1
0x0FA0	0x4473D00D  BEXTU.L	R7, R7, #256
0x0FA4	0x44634010  ADD.L	R6, R6, #1
0x0FA8	0x4463500D  BEXTU.L	R6, R6, #256
;matrixrgb_firmware.c, 698 :: 		}
; i end address is: 28 (R7)
; j end address is: 24 (R6)
0x0FAC	0x00300387  JMP	L_refresh65
L_refresh66:
;matrixrgb_firmware.c, 699 :: 		}
L_end_refresh:
0x0FB0	0xA0000000  RETURN	
; end of _refresh
_reset_row:
;matrixrgb_firmware.c, 725 :: 		void reset_row( void )
;matrixrgb_firmware.c, 727 :: 		currRow = ROW_ONE;
0x08C8	0x6400000F  LDK.L	R0, #15
0x08CC	0xB80000A0  STA.B	_currRow+0, R0
;matrixrgb_firmware.c, 729 :: 		Led_Matrix_OE = 1;
0x08D0	0xC4010088  LDA.L	R0, GPIO_PIN52_bit+0
0x08D4	0x4400634B  BINS.L	R0, R0, #BitPos(GPIO_PIN52_bit+0)=1
0x08D8	0xBC010088  STA.L	GPIO_PIN52_bit+0, R0
;matrixrgb_firmware.c, 730 :: 		Led_Matrix_A = currRow;
0x08DC	0xC4010088  LDA.L	R0, GPIO_PIN32_bit+0
0x08E0	0x4400620B  BINS.L	R0, R0, #BitPos(GPIO_PIN32_bit+0)=15
0x08E4	0xBC010088  STA.L	GPIO_PIN32_bit+0, R0
;matrixrgb_firmware.c, 731 :: 		Led_Matrix_B = currRow >> 1;
0x08E8	0xC02000A0  LDA.B	R2, _currRow+0
0x08EC	0x44114019  LSHR.L	R1, R2, #1
0x08F0	0xC4010088  LDA.L	R0, GPIO_PIN33_bit+0
0x08F4	0x45E0C213  LDL.L	R30, R1, #BitPos(GPIO_PIN33_bit+0)
0x08F8	0x440001EB  BINS.L	R0, R0, R30
0x08FC	0xBC010088  STA.L	GPIO_PIN33_bit+0, R0
;matrixrgb_firmware.c, 732 :: 		Led_Matrix_C = currRow >> 2;
0x0900	0x44114029  LSHR.L	R1, R2, #2
0x0904	0xC4010088  LDA.L	R0, GPIO_PIN34_bit+0
0x0908	0x45E0C223  LDL.L	R30, R1, #BitPos(GPIO_PIN34_bit+0)
0x090C	0x440001EB  BINS.L	R0, R0, R30
0x0910	0xBC010088  STA.L	GPIO_PIN34_bit+0, R0
;matrixrgb_firmware.c, 733 :: 		Led_Matrix_D = currRow >> 3;
0x0914	0x44114039  LSHR.L	R1, R2, #3
0x0918	0xC4010088  LDA.L	R0, GPIO_PIN35_bit+0
0x091C	0x45E0C233  LDL.L	R30, R1, #BitPos(GPIO_PIN35_bit+0)
0x0920	0x440001EB  BINS.L	R0, R0, R30
0x0924	0xBC010088  STA.L	GPIO_PIN35_bit+0, R0
;matrixrgb_firmware.c, 738 :: 		Led_Matrix_OE = 0;
0x0928	0xC4010088  LDA.L	R0, GPIO_PIN52_bit+0
0x092C	0x4400434B  BINS.L	R0, R0, #BitPos(GPIO_PIN52_bit+0)=0
0x0930	0xBC010088  STA.L	GPIO_PIN52_bit+0, R0
;matrixrgb_firmware.c, 741 :: 		}
L_end_reset_row:
0x0934	0xA0000000  RETURN	
; end of _reset_row
_inc_row:
;matrixrgb_firmware.c, 701 :: 		void inc_row( void )
;matrixrgb_firmware.c, 704 :: 		if (currRow == ROW_EIGHT )
0x0838	0xC00000A0  LDA.B	R0, _currRow+0
0x083C	0x59E04082  CMP.B	R0, #8
0x0840	0x00200214  JMPC	R30, Z, #0, L_inc_row75
;matrixrgb_firmware.c, 705 :: 		currRow = ROW_ONE;
0x0844	0x6400000F  LDK.L	R0, #15
0x0848	0xB80000A0  STA.B	_currRow+0, R0
0x084C	0x00300217  JMP	L_inc_row76
L_inc_row75:
;matrixrgb_firmware.c, 707 :: 		currRow++;
0x0850	0xC00000A0  LDA.B	R0, _currRow+0
0x0854	0x44004010  ADD.L	R0, R0, #1
0x0858	0xB80000A0  STA.B	_currRow+0, R0
L_inc_row76:
;matrixrgb_firmware.c, 711 :: 		Led_Matrix_OE = 1;
0x085C	0xC4010088  LDA.L	R0, GPIO_PIN52_bit+0
0x0860	0x4400634B  BINS.L	R0, R0, #BitPos(GPIO_PIN52_bit+0)=1
0x0864	0xBC010088  STA.L	GPIO_PIN52_bit+0, R0
;matrixrgb_firmware.c, 712 :: 		Led_Matrix_A = currRow;
0x0868	0xC02000A0  LDA.B	R2, _currRow+0
0x086C	0xC4010088  LDA.L	R0, GPIO_PIN32_bit+0
0x0870	0x45E14203  LDL.L	R30, R2, #BitPos(GPIO_PIN32_bit+0)
0x0874	0x440001EB  BINS.L	R0, R0, R30
0x0878	0xBC010088  STA.L	GPIO_PIN32_bit+0, R0
;matrixrgb_firmware.c, 713 :: 		Led_Matrix_B = currRow >> 1;
0x087C	0x44114019  LSHR.L	R1, R2, #1
0x0880	0xC4010088  LDA.L	R0, GPIO_PIN33_bit+0
0x0884	0x45E0C213  LDL.L	R30, R1, #BitPos(GPIO_PIN33_bit+0)
0x0888	0x440001EB  BINS.L	R0, R0, R30
0x088C	0xBC010088  STA.L	GPIO_PIN33_bit+0, R0
;matrixrgb_firmware.c, 714 :: 		Led_Matrix_C = currRow >> 2;
0x0890	0x44114029  LSHR.L	R1, R2, #2
0x0894	0xC4010088  LDA.L	R0, GPIO_PIN34_bit+0
0x0898	0x45E0C223  LDL.L	R30, R1, #BitPos(GPIO_PIN34_bit+0)
0x089C	0x440001EB  BINS.L	R0, R0, R30
0x08A0	0xBC010088  STA.L	GPIO_PIN34_bit+0, R0
;matrixrgb_firmware.c, 715 :: 		Led_Matrix_D = currRow >> 3;
0x08A4	0x44114039  LSHR.L	R1, R2, #3
0x08A8	0xC4010088  LDA.L	R0, GPIO_PIN35_bit+0
0x08AC	0x45E0C233  LDL.L	R30, R1, #BitPos(GPIO_PIN35_bit+0)
0x08B0	0x440001EB  BINS.L	R0, R0, R30
0x08B4	0xBC010088  STA.L	GPIO_PIN35_bit+0, R0
;matrixrgb_firmware.c, 720 :: 		Led_Matrix_OE = 0;
0x08B8	0xC4010088  LDA.L	R0, GPIO_PIN52_bit+0
0x08BC	0x4400434B  BINS.L	R0, R0, #BitPos(GPIO_PIN52_bit+0)=0
0x08C0	0xBC010088  STA.L	GPIO_PIN52_bit+0, R0
;matrixrgb_firmware.c, 723 :: 		}
L_end_inc_row:
0x08C4	0xA0000000  RETURN	
; end of _inc_row
_Free:
;__Lib_MemManager.c, 218 :: 		void Free(char *P, unsigned long Size) {
; Size start address is: 4 (R1)
; P start address is: 0 (R0)
; Size end address is: 4 (R1)
; P end address is: 0 (R0)
; P start address is: 0 (R0)
; Size start address is: 4 (R1)
;__Lib_MemManager.c, 222 :: 		if ((MM_Error_) || (P == NULL))
0x1EFC	0xC020EBF6  LDA.B	R2, _MM_Error_+0
0x1F00	0x59E14002  CMP.B	R2, #0
0x1F04	0x002007C5  JMPC	R30, Z, #0, L__Free110
0x1F08	0x5DE04002  CMP.L	R0, #0
0x1F0C	0x002807C5  JMPC	R30, Z, #1, L__Free109
0x1F10	0x003007C6  JMP	L_Free66
; P end address is: 0 (R0)
; Size end address is: 4 (R1)
L__Free110:
L__Free109:
;__Lib_MemManager.c, 223 :: 		return;
0x1F14	0x00300829  JMP	L_end_Free
L_Free66:
;__Lib_MemManager.c, 226 :: 		MergeHappened = 0;
; Size start address is: 4 (R1)
; P start address is: 0 (R0)
; MergeHappened start address is: 28 (R7)
0x1F18	0x64700000  LDK.L	R7, #0
;__Lib_MemManager.c, 227 :: 		for (i=0; i<NR_FREE_BLOCKS; i++) {
; i start address is: 32 (R8)
0x1F1C	0x64800000  LDK.L	R8, #0
; MergeHappened end address is: 28 (R7)
; i end address is: 32 (R8)
; P end address is: 0 (R0)
; Size end address is: 4 (R1)
0x1F20	0x44604000  MOVE.L	R6, R0
0x1F24	0x4450C000  MOVE.L	R5, R1
L_Free67:
; i start address is: 32 (R8)
; MergeHappened start address is: 28 (R7)
; Size start address is: 20 (R5)
; P start address is: 24 (R6)
0x1F28	0x5BE44142  CMP.S	R8, #20
0x1F2C	0x012807FE  JMPC	R30, GTE, #1, L__Free111
;__Lib_MemManager.c, 228 :: 		Tmp = MM_CheckBlocks(P, Size, MM_FreeMemTable[i].Pointer, MM_FreeMemTable[i].Size);
0x1F30	0x4424500D  BEXTU.L	R2, R8, #256
0x1F34	0x44314038  ASHL.L	R3, R2, #3
0x1F38	0x6420EB54  LDK.L	R2, #_MM_FreeMemTable+0
0x1F3C	0x44410030  ADD.L	R4, R2, R3
0x1F40	0x44224040  ADD.L	R2, R4, #4
0x1F44	0xAC210000  LDI.L	R2, R2, #0
0x1F48	0x44314000  MOVE.L	R3, R2
0x1F4C	0xAC220000  LDI.L	R2, R4, #0
0x1F50	0x4412C000  MOVE.L	R1, R5
0x1F54	0x44034000  MOVE.L	R0, R6
0x1F58	0x00340024  CALL	__Lib_MemManager_MM_CheckBlocks+0
; Tmp start address is: 4 (R1)
0x1F5C	0x4410500D  BEXTU.L	R1, R0, #256
;__Lib_MemManager.c, 229 :: 		if (Tmp == 1) { // block P is adjacent beneath block MM_FreeMemTable[i].Pointer
0x1F60	0x59E04012  CMP.B	R0, #1
0x1F64	0x002007ED  JMPC	R30, Z, #0, L_Free70
; MergeHappened end address is: 28 (R7)
; Tmp end address is: 4 (R1)
;__Lib_MemManager.c, 230 :: 		MM_FreeMemTable[i].Pointer = MM_FreeMemTable[i].Pointer - Size;
0x1F68	0x4424500D  BEXTU.L	R2, R8, #256
0x1F6C	0x44314038  ASHL.L	R3, R2, #3
0x1F70	0x6420EB54  LDK.L	R2, #_MM_FreeMemTable+0
0x1F74	0x44310030  ADD.L	R3, R2, R3
0x1F78	0xAC218000  LDI.L	R2, R3, #0
0x1F7C	0x44210052  SUB.L	R2, R2, R5
0x1F80	0xB4310000  STI.L	R3, #0, R2
;__Lib_MemManager.c, 231 :: 		MM_FreeMemTable[i].Size    = MM_FreeMemTable[i].Size    + Size;
0x1F84	0x4424500D  BEXTU.L	R2, R8, #256
; i end address is: 32 (R8)
0x1F88	0x44314038  ASHL.L	R3, R2, #3
0x1F8C	0x6420EB54  LDK.L	R2, #_MM_FreeMemTable+0
0x1F90	0x44210030  ADD.L	R2, R2, R3
0x1F94	0x44314040  ADD.L	R3, R2, #4
0x1F98	0xAC218000  LDI.L	R2, R3, #0
0x1F9C	0x44210050  ADD.L	R2, R2, R5
0x1FA0	0xB4310000  STI.L	R3, #0, R2
;__Lib_MemManager.c, 232 :: 		MergeHappened = 1;
; MergeHappened start address is: 0 (R0)
0x1FA4	0x64000001  LDK.L	R0, #1
;__Lib_MemManager.c, 233 :: 		MM_PossiblyFragmented = 1;
0x1FA8	0x64200001  LDK.L	R2, #1
0x1FAC	0xB820EBF5  STA.B	_MM_PossiblyFragmented+0, R2
;__Lib_MemManager.c, 234 :: 		break;
; MergeHappened end address is: 0 (R0)
0x1FB0	0x003007FF  JMP	L_Free68
;__Lib_MemManager.c, 235 :: 		}
L_Free70:
;__Lib_MemManager.c, 236 :: 		else if (Tmp == 2) { // block P is adjacent above block MM_FreeMemTable[i].Pointer
; i start address is: 32 (R8)
; Tmp start address is: 4 (R1)
; MergeHappened start address is: 28 (R7)
0x1FB4	0x59E0C022  CMP.B	R1, #2
0x1FB8	0x002007FB  JMPC	R30, Z, #0, L_Free72
; MergeHappened end address is: 28 (R7)
; Tmp end address is: 4 (R1)
;__Lib_MemManager.c, 237 :: 		MM_FreeMemTable[i].Size  = MM_FreeMemTable[i].Size + Size;
0x1FBC	0x4424500D  BEXTU.L	R2, R8, #256
; i end address is: 32 (R8)
0x1FC0	0x44314038  ASHL.L	R3, R2, #3
0x1FC4	0x6420EB54  LDK.L	R2, #_MM_FreeMemTable+0
0x1FC8	0x44210030  ADD.L	R2, R2, R3
0x1FCC	0x44314040  ADD.L	R3, R2, #4
0x1FD0	0xAC218000  LDI.L	R2, R3, #0
0x1FD4	0x44210050  ADD.L	R2, R2, R5
0x1FD8	0xB4310000  STI.L	R3, #0, R2
;__Lib_MemManager.c, 238 :: 		MergeHappened = 1;
; MergeHappened start address is: 0 (R0)
0x1FDC	0x64000001  LDK.L	R0, #1
;__Lib_MemManager.c, 239 :: 		MM_PossiblyFragmented = 1;
0x1FE0	0x64200001  LDK.L	R2, #1
0x1FE4	0xB820EBF5  STA.B	_MM_PossiblyFragmented+0, R2
;__Lib_MemManager.c, 240 :: 		break;
; MergeHappened end address is: 0 (R0)
0x1FE8	0x003007FF  JMP	L_Free68
;__Lib_MemManager.c, 241 :: 		}
L_Free72:
;__Lib_MemManager.c, 227 :: 		for (i=0; i<NR_FREE_BLOCKS; i++) {
; i start address is: 32 (R8)
; MergeHappened start address is: 28 (R7)
0x1FEC	0x44844010  ADD.L	R8, R8, #1
0x1FF0	0x4484500D  BEXTU.L	R8, R8, #256
;__Lib_MemManager.c, 242 :: 		}
; MergeHappened end address is: 28 (R7)
; i end address is: 32 (R8)
0x1FF4	0x003007CA  JMP	L_Free67
L__Free111:
;__Lib_MemManager.c, 227 :: 		for (i=0; i<NR_FREE_BLOCKS; i++) {
0x1FF8	0x4403D00D  BEXTU.L	R0, R7, #256
;__Lib_MemManager.c, 242 :: 		}
L_Free68:
;__Lib_MemManager.c, 244 :: 		if (!MergeHappened) { // entry could not be merged into the existing freelist, add entry to the freelist
; MergeHappened start address is: 0 (R0)
0x1FFC	0x59E04002  CMP.B	R0, #0
0x2000	0x00200825  JMPC	R30, Z, #0, L_Free73
; MergeHappened end address is: 0 (R0)
;__Lib_MemManager.c, 246 :: 		for (i=0; i<NR_FREE_BLOCKS; i++)
; i start address is: 0 (R0)
0x2004	0x64000000  LDK.L	R0, #0
; Size end address is: 20 (R5)
; P end address is: 24 (R6)
; i end address is: 0 (R0)
0x2008	0x4412C000  MOVE.L	R1, R5
0x200C	0x4440500D  BEXTU.L	R4, R0, #256
0x2010	0x44034000  MOVE.L	R0, R6
L_Free74:
; i start address is: 16 (R4)
; Size start address is: 4 (R1)
; P start address is: 0 (R0)
; P start address is: 0 (R0)
; P end address is: 0 (R0)
; Size start address is: 4 (R1)
; Size end address is: 4 (R1)
0x2014	0x5BE24142  CMP.S	R4, #20
0x2018	0x01280820  JMPC	R30, GTE, #1, L_Free75
; P end address is: 0 (R0)
; Size end address is: 4 (R1)
;__Lib_MemManager.c, 247 :: 		if (MM_FreeMemTable[i].Pointer == NULL) {  // free entry in the MM_FreeMemTable found
; Size start address is: 4 (R1)
; P start address is: 0 (R0)
0x201C	0x4422500D  BEXTU.L	R2, R4, #256
0x2020	0x44314038  ASHL.L	R3, R2, #3
0x2024	0x6420EB54  LDK.L	R2, #_MM_FreeMemTable+0
0x2028	0x44210030  ADD.L	R2, R2, R3
0x202C	0xAC210000  LDI.L	R2, R2, #0
0x2030	0x5DE14002  CMP.L	R2, #0
0x2034	0x0020081D  JMPC	R30, Z, #0, L_Free77
;__Lib_MemManager.c, 248 :: 		MM_FreeMemTable[i].Pointer = P;
0x2038	0x4422500D  BEXTU.L	R2, R4, #256
0x203C	0x44314038  ASHL.L	R3, R2, #3
0x2040	0x6420EB54  LDK.L	R2, #_MM_FreeMemTable+0
0x2044	0x44210030  ADD.L	R2, R2, R3
0x2048	0xB4200000  STI.L	R2, #0, R0
; P end address is: 0 (R0)
;__Lib_MemManager.c, 249 :: 		MM_FreeMemTable[i].Size    = Size;
0x204C	0x4422500D  BEXTU.L	R2, R4, #256
0x2050	0x44314038  ASHL.L	R3, R2, #3
0x2054	0x6420EB54  LDK.L	R2, #_MM_FreeMemTable+0
0x2058	0x44210030  ADD.L	R2, R2, R3
0x205C	0x44214040  ADD.L	R2, R2, #4
0x2060	0xB4208000  STI.L	R2, #0, R1
; Size end address is: 4 (R1)
;__Lib_MemManager.c, 250 :: 		MM_NrFreeBlocksUsed++;
0x2064	0xC020EBF4  LDA.B	R2, _MM_NrFreeBlocksUsed+0
0x2068	0x44214010  ADD.L	R2, R2, #1
0x206C	0xB820EBF4  STA.B	_MM_NrFreeBlocksUsed+0, R2
;__Lib_MemManager.c, 251 :: 		break;
0x2070	0x00300820  JMP	L_Free75
;__Lib_MemManager.c, 252 :: 		}
L_Free77:
;__Lib_MemManager.c, 246 :: 		for (i=0; i<NR_FREE_BLOCKS; i++)
; Size start address is: 4 (R1)
; P start address is: 0 (R0)
0x2074	0x44424010  ADD.L	R4, R4, #1
0x2078	0x4442500D  BEXTU.L	R4, R4, #256
;__Lib_MemManager.c, 252 :: 		}
; P end address is: 0 (R0)
; Size end address is: 4 (R1)
0x207C	0x00300805  JMP	L_Free74
L_Free75:
;__Lib_MemManager.c, 254 :: 		if (i == NR_FREE_BLOCKS) {
0x2080	0x5BE24142  CMP.S	R4, #20
0x2084	0x00200825  JMPC	R30, Z, #0, L_Free78
; i end address is: 16 (R4)
;__Lib_MemManager.c, 256 :: 		MM_Error_ = 1;
0x2088	0x64200001  LDK.L	R2, #1
0x208C	0xB820EBF6  STA.B	_MM_Error_+0, R2
;__Lib_MemManager.c, 257 :: 		return;
0x2090	0x00300829  JMP	L_end_Free
;__Lib_MemManager.c, 258 :: 		}
L_Free78:
;__Lib_MemManager.c, 259 :: 		}
L_Free73:
;__Lib_MemManager.c, 261 :: 		if (MM_NrFreeBlocksUsed == (NR_FREE_BLOCKS - 1)) // free list is full, defragment the list (merge entries)
0x2094	0xC020EBF4  LDA.B	R2, _MM_NrFreeBlocksUsed+0
0x2098	0x59E14132  CMP.B	R2, #19
0x209C	0x00200829  JMPC	R30, Z, #0, L_Free79
;__Lib_MemManager.c, 262 :: 		MM_Defragment();
0x20A0	0x0034013F  CALL	__Lib_MemManager_MM_Defragment+0
L_Free79:
;__Lib_MemManager.c, 265 :: 		}
L_end_Free:
0x20A4	0xA0000000  RETURN	
; end of _Free
_scroll_img_right_command:
;matrixrgb_firmware.c, 278 :: 		void scroll_img_right_command( void )
0x28C0	0x95D00004  LINK	LR, #4
;matrixrgb_firmware.c, 284 :: 		uint8_t buffer = 0;
;matrixrgb_firmware.c, 285 :: 		uint8_t speed  = 0;
;matrixrgb_firmware.c, 289 :: 		receive_data( &firm_buffer, 4 );
0x28C4	0x64100004  LDK.L	R1, #4
0x28C8	0x6400005F  LDK.L	R0, #_firm_buffer+0
0x28CC	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware.c, 290 :: 		wid_lo  = firm_buffer[0];
; wid_lo start address is: 20 (R5)
0x28D0	0xC050005F  LDA.B	R5, _firm_buffer+0
;matrixrgb_firmware.c, 291 :: 		wid_hi  = firm_buffer[1];
; wid_hi start address is: 24 (R6)
0x28D4	0xC0600060  LDA.B	R6, _firm_buffer+1
;matrixrgb_firmware.c, 292 :: 		hei_lo  = firm_buffer[2];
; hei_lo start address is: 12 (R3)
0x28D8	0xC0300061  LDA.B	R3, _firm_buffer+2
;matrixrgb_firmware.c, 293 :: 		hei_hi  = firm_buffer[3];
; hei_hi start address is: 16 (R4)
0x28DC	0xC0400062  LDA.B	R4, _firm_buffer+3
;matrixrgb_firmware.c, 294 :: 		receive_data( &firm_buffer, 1 );
0x28E0	0x64100001  LDK.L	R1, #1
0x28E4	0x6400005F  LDK.L	R0, #_firm_buffer+0
0x28E8	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware.c, 295 :: 		speed = firm_buffer[0];
; speed start address is: 40 (R10)
0x28EC	0xC0A0005F  LDA.B	R10, _firm_buffer+0
;matrixrgb_firmware.c, 297 :: 		img_w = wid_hi;
; img_w start address is: 4 (R1)
0x28F0	0x4413500D  BEXTU.L	R1, R6, #256
; wid_hi end address is: 24 (R6)
;matrixrgb_firmware.c, 298 :: 		img_w = ( img_w << 8 ) | wid_lo;
0x28F4	0x4400C00D  BEXTU.L	R0, R1, #0
; img_w end address is: 4 (R1)
0x28F8	0x44004088  ASHL.L	R0, R0, #8
0x28FC	0x4400400D  BEXTU.L	R0, R0, #0
0x2900	0x44100055  OR.L	R1, R0, R5
; wid_lo end address is: 20 (R5)
; img_w start address is: 44 (R11)
0x2904	0x44B0C00D  BEXTU.L	R11, R1, #0
;matrixrgb_firmware.c, 299 :: 		img_h = hei_hi;
; img_h start address is: 8 (R2)
0x2908	0x4422500D  BEXTU.L	R2, R4, #256
; hei_hi end address is: 16 (R4)
;matrixrgb_firmware.c, 300 :: 		img_h = ( img_h << 8 ) | hei_lo;
0x290C	0x4401400D  BEXTU.L	R0, R2, #0
; img_h end address is: 8 (R2)
0x2910	0x44004088  ASHL.L	R0, R0, #8
0x2914	0x4400400D  BEXTU.L	R0, R0, #0
0x2918	0x44000035  OR.L	R0, R0, R3
; hei_lo end address is: 12 (R3)
; img_h start address is: 48 (R12)
0x291C	0x44C0400D  BEXTU.L	R12, R0, #0
;matrixrgb_firmware.c, 301 :: 		allocate_image( img_w, img_h );
0x2920	0xB3F08000  STI.S	SP, #0, R1
0x2924	0x4410500D  BEXTU.L	R1, R0, #256
0x2928	0xA80F8000  LDI.B	R0, SP, #0
0x292C	0x0034082A  CALL	_allocate_image+0
;matrixrgb_firmware.c, 304 :: 		for ( i = 0; i < img_h; i++ )
; i start address is: 24 (R6)
0x2930	0x64600000  LDK.L	R6, #0
; speed end address is: 40 (R10)
; img_w end address is: 44 (R11)
; img_h end address is: 48 (R12)
; i end address is: 24 (R6)
0x2934	0x4435500D  BEXTU.L	R3, R10, #256
0x2938	0x44F5C00D  BEXTU.L	R15, R11, #0
0x293C	0x44B6400D  BEXTU.L	R11, R12, #0
L_scroll_img_right_command31:
; i start address is: 24 (R6)
; img_h start address is: 44 (R11)
; img_w start address is: 60 (R15)
; speed start address is: 12 (R3)
0x2940	0x5BE300B2  CMP.S	R6, R11
0x2944	0x00600A8E  JMPC	R30, C, #0, L_scroll_img_right_command32
;matrixrgb_firmware.c, 305 :: 		for ( j = 0; j < img_w; j++ )
; j start address is: 28 (R7)
0x2948	0x64700000  LDK.L	R7, #0
; img_h end address is: 44 (R11)
; img_w end address is: 60 (R15)
; speed end address is: 12 (R3)
; j end address is: 28 (R7)
; i end address is: 24 (R6)
0x294C	0x4455C00D  BEXTU.L	R5, R11, #0
0x2950	0x4447C00D  BEXTU.L	R4, R15, #0
L_scroll_img_right_command34:
; j start address is: 28 (R7)
; speed start address is: 12 (R3)
; img_w start address is: 16 (R4)
; img_h start address is: 20 (R5)
; i start address is: 24 (R6)
0x2954	0x5BE38042  CMP.S	R7, R4
0x2958	0x00600A89  JMPC	R30, C, #0, L_scroll_img_right_command35
;matrixrgb_firmware.c, 307 :: 		buffer = 0;
; buffer start address is: 32 (R8)
0x295C	0x64800000  LDK.L	R8, #0
;matrixrgb_firmware.c, 308 :: 		receive_data( &firm_buffer, 2 );
0x2960	0x64100002  LDK.L	R1, #2
0x2964	0x6400005F  LDK.L	R0, #_firm_buffer+0
0x2968	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware.c, 310 :: 		tmpCol = firm_buffer[0] + (firm_buffer[1] << 8);
0x296C	0xC0000060  LDA.B	R0, _firm_buffer+1
0x2970	0x44104088  ASHL.L	R1, R0, #8
0x2974	0x4410C00D  BEXTU.L	R1, R1, #0
0x2978	0xC000005F  LDA.B	R0, _firm_buffer+0
0x297C	0x44200010  ADD.L	R2, R0, R1
0x2980	0x4421400D  BEXTU.L	R2, R2, #0
;matrixrgb_firmware.c, 311 :: 		red = tmpCol >> 11;
0x2984	0x4401400D  BEXTU.L	R0, R2, #0
0x2988	0x441040B9  LSHR.L	R1, R0, #11
;matrixrgb_firmware.c, 312 :: 		green = (tmpCol & 0x7FF) >> 5;
0x298C	0x640007FF  LDK.L	R0, #2047
0x2990	0x44010004  AND.L	R0, R2, R0
0x2994	0x4400400D  BEXTU.L	R0, R0, #0
0x2998	0x44004059  LSHR.L	R0, R0, #5
; green start address is: 36 (R9)
0x299C	0x4490500D  BEXTU.L	R9, R0, #256
;matrixrgb_firmware.c, 313 :: 		blue = tmpCol & 0x1F;
0x29A0	0x440141F4  AND.L	R0, R2, #31
; blue start address is: 8 (R2)
0x29A4	0x4420500D  BEXTU.L	R2, R0, #256
;matrixrgb_firmware.c, 314 :: 		if ( ( red & 0x18 ) > 0 )
0x29A8	0x4400D00D  BEXTU.L	R0, R1, #256
0x29AC	0x44004184  AND.L	R0, R0, #24
0x29B0	0x59E04002  CMP.B	R0, #0
0x29B4	0x01A00A71  JMPC	R30, A, #0, L__scroll_img_right_command305
;matrixrgb_firmware.c, 315 :: 		buffer |= 0x04;
0x29B8	0x44144045  OR.L	R1, R8, #4
0x29BC	0x4410D00D  BEXTU.L	R1, R1, #256
; buffer end address is: 32 (R8)
; buffer start address is: 4 (R1)
; buffer end address is: 4 (R1)
0x29C0	0x00300A72  JMP	L_scroll_img_right_command37
L__scroll_img_right_command305:
;matrixrgb_firmware.c, 314 :: 		if ( ( red & 0x18 ) > 0 )
0x29C4	0x4414500D  BEXTU.L	R1, R8, #256
;matrixrgb_firmware.c, 315 :: 		buffer |= 0x04;
L_scroll_img_right_command37:
;matrixrgb_firmware.c, 316 :: 		if ( ( green & 0x38 ) > 0 )
; buffer start address is: 4 (R1)
0x29C8	0x4404C384  AND.L	R0, R9, #56
; green end address is: 36 (R9)
0x29CC	0x59E04002  CMP.B	R0, #0
0x29D0	0x01A00A78  JMPC	R30, A, #0, L__scroll_img_right_command306
;matrixrgb_firmware.c, 317 :: 		buffer |= 0x02;
0x29D4	0x4410C025  OR.L	R1, R1, #2
0x29D8	0x4410D00D  BEXTU.L	R1, R1, #256
; buffer end address is: 4 (R1)
0x29DC	0x00300A78  JMP	L_scroll_img_right_command38
L__scroll_img_right_command306:
;matrixrgb_firmware.c, 316 :: 		if ( ( green & 0x38 ) > 0 )
;matrixrgb_firmware.c, 317 :: 		buffer |= 0x02;
L_scroll_img_right_command38:
;matrixrgb_firmware.c, 318 :: 		if ( ( blue & 0x18 ) > 0 )
; buffer start address is: 4 (R1)
0x29E0	0x44014184  AND.L	R0, R2, #24
; blue end address is: 8 (R2)
0x29E4	0x59E04002  CMP.B	R0, #0
0x29E8	0x01A00A7E  JMPC	R30, A, #0, L__scroll_img_right_command307
;matrixrgb_firmware.c, 319 :: 		buffer |= 0x01;
0x29EC	0x4420C015  OR.L	R2, R1, #1
0x29F0	0x4421500D  BEXTU.L	R2, R2, #256
; buffer end address is: 4 (R1)
; buffer start address is: 8 (R2)
; buffer end address is: 8 (R2)
0x29F4	0x00300A7F  JMP	L_scroll_img_right_command39
L__scroll_img_right_command307:
;matrixrgb_firmware.c, 318 :: 		if ( ( blue & 0x18 ) > 0 )
0x29F8	0x4420D00D  BEXTU.L	R2, R1, #256
;matrixrgb_firmware.c, 319 :: 		buffer |= 0x01;
L_scroll_img_right_command39:
;matrixrgb_firmware.c, 320 :: 		img[( i * img_w ) + j] = buffer;
; buffer start address is: 8 (R2)
0x29FC	0xF4030048  MUL.L	R0, R6, R4
0x2A00	0x4400400D  BEXTU.L	R0, R0, #0
0x2A04	0x44100070  ADD.L	R1, R0, R7
0x2A08	0x4410C00D  BEXTU.L	R1, R1, #0
0x2A0C	0xC400EB4C  LDA.L	R0, matrixrgb_firmware_img+0
0x2A10	0x44000010  ADD.L	R0, R0, R1
0x2A14	0xB0010000  STI.B	R0, #0, R2
; buffer end address is: 8 (R2)
;matrixrgb_firmware.c, 305 :: 		for ( j = 0; j < img_w; j++ )
0x2A18	0x4473C010  ADD.L	R7, R7, #1
0x2A1C	0x4473C00D  BEXTU.L	R7, R7, #0
;matrixrgb_firmware.c, 321 :: 		}
; j end address is: 28 (R7)
0x2A20	0x00300A55  JMP	L_scroll_img_right_command34
L_scroll_img_right_command35:
;matrixrgb_firmware.c, 304 :: 		for ( i = 0; i < img_h; i++ )
0x2A24	0x44634010  ADD.L	R6, R6, #1
0x2A28	0x4463400D  BEXTU.L	R6, R6, #0
;matrixrgb_firmware.c, 321 :: 		}
; img_w end address is: 16 (R4)
; img_h end address is: 20 (R5)
; i end address is: 24 (R6)
0x2A2C	0x44F2400D  BEXTU.L	R15, R4, #0
0x2A30	0x44B2C00D  BEXTU.L	R11, R5, #0
0x2A34	0x00300A50  JMP	L_scroll_img_right_command31
L_scroll_img_right_command32:
;matrixrgb_firmware.c, 322 :: 		scroll_image_onto_left( img, img_w, img_h, speed );
; img_w start address is: 60 (R15)
; img_h start address is: 44 (R11)
0x2A38	0xC400EB4C  LDA.L	R0, matrixrgb_firmware_img+0
; speed end address is: 12 (R3)
0x2A3C	0x4425D00D  BEXTU.L	R2, R11, #256
0x2A40	0x4417D00D  BEXTU.L	R1, R15, #256
0x2A44	0x00340758  CALL	_scroll_image_onto_left+0
;matrixrgb_firmware.c, 325 :: 		Free( img, (img_w * img_h) );
0x2A48	0xF41780B8  MUL.L	R1, R15, R11
0x2A4C	0x4410C00D  BEXTU.L	R1, R1, #0
; img_h end address is: 44 (R11)
; img_w end address is: 60 (R15)
0x2A50	0xC400EB4C  LDA.L	R0, matrixrgb_firmware_img+0
0x2A54	0x003407BF  CALL	_Free+0
;matrixrgb_firmware.c, 326 :: 		}
L_end_scroll_img_right_command:
0x2A58	0x99D00000  UNLINK	LR
0x2A5C	0xA0000000  RETURN	
; end of _scroll_img_right_command
_scroll_image_onto_left:
;matrixrgb_firmware.c, 905 :: 		void scroll_image_onto_left( uint8_t *bmp, uint8_t width, uint8_t height, uint16_t speed )
; m start address is: 48 (R12)
; height start address is: 8 (R2)
0x1D60	0x95D0000C  LINK	LR, #12
;matrixrgb_firmware.c, 912 :: 		for ( m = 1; m <= width; m++ )
;matrixrgb_firmware.c, 905 :: 		void scroll_image_onto_left( uint8_t *bmp, uint8_t width, uint8_t height, uint16_t speed )
0x1D64	0xB5F00000  STI.L	SP, #0, R0
0x1D68	0xB1F08004  STI.B	SP, #4, R1
0x1D6C	0x44A1500D  BEXTU.L	R10, R2, #256
;matrixrgb_firmware.c, 912 :: 		for ( m = 1; m <= width; m++ )
;matrixrgb_firmware.c, 905 :: 		void scroll_image_onto_left( uint8_t *bmp, uint8_t width, uint8_t height, uint16_t speed )
0x1D70	0xB3F18008  STI.S	SP, #8, R3
; m end address is: 48 (R12)
; height end address is: 8 (R2)
; height start address is: 40 (R10)
;matrixrgb_firmware.c, 908 :: 		uint16_t i = 0, j = 64;
;matrixrgb_firmware.c, 909 :: 		uint8_t buffer = 0;
;matrixrgb_firmware.c, 912 :: 		for ( m = 1; m <= width; m++ )
; m start address is: 48 (R12)
0x1D74	0x64C00001  LDK.L	R12, #1
; height end address is: 40 (R10)
; m end address is: 48 (R12)
L_scroll_image_onto_left124:
; m start address is: 48 (R12)
; height start address is: 40 (R10)
0x1D78	0xA84F8004  LDI.B	R4, SP, #4
0x1D7C	0x59E60042  CMP.B	R12, R4
0x1D80	0x01A80789  JMPC	R30, A, #1, L_scroll_image_onto_left125
;matrixrgb_firmware.c, 914 :: 		display_shift_right();
0x1D84	0x003403ED  CALL	_display_shift_right+0
;matrixrgb_firmware.c, 916 :: 		for ( k = 0; k < height; k++ )
; k start address is: 32 (R8)
0x1D88	0x64800000  LDK.L	R8, #0
; k end address is: 32 (R8)
; height end address is: 40 (R10)
; m end address is: 48 (R12)
L_scroll_image_onto_left127:
; k start address is: 32 (R8)
; height start address is: 40 (R10)
; m start address is: 48 (R12)
0x1D8C	0x59E400A2  CMP.B	R8, R10
0x1D90	0x0060077B  JMPC	R30, C, #0, L_scroll_image_onto_left128
;matrixrgb_firmware.c, 918 :: 		buffer = bmp[( ( k + 1 ) * width ) - m];
0x1D94	0x44544010  ADD.L	R5, R8, #1
0x1D98	0x4452C00C  BEXTS.L	R5, R5, #0
0x1D9C	0xA84F8004  LDI.B	R4, SP, #4
0x1DA0	0xF4428048  MUL.L	R4, R5, R4
0x1DA4	0x4442400C  BEXTS.L	R4, R4, #0
0x1DA8	0x445200C2  SUB.L	R5, R4, R12
0x1DAC	0x4452C00C  BEXTS.L	R5, R5, #0
0x1DB0	0xAC4F8000  LDI.L	R4, SP, #0
0x1DB4	0x44420050  ADD.L	R4, R4, R5
0x1DB8	0xA8420000  LDI.B	R4, R4, #0
;matrixrgb_firmware.c, 919 :: 		red   = ( buffer & 0x04 );
0x1DBC	0x44624044  AND.L	R6, R4, #4
;matrixrgb_firmware.c, 920 :: 		green = ( buffer & 0x02 );
0x1DC0	0x44524024  AND.L	R5, R4, #2
;matrixrgb_firmware.c, 921 :: 		blue  = ( buffer & 0x01 );
0x1DC4	0x44424014  AND.L	R4, R4, #1
;matrixrgb_firmware.c, 922 :: 		write_pixel( k, 0, red, green, blue );
0x1DC8	0x4432D00D  BEXTU.L	R3, R5, #256
0x1DCC	0x4423500D  BEXTU.L	R2, R6, #256
0x1DD0	0x64100000  LDK.L	R1, #0
0x1DD4	0x4404500D  BEXTU.L	R0, R8, #256
0x1DD8	0x00340439  CALL	_write_pixel+0
;matrixrgb_firmware.c, 916 :: 		for ( k = 0; k < height; k++ )
0x1DDC	0x44444010  ADD.L	R4, R8, #1
; k end address is: 32 (R8)
; k start address is: 52 (R13)
0x1DE0	0x44D2500D  BEXTU.L	R13, R4, #256
;matrixrgb_firmware.c, 923 :: 		}
; k end address is: 52 (R13)
0x1DE4	0x4486D00D  BEXTU.L	R8, R13, #256
0x1DE8	0x00300763  JMP	L_scroll_image_onto_left127
L_scroll_image_onto_left128:
;matrixrgb_firmware.c, 925 :: 		for ( p = 0; p < speed; p++ )
; p start address is: 56 (R14)
0x1DEC	0x64E00000  LDK.L	R14, #0
; height end address is: 40 (R10)
; p end address is: 56 (R14)
; m end address is: 48 (R12)
0x1DF0	0x44D6500D  BEXTU.L	R13, R12, #256
0x1DF4	0x4497500D  BEXTU.L	R9, R14, #256
L_scroll_image_onto_left130:
; p start address is: 36 (R9)
; m start address is: 52 (R13)
; height start address is: 40 (R10)
0x1DF8	0xAA4F8008  LDI.S	R4, SP, #8
0x1DFC	0x5BE48042  CMP.S	R9, R4
0x1E00	0x00600786  JMPC	R30, C, #0, L_scroll_image_onto_left131
;matrixrgb_firmware.c, 926 :: 		refresh();
0x1E04	0x00340384  CALL	_refresh+0
;matrixrgb_firmware.c, 925 :: 		for ( p = 0; p < speed; p++ )
0x1E08	0x4444C010  ADD.L	R4, R9, #1
; p end address is: 36 (R9)
; p start address is: 56 (R14)
0x1E0C	0x44E2500D  BEXTU.L	R14, R4, #256
;matrixrgb_firmware.c, 926 :: 		refresh();
; p end address is: 56 (R14)
0x1E10	0x4497500D  BEXTU.L	R9, R14, #256
0x1E14	0x0030077E  JMP	L_scroll_image_onto_left130
L_scroll_image_onto_left131:
;matrixrgb_firmware.c, 912 :: 		for ( m = 1; m <= width; m++ )
0x1E18	0x4446C010  ADD.L	R4, R13, #1
; m end address is: 52 (R13)
; m start address is: 48 (R12)
0x1E1C	0x44C2500D  BEXTU.L	R12, R4, #256
;matrixrgb_firmware.c, 928 :: 		}
; height end address is: 40 (R10)
; m end address is: 48 (R12)
0x1E20	0x0030075E  JMP	L_scroll_image_onto_left124
L_scroll_image_onto_left125:
;matrixrgb_firmware.c, 930 :: 		}
L_end_scroll_image_onto_left:
0x1E24	0x99D00000  UNLINK	LR
0x1E28	0xA0000000  RETURN	
; end of _scroll_image_onto_left
_display_shift_right:
;matrixrgb_firmware.c, 1249 :: 		void display_shift_right( void )
0x0FB4	0x95D00004  LINK	LR, #4
;matrixrgb_firmware.c, 1251 :: 		uint16_t row          = 0;
;matrixrgb_firmware.c, 1252 :: 		uint16_t column       = 0;
;matrixrgb_firmware.c, 1253 :: 		uint16_t temp_col_one = 0;
;matrixrgb_firmware.c, 1254 :: 		uint16_t temp_col_two = 0;
;matrixrgb_firmware.c, 1255 :: 		uint8_t buffer        = 0;
;matrixrgb_firmware.c, 1257 :: 		for ( row = 0; row < p_height; row++ )
; row start address is: 28 (R7)
0x0FB8	0x64700000  LDK.L	R7, #0
; row end address is: 28 (R7)
L_display_shift_right245:
; row start address is: 28 (R7)
0x0FBC	0xC200EB44  LDA.S	R0, _p_height+0
0x0FC0	0x5BE38002  CMP.S	R7, R0
0x0FC4	0x00600410  JMPC	R30, C, #0, L_display_shift_right246
;matrixrgb_firmware.c, 1259 :: 		for ( column = ( p_width - 1 ); column > 0; column-- )
0x0FC8	0xC20000E2  LDA.S	R0, _p_width+0
0x0FCC	0x44804012  SUB.L	R8, R0, #1
0x0FD0	0x4484400D  BEXTU.L	R8, R8, #0
; column start address is: 32 (R8)
; column end address is: 32 (R8)
; row end address is: 28 (R7)
L_display_shift_right248:
; column start address is: 32 (R8)
; row start address is: 28 (R7)
0x0FD4	0x5BE44002  CMP.S	R8, #0
0x0FD8	0x01A0040A  JMPC	R30, A, #0, L_display_shift_right249
;matrixrgb_firmware.c, 1263 :: 		temp_col_two = column - 1;
0x0FDC	0x44044012  SUB.L	R0, R8, #1
; temp_col_two start address is: 36 (R9)
0x0FE0	0x4490400D  BEXTU.L	R9, R0, #0
;matrixrgb_firmware.c, 1264 :: 		FB[ get_coord_index( row, temp_col_one ) ] = FB[ get_coord_index( row, temp_col_two ) ];
0x0FE4	0x4414400D  BEXTU.L	R1, R8, #0
0x0FE8	0x4403C00D  BEXTU.L	R0, R7, #0
0x0FEC	0x00340349  CALL	matrixrgb_firmware_get_coord_index+0
0x0FF0	0xC410EB48  LDA.L	R1, _FB+0
0x0FF4	0x44008000  ADD.L	R0, R1, R0
0x0FF8	0xB5F00000  STI.L	SP, #0, R0
0x0FFC	0x4414C00D  BEXTU.L	R1, R9, #0
; temp_col_two end address is: 36 (R9)
0x1000	0x4403C00D  BEXTU.L	R0, R7, #0
0x1004	0x00340349  CALL	matrixrgb_firmware_get_coord_index+0
0x1008	0xC410EB48  LDA.L	R1, _FB+0
0x100C	0x44008000  ADD.L	R0, R1, R0
0x1010	0xA8100000  LDI.B	R1, R0, #0
0x1014	0xAC0F8000  LDI.L	R0, SP, #0
0x1018	0xB0008000  STI.B	R0, #0, R1
;matrixrgb_firmware.c, 1259 :: 		for ( column = ( p_width - 1 ); column > 0; column-- )
0x101C	0x44844012  SUB.L	R8, R8, #1
0x1020	0x4484400D  BEXTU.L	R8, R8, #0
;matrixrgb_firmware.c, 1265 :: 		}
; column end address is: 32 (R8)
0x1024	0x003003F5  JMP	L_display_shift_right248
L_display_shift_right249:
;matrixrgb_firmware.c, 1266 :: 		erase_pixel( row, 0 );
0x1028	0x64100000  LDK.L	R1, #0
0x102C	0x4403C00D  BEXTU.L	R0, R7, #0
0x1030	0x0034024E  CALL	_erase_pixel+0
;matrixrgb_firmware.c, 1257 :: 		for ( row = 0; row < p_height; row++ )
0x1034	0x4473C010  ADD.L	R7, R7, #1
0x1038	0x4473C00D  BEXTU.L	R7, R7, #0
;matrixrgb_firmware.c, 1267 :: 		}
; row end address is: 28 (R7)
0x103C	0x003003EF  JMP	L_display_shift_right245
L_display_shift_right246:
;matrixrgb_firmware.c, 1269 :: 		}
L_end_display_shift_right:
0x1040	0x99D00000  UNLINK	LR
0x1044	0xA0000000  RETURN	
; end of _display_shift_right
_write_pxl_command:
;matrixrgb_firmware.c, 328 :: 		void write_pxl_command( void )
0x2A60	0x95D00008  LINK	LR, #8
;matrixrgb_firmware.c, 334 :: 		receive_data( &firm_buffer, 7 );
0x2A64	0x64100007  LDK.L	R1, #7
0x2A68	0x6400005F  LDK.L	R0, #_firm_buffer+0
0x2A6C	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware.c, 335 :: 		row = firm_buffer[1];
; row start address is: 4 (R1)
0x2A70	0xC0100060  LDA.B	R1, _firm_buffer+1
;matrixrgb_firmware.c, 336 :: 		row = ( row << 8 ) | firm_buffer[0];
0x2A74	0x4400C00D  BEXTU.L	R0, R1, #0
; row end address is: 4 (R1)
0x2A78	0x44104088  ASHL.L	R1, R0, #8
0x2A7C	0x4410C00D  BEXTU.L	R1, R1, #0
0x2A80	0xC000005F  LDA.B	R0, _firm_buffer+0
0x2A84	0x44408005  OR.L	R4, R1, R0
;matrixrgb_firmware.c, 337 :: 		col = firm_buffer[3];
; col start address is: 4 (R1)
0x2A88	0xC0100062  LDA.B	R1, _firm_buffer+3
;matrixrgb_firmware.c, 338 :: 		col = ( col << 8 ) | firm_buffer[2];
0x2A8C	0x4400C00D  BEXTU.L	R0, R1, #0
; col end address is: 4 (R1)
0x2A90	0x44104088  ASHL.L	R1, R0, #8
0x2A94	0x4410C00D  BEXTU.L	R1, R1, #0
0x2A98	0xC0000061  LDA.B	R0, _firm_buffer+2
0x2A9C	0x44308005  OR.L	R3, R1, R0
;matrixrgb_firmware.c, 339 :: 		write_pixel( row, col, firm_buffer[4], firm_buffer[5], firm_buffer[6] );
0x2AA0	0xC0200065  LDA.B	R2, _firm_buffer+6
0x2AA4	0xC0100064  LDA.B	R1, _firm_buffer+5
0x2AA8	0xC0000063  LDA.B	R0, _firm_buffer+4
0x2AAC	0xB3F18000  STI.S	SP, #0, R3
0x2AB0	0xB1F00004  STI.B	SP, #4, R0
0x2AB4	0x4402400D  BEXTU.L	R0, R4, #0
0x2AB8	0x4441500D  BEXTU.L	R4, R2, #256
0x2ABC	0xA82F8004  LDI.B	R2, SP, #4
0x2AC0	0x4430D00D  BEXTU.L	R3, R1, #256
0x2AC4	0xAA1F8000  LDI.S	R1, SP, #0
0x2AC8	0x00340439  CALL	_write_pixel+0
;matrixrgb_firmware.c, 340 :: 		}
L_end_write_pxl_command:
0x2ACC	0x99D00000  UNLINK	LR
0x2AD0	0xA0000000  RETURN	
; end of _write_pxl_command
_write_pxl_img_command:
;matrixrgb_firmware.c, 343 :: 		void write_pxl_img_command( void )
0x2AD4	0x95D00008  LINK	LR, #8
;matrixrgb_firmware.c, 348 :: 		receive_data( &firm_buffer, 7 );
0x2AD8	0x64100007  LDK.L	R1, #7
0x2ADC	0x6400005F  LDK.L	R0, #_firm_buffer+0
0x2AE0	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware.c, 349 :: 		row = firm_buffer[1];
; row start address is: 4 (R1)
0x2AE4	0xC0100060  LDA.B	R1, _firm_buffer+1
;matrixrgb_firmware.c, 350 :: 		row = ( row << 8 ) | firm_buffer[0];
0x2AE8	0x4400C00D  BEXTU.L	R0, R1, #0
; row end address is: 4 (R1)
0x2AEC	0x44104088  ASHL.L	R1, R0, #8
0x2AF0	0x4410C00D  BEXTU.L	R1, R1, #0
0x2AF4	0xC000005F  LDA.B	R0, _firm_buffer+0
0x2AF8	0x44408005  OR.L	R4, R1, R0
;matrixrgb_firmware.c, 351 :: 		col = firm_buffer[3];
; col start address is: 4 (R1)
0x2AFC	0xC0100062  LDA.B	R1, _firm_buffer+3
;matrixrgb_firmware.c, 352 :: 		col = ( col << 8 ) | firm_buffer[2];
0x2B00	0x4400C00D  BEXTU.L	R0, R1, #0
; col end address is: 4 (R1)
0x2B04	0x44104088  ASHL.L	R1, R0, #8
0x2B08	0x4410C00D  BEXTU.L	R1, R1, #0
0x2B0C	0xC0000061  LDA.B	R0, _firm_buffer+2
0x2B10	0x44308005  OR.L	R3, R1, R0
;matrixrgb_firmware.c, 353 :: 		write_pixel_img( row, col, firm_buffer[4], firm_buffer[5], firm_buffer[6] );
0x2B14	0xC0200065  LDA.B	R2, _firm_buffer+6
0x2B18	0xC0100064  LDA.B	R1, _firm_buffer+5
0x2B1C	0xC0000063  LDA.B	R0, _firm_buffer+4
0x2B20	0xB3F18000  STI.S	SP, #0, R3
0x2B24	0xB1F00004  STI.B	SP, #4, R0
0x2B28	0x4402400D  BEXTU.L	R0, R4, #0
0x2B2C	0x4441500D  BEXTU.L	R4, R2, #256
0x2B30	0xA82F8004  LDI.B	R2, SP, #4
0x2B34	0x4430D00D  BEXTU.L	R3, R1, #256
0x2B38	0xAA1F8000  LDI.S	R1, SP, #0
0x2B3C	0x0034083B  CALL	_write_pixel_img+0
;matrixrgb_firmware.c, 354 :: 		}
L_end_write_pxl_img_command:
0x2B40	0x99D00000  UNLINK	LR
0x2B44	0xA0000000  RETURN	
; end of _write_pxl_img_command
_erase_pxl_command:
;matrixrgb_firmware.c, 357 :: 		void erase_pxl_command( void )
;matrixrgb_firmware.c, 362 :: 		receive_data( &firm_buffer, 4 );
0x2714	0x64100004  LDK.L	R1, #4
0x2718	0x6400005F  LDK.L	R0, #_firm_buffer+0
0x271C	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware.c, 363 :: 		row = firm_buffer[1];
; row start address is: 4 (R1)
0x2720	0xC0100060  LDA.B	R1, _firm_buffer+1
;matrixrgb_firmware.c, 364 :: 		row = ( row << 8 ) | firm_buffer[0];
0x2724	0x4400C00D  BEXTU.L	R0, R1, #0
; row end address is: 4 (R1)
0x2728	0x44104088  ASHL.L	R1, R0, #8
0x272C	0x4410C00D  BEXTU.L	R1, R1, #0
0x2730	0xC000005F  LDA.B	R0, _firm_buffer+0
0x2734	0x44208005  OR.L	R2, R1, R0
;matrixrgb_firmware.c, 365 :: 		col = firm_buffer[3];
; col start address is: 4 (R1)
0x2738	0xC0100062  LDA.B	R1, _firm_buffer+3
;matrixrgb_firmware.c, 366 :: 		col = ( col << 8 ) | firm_buffer[2];
0x273C	0x4400C00D  BEXTU.L	R0, R1, #0
; col end address is: 4 (R1)
0x2740	0x44104088  ASHL.L	R1, R0, #8
0x2744	0x4410C00D  BEXTU.L	R1, R1, #0
0x2748	0xC0000061  LDA.B	R0, _firm_buffer+2
0x274C	0x44008005  OR.L	R0, R1, R0
;matrixrgb_firmware.c, 367 :: 		erase_pixel( row, col );
0x2750	0x4410400D  BEXTU.L	R1, R0, #0
0x2754	0x4401400D  BEXTU.L	R0, R2, #0
0x2758	0x0034024E  CALL	_erase_pixel+0
;matrixrgb_firmware.c, 368 :: 		}
L_end_erase_pxl_command:
0x275C	0xA0000000  RETURN	
; end of _erase_pxl_command
_scroll_text_left_command:
;matrixrgb_firmware.c, 370 :: 		void scroll_text_left_command( void )
0x2760	0x95D00104  LINK	LR, #260
;matrixrgb_firmware.c, 372 :: 		uint8_t text[256] = { 0 };
0x2764	0x45BFC030  ADD.L	R27, SP, #3
0x2768	0x45ADD000  ADD.L	R26, R27, #256
0x276C	0x65C03F74  LDK.L	R28, #?ICSscroll_text_left_command_text_L0+0
0x2770	0x003402D0  CALL	___CC2DB+0
;matrixrgb_firmware.c, 373 :: 		char *ptr = text;
0x2774	0x446FC030  ADD.L	R6, SP, #3
; ptr start address is: 24 (R6)
;matrixrgb_firmware.c, 374 :: 		uint8_t i = 0;
;matrixrgb_firmware.c, 375 :: 		uint8_t size = 0;
;matrixrgb_firmware.c, 377 :: 		uint8_t speed = 0;
;matrixrgb_firmware.c, 379 :: 		receive_data( &firm_buffer, 1 );
0x2778	0x64100001  LDK.L	R1, #1
0x277C	0x6400005F  LDK.L	R0, #_firm_buffer+0
0x2780	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware.c, 380 :: 		size = firm_buffer[0];
; size start address is: 16 (R4)
0x2784	0xC040005F  LDA.B	R4, _firm_buffer+0
;matrixrgb_firmware.c, 381 :: 		receive_data( &firm_buffer, 3 );
0x2788	0x64100003  LDK.L	R1, #3
0x278C	0x6400005F  LDK.L	R0, #_firm_buffer+0
0x2790	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware.c, 382 :: 		my_color.red   = firm_buffer[0];
0x2794	0xC000005F  LDA.B	R0, _firm_buffer+0
0x2798	0xB1F00000  STI.B	SP, #0, R0
;matrixrgb_firmware.c, 383 :: 		my_color.green = firm_buffer[1];
0x279C	0xC0000060  LDA.B	R0, _firm_buffer+1
0x27A0	0xB1F00001  STI.B	SP, #1, R0
;matrixrgb_firmware.c, 384 :: 		my_color.blue  = firm_buffer[2];
0x27A4	0xC0000061  LDA.B	R0, _firm_buffer+2
0x27A8	0xB1F00002  STI.B	SP, #2, R0
;matrixrgb_firmware.c, 385 :: 		receive_data( &firm_buffer, 1 );
0x27AC	0x64100001  LDK.L	R1, #1
0x27B0	0x6400005F  LDK.L	R0, #_firm_buffer+0
0x27B4	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware.c, 386 :: 		speed = firm_buffer[0];
; speed start address is: 12 (R3)
0x27B8	0xC030005F  LDA.B	R3, _firm_buffer+0
;matrixrgb_firmware.c, 388 :: 		for ( i = 0; i < size; i++ )
; i start address is: 20 (R5)
0x27BC	0x64500000  LDK.L	R5, #0
; speed end address is: 12 (R3)
; size end address is: 16 (R4)
; ptr end address is: 24 (R6)
; i end address is: 20 (R5)
L_scroll_text_left_command40:
; i start address is: 20 (R5)
; speed start address is: 12 (R3)
; size start address is: 16 (R4)
; ptr start address is: 24 (R6)
0x27C0	0x59E28042  CMP.B	R5, R4
0x27C4	0x006009FB  JMPC	R30, C, #0, L_scroll_text_left_command41
;matrixrgb_firmware.c, 390 :: 		receive_data( &firm_buffer, 1 );
0x27C8	0x64100001  LDK.L	R1, #1
0x27CC	0x6400005F  LDK.L	R0, #_firm_buffer+0
0x27D0	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware.c, 391 :: 		*ptr++ = firm_buffer[0];
0x27D4	0xC000005F  LDA.B	R0, _firm_buffer+0
0x27D8	0xB0600000  STI.B	R6, #0, R0
0x27DC	0x44634010  ADD.L	R6, R6, #1
;matrixrgb_firmware.c, 388 :: 		for ( i = 0; i < size; i++ )
0x27E0	0x4452C010  ADD.L	R5, R5, #1
0x27E4	0x4452D00D  BEXTU.L	R5, R5, #256
;matrixrgb_firmware.c, 392 :: 		}
; size end address is: 16 (R4)
; ptr end address is: 24 (R6)
; i end address is: 20 (R5)
0x27E8	0x003009F0  JMP	L_scroll_text_left_command40
L_scroll_text_left_command41:
;matrixrgb_firmware.c, 394 :: 		scroll_text_left( text, my_color, speed );
0x27EC	0x440FC030  ADD.L	R0, SP, #3
0x27F0	0x4411D00D  BEXTU.L	R1, R3, #256
; speed end address is: 12 (R3)
0x27F4	0x45FFC042  SUB.L	SP, SP, #4
0x27F8	0x45EFC040  ADD.L	R30, SP, #4
0x27FC	0xF1FF4045  MEMCPY.B	SP, R30, #4
0x2800	0x003404AE  CALL	_scroll_text_left+0
0x2804	0x45FFC040  ADD.L	SP, SP, #4
;matrixrgb_firmware.c, 395 :: 		}
L_end_scroll_text_left_command:
0x2808	0x99D00000  UNLINK	LR
0x280C	0xA0000000  RETURN	
; end of _scroll_text_left_command
_scroll_text_left:
;matrixrgb_firmware.c, 994 :: 		void scroll_text_left( char *text, color_t color, uint16_t speed )
; speed start address is: 4 (R1)
; text start address is: 0 (R0)
0x12B8	0x95D00100  LINK	LR, #256
0x12BC	0x44204000  MOVE.L	R2, R0
; speed end address is: 4 (R1)
; text end address is: 0 (R0)
; text start address is: 8 (R2)
; speed start address is: 4 (R1)
;matrixrgb_firmware.c, 996 :: 		char *ptr = text;
; ptr start address is: 0 (R0)
0x12C0	0x44014000  MOVE.L	R0, R2
; text end address is: 8 (R2)
;matrixrgb_firmware.c, 997 :: 		uint8_t text_frame[256] = { 0 };
0x12C4	0x45BFC000  ADD.L	R27, SP, #0
0x12C8	0x45ADD000  ADD.L	R26, R27, #256
0x12CC	0x65C04074  LDK.L	R28, #?ICSscroll_text_left_text_frame_L0+0
0x12D0	0x003402D0  CALL	___CC2DB+0
;matrixrgb_firmware.c, 1000 :: 		uint8_t cnt = 0;
;matrixrgb_firmware.c, 1002 :: 		uint8_t color_buffer = 0;
; color_buffer start address is: 12 (R3)
0x12D4	0x64300000  LDK.L	R3, #0
;matrixrgb_firmware.c, 1004 :: 		if ( ptr == NULL )          //Sanity check
0x12D8	0x5DE04002  CMP.L	R0, #0
0x12DC	0x002004B9  JMPC	R30, Z, #0, L_scroll_text_left152
; speed end address is: 4 (R1)
; ptr end address is: 0 (R0)
; color_buffer end address is: 12 (R3)
;matrixrgb_firmware.c, 1005 :: 		return;
0x12E0	0x00300541  JMP	L_end_scroll_text_left
L_scroll_text_left152:
;matrixrgb_firmware.c, 1007 :: 		if ( color.red  > 0 )       //Create color for frame
; color_buffer start address is: 12 (R3)
; ptr start address is: 0 (R0)
; speed start address is: 4 (R1)
0x12E4	0x442FD080  ADD.L	R2, SP, #264
0x12E8	0xA8210000  LDI.B	R2, R2, #0
0x12EC	0x59E14002  CMP.B	R2, #0
0x12F0	0x01A004C0  JMPC	R30, A, #0, L__scroll_text_left308
;matrixrgb_firmware.c, 1008 :: 		color_buffer |= 0x04;
0x12F4	0x4431C045  OR.L	R3, R3, #4
0x12F8	0x4431D00D  BEXTU.L	R3, R3, #256
; color_buffer end address is: 12 (R3)
0x12FC	0x003004C0  JMP	L_scroll_text_left153
L__scroll_text_left308:
;matrixrgb_firmware.c, 1007 :: 		if ( color.red  > 0 )       //Create color for frame
;matrixrgb_firmware.c, 1008 :: 		color_buffer |= 0x04;
L_scroll_text_left153:
;matrixrgb_firmware.c, 1009 :: 		if ( color.green > 0 )
; color_buffer start address is: 12 (R3)
0x1300	0x442FD090  ADD.L	R2, SP, #265
0x1304	0xA8210000  LDI.B	R2, R2, #0
0x1308	0x59E14002  CMP.B	R2, #0
0x130C	0x01A004C7  JMPC	R30, A, #0, L__scroll_text_left309
;matrixrgb_firmware.c, 1010 :: 		color_buffer |= 0x02;
0x1310	0x4431C025  OR.L	R3, R3, #2
0x1314	0x4431D00D  BEXTU.L	R3, R3, #256
; color_buffer end address is: 12 (R3)
0x1318	0x003004C7  JMP	L_scroll_text_left154
L__scroll_text_left309:
;matrixrgb_firmware.c, 1009 :: 		if ( color.green > 0 )
;matrixrgb_firmware.c, 1010 :: 		color_buffer |= 0x02;
L_scroll_text_left154:
;matrixrgb_firmware.c, 1011 :: 		if ( color.blue > 0 )
; color_buffer start address is: 12 (R3)
0x131C	0x442FD0A0  ADD.L	R2, SP, #266
0x1320	0xA8210000  LDI.B	R2, R2, #0
0x1324	0x59E14002  CMP.B	R2, #0
0x1328	0x01A004CF  JMPC	R30, A, #0, L__scroll_text_left310
;matrixrgb_firmware.c, 1012 :: 		color_buffer |= 0x01;
0x132C	0x4421C015  OR.L	R2, R3, #1
0x1330	0x4431500D  BEXTU.L	R3, R2, #256
; color_buffer end address is: 12 (R3)
0x1334	0x44F1D00D  BEXTU.L	R15, R3, #256
0x1338	0x003004D0  JMP	L_scroll_text_left155
L__scroll_text_left310:
;matrixrgb_firmware.c, 1011 :: 		if ( color.blue > 0 )
0x133C	0x44F1D00D  BEXTU.L	R15, R3, #256
;matrixrgb_firmware.c, 1012 :: 		color_buffer |= 0x01;
L_scroll_text_left155:
;matrixrgb_firmware.c, 1014 :: 		while ( *ptr != NULL )
; color_buffer start address is: 60 (R15)
0x1340	0x44E0C00D  BEXTU.L	R14, R1, #0
; speed end address is: 4 (R1)
; ptr end address is: 0 (R0)
; color_buffer end address is: 60 (R15)
0x1344	0x45004000  MOVE.L	R16, R0
L_scroll_text_left156:
; color_buffer start address is: 60 (R15)
; ptr start address is: 64 (R16)
; speed start address is: 56 (R14)
0x1348	0xA8280000  LDI.B	R2, R16, #0
0x134C	0x59E14002  CMP.B	R2, #0
0x1350	0x00280541  JMPC	R30, Z, #1, L_scroll_text_left157
;matrixrgb_firmware.c, 1016 :: 		cnt = 0;
; cnt start address is: 0 (R0)
0x1354	0x64000000  LDK.L	R0, #0
;matrixrgb_firmware.c, 1017 :: 		for ( k = 0; k < 16; k++ )
; k start address is: 36 (R9)
0x1358	0x64900000  LDK.L	R9, #0
; cnt end address is: 0 (R0)
; speed end address is: 56 (R14)
; color_buffer end address is: 60 (R15)
; k end address is: 36 (R9)
; ptr end address is: 64 (R16)
L_scroll_text_left158:
; k start address is: 36 (R9)
; cnt start address is: 0 (R0)
; speed start address is: 56 (R14)
; ptr start address is: 64 (R16)
; color_buffer start address is: 60 (R15)
0x135C	0x59E4C102  CMP.B	R9, #16
0x1360	0x00600534  JMPC	R30, C, #0, L_scroll_text_left159
;matrixrgb_firmware.c, 1019 :: 		temp   = Dejavu18_Bitmaps[ ( *ptr * 32 ) - ( 32 * 32 ) + cnt ];
0x1364	0xA8280000  LDI.B	R2, R16, #0
0x1368	0x44314058  ASHL.L	R3, R2, #5
0x136C	0x4431C00C  BEXTS.L	R3, R3, #0
0x1370	0x64200400  LDK.L	R2, #1024
0x1374	0x44218022  SUB.L	R2, R3, R2
0x1378	0x4421400C  BEXTS.L	R2, R2, #0
0x137C	0x44410000  ADD.L	R4, R2, R0
0x1380	0x4442400C  BEXTS.L	R4, R4, #0
0x1384	0x64303014  LDK.L	R3, #_Dejavu18_Bitmaps+0
0x1388	0x44218040  ADD.L	R2, R3, R4
0x138C	0xC8610000  LPMI.B	R6, R2, #0
; temp start address is: 24 (R6)
;matrixrgb_firmware.c, 1020 :: 		temp_2 = Dejavu18_Bitmaps[ ( *ptr * 32 ) - ( 32 * 32 ) +  cnt + 1 ];
0x1390	0x44224010  ADD.L	R2, R4, #1
0x1394	0x4421400C  BEXTS.L	R2, R2, #0
0x1398	0x44218020  ADD.L	R2, R3, R2
0x139C	0xC8110000  LPMI.B	R1, R2, #0
; temp_2 start address is: 4 (R1)
;matrixrgb_firmware.c, 1021 :: 		for ( j = 0; j < 8; j++ )
; j start address is: 20 (R5)
0x13A0	0x64500000  LDK.L	R5, #0
; temp_2 end address is: 4 (R1)
; cnt end address is: 0 (R0)
; temp end address is: 24 (R6)
; j end address is: 20 (R5)
; speed end address is: 56 (R14)
; color_buffer end address is: 60 (R15)
; k end address is: 36 (R9)
; ptr end address is: 64 (R16)
0x13A4	0x4487400D  BEXTU.L	R8, R14, #0
0x13A8	0x44784000  MOVE.L	R7, R16
0x13AC	0x4447D00D  BEXTU.L	R4, R15, #256
L_scroll_text_left161:
; j start address is: 20 (R5)
; temp_2 start address is: 4 (R1)
; temp start address is: 24 (R6)
; color_buffer start address is: 16 (R4)
; ptr start address is: 28 (R7)
; speed start address is: 32 (R8)
; cnt start address is: 0 (R0)
; k start address is: 36 (R9)
0x13B0	0x59E2C082  CMP.B	R5, #8
0x13B4	0x00600509  JMPC	R30, C, #0, L_scroll_text_left162
;matrixrgb_firmware.c, 1023 :: 		if ( ( temp & 0x80 ) > 0x00 )
0x13B8	0x44234804  AND.L	R2, R6, #128
0x13BC	0x59E14002  CMP.B	R2, #0
0x13C0	0x01A004FA  JMPC	R30, A, #0, L_scroll_text_left164
;matrixrgb_firmware.c, 1024 :: 		text_frame[( k * 16 ) + j] = color_buffer;
0x13C4	0x4424D00D  BEXTU.L	R2, R9, #256
0x13C8	0x44214048  ASHL.L	R2, R2, #4
0x13CC	0x4421400C  BEXTS.L	R2, R2, #0
0x13D0	0x44310050  ADD.L	R3, R2, R5
0x13D4	0x4431C00C  BEXTS.L	R3, R3, #0
0x13D8	0x442FC000  ADD.L	R2, SP, #0
0x13DC	0x44210030  ADD.L	R2, R2, R3
0x13E0	0xB0220000  STI.B	R2, #0, R4
0x13E4	0x00300503  JMP	L_scroll_text_left165
L_scroll_text_left164:
;matrixrgb_firmware.c, 1026 :: 		text_frame[( k * 16 ) + j] = 0x00;
0x13E8	0x4424D00D  BEXTU.L	R2, R9, #256
0x13EC	0x44214048  ASHL.L	R2, R2, #4
0x13F0	0x4421400C  BEXTS.L	R2, R2, #0
0x13F4	0x44310050  ADD.L	R3, R2, R5
0x13F8	0x4431C00C  BEXTS.L	R3, R3, #0
0x13FC	0x442FC000  ADD.L	R2, SP, #0
0x1400	0x44310030  ADD.L	R3, R2, R3
0x1404	0x64200000  LDK.L	R2, #0
0x1408	0xB0310000  STI.B	R3, #0, R2
L_scroll_text_left165:
;matrixrgb_firmware.c, 1027 :: 		temp = ( temp << 1 );
0x140C	0x4423500D  BEXTU.L	R2, R6, #256
; temp end address is: 24 (R6)
0x1410	0x44214018  ASHL.L	R2, R2, #1
; temp start address is: 24 (R6)
0x1414	0x4461500D  BEXTU.L	R6, R2, #256
;matrixrgb_firmware.c, 1021 :: 		for ( j = 0; j < 8; j++ )
0x1418	0x4452C010  ADD.L	R5, R5, #1
0x141C	0x4452D00D  BEXTU.L	R5, R5, #256
;matrixrgb_firmware.c, 1028 :: 		}
; temp end address is: 24 (R6)
; j end address is: 20 (R5)
0x1420	0x003004EC  JMP	L_scroll_text_left161
L_scroll_text_left162:
;matrixrgb_firmware.c, 1029 :: 		for ( j = 8; j < 16; j++ )
; j start address is: 8 (R2)
0x1424	0x64200008  LDK.L	R2, #8
; temp_2 end address is: 4 (R1)
; color_buffer end address is: 16 (R4)
; ptr end address is: 28 (R7)
; speed end address is: 32 (R8)
; cnt end address is: 0 (R0)
; j end address is: 8 (R2)
; k end address is: 36 (R9)
0x1428	0x4450D00D  BEXTU.L	R5, R1, #256
0x142C	0x4410500D  BEXTU.L	R1, R0, #256
0x1430	0x4404D00D  BEXTU.L	R0, R9, #256
0x1434	0x44F2500D  BEXTU.L	R15, R4, #256
0x1438	0x4441500D  BEXTU.L	R4, R2, #256
0x143C	0x4503C000  MOVE.L	R16, R7
0x1440	0x44E4400D  BEXTU.L	R14, R8, #0
L_scroll_text_left166:
; j start address is: 16 (R4)
; k start address is: 0 (R0)
; cnt start address is: 4 (R1)
; speed start address is: 56 (R14)
; ptr start address is: 64 (R16)
; color_buffer start address is: 60 (R15)
; temp_2 start address is: 20 (R5)
0x1444	0x59E24102  CMP.B	R4, #16
0x1448	0x0060052E  JMPC	R30, C, #0, L_scroll_text_left167
;matrixrgb_firmware.c, 1031 :: 		if ( ( temp_2 & 0x80 ) > 0x00 )
0x144C	0x4422C804  AND.L	R2, R5, #128
0x1450	0x59E14002  CMP.B	R2, #0
0x1454	0x01A0051F  JMPC	R30, A, #0, L_scroll_text_left169
;matrixrgb_firmware.c, 1032 :: 		text_frame[( k * 16 ) + j] = color_buffer;
0x1458	0x4420500D  BEXTU.L	R2, R0, #256
0x145C	0x44214048  ASHL.L	R2, R2, #4
0x1460	0x4421400C  BEXTS.L	R2, R2, #0
0x1464	0x44310040  ADD.L	R3, R2, R4
0x1468	0x4431C00C  BEXTS.L	R3, R3, #0
0x146C	0x442FC000  ADD.L	R2, SP, #0
0x1470	0x44210030  ADD.L	R2, R2, R3
0x1474	0xB0278000  STI.B	R2, #0, R15
0x1478	0x00300528  JMP	L_scroll_text_left170
L_scroll_text_left169:
;matrixrgb_firmware.c, 1034 :: 		text_frame[( k * 16 ) + j] = 0x00;
0x147C	0x4420500D  BEXTU.L	R2, R0, #256
0x1480	0x44214048  ASHL.L	R2, R2, #4
0x1484	0x4421400C  BEXTS.L	R2, R2, #0
0x1488	0x44310040  ADD.L	R3, R2, R4
0x148C	0x4431C00C  BEXTS.L	R3, R3, #0
0x1490	0x442FC000  ADD.L	R2, SP, #0
0x1494	0x44310030  ADD.L	R3, R2, R3
0x1498	0x64200000  LDK.L	R2, #0
0x149C	0xB0310000  STI.B	R3, #0, R2
L_scroll_text_left170:
;matrixrgb_firmware.c, 1035 :: 		temp_2 = ( temp_2 << 1 );
0x14A0	0x4422D00D  BEXTU.L	R2, R5, #256
; temp_2 end address is: 20 (R5)
0x14A4	0x44214018  ASHL.L	R2, R2, #1
; temp_2 start address is: 20 (R5)
0x14A8	0x4451500D  BEXTU.L	R5, R2, #256
;matrixrgb_firmware.c, 1029 :: 		for ( j = 8; j < 16; j++ )
0x14AC	0x44424010  ADD.L	R4, R4, #1
0x14B0	0x4442500D  BEXTU.L	R4, R4, #256
;matrixrgb_firmware.c, 1036 :: 		}
; temp_2 end address is: 20 (R5)
; j end address is: 16 (R4)
0x14B4	0x00300511  JMP	L_scroll_text_left166
L_scroll_text_left167:
;matrixrgb_firmware.c, 1037 :: 		cnt += 2;
0x14B8	0x4420C020  ADD.L	R2, R1, #2
0x14BC	0x4411500D  BEXTU.L	R1, R2, #256
;matrixrgb_firmware.c, 1017 :: 		for ( k = 0; k < 16; k++ )
0x14C0	0x44204010  ADD.L	R2, R0, #1
; k end address is: 0 (R0)
; k start address is: 36 (R9)
0x14C4	0x4491500D  BEXTU.L	R9, R2, #256
;matrixrgb_firmware.c, 1038 :: 		}
; cnt end address is: 4 (R1)
; k end address is: 36 (R9)
0x14C8	0x4400D00D  BEXTU.L	R0, R1, #256
0x14CC	0x003004D7  JMP	L_scroll_text_left158
L_scroll_text_left159:
;matrixrgb_firmware.c, 1040 :: 		font_width = Dejavu18_Widths[ *ptr - 32 ];
0x14D0	0xA8280000  LDI.B	R2, R16, #0
0x14D4	0x44314202  SUB.L	R3, R2, #32
0x14D8	0x4431C00C  BEXTS.L	R3, R3, #0
0x14DC	0x64200004  LDK.L	R2, #_Dejavu18_Widths+0
0x14E0	0x44210030  ADD.L	R2, R2, R3
0x14E4	0xA8310000  LDI.B	R3, R2, #0
;matrixrgb_firmware.c, 1041 :: 		shift_lett_onto_right( text_frame, font_width, speed );
0x14E8	0x442FC000  ADD.L	R2, SP, #0
0x14EC	0x4411D00D  BEXTU.L	R1, R3, #256
0x14F0	0x44014000  MOVE.L	R0, R2
0x14F4	0x4427400D  BEXTU.L	R2, R14, #0
0x14F8	0x003402D7  CALL	_shift_lett_onto_right+0
;matrixrgb_firmware.c, 1042 :: 		ptr++;
0x14FC	0x45084010  ADD.L	R16, R16, #1
;matrixrgb_firmware.c, 1043 :: 		}
; speed end address is: 56 (R14)
; color_buffer end address is: 60 (R15)
; ptr end address is: 64 (R16)
0x1500	0x003004D2  JMP	L_scroll_text_left156
L_scroll_text_left157:
;matrixrgb_firmware.c, 1044 :: 		}
L_end_scroll_text_left:
0x1504	0x99D00000  UNLINK	LR
0x1508	0xA0000000  RETURN	
; end of _scroll_text_left
_shift_lett_onto_right:
;matrixrgb_firmware.c, 1046 :: 		void shift_lett_onto_right( uint8_t *text_frame, uint8_t font_width, uint16_t speed )
; m start address is: 44 (R11)
; speed start address is: 8 (R2)
0x0B5C	0x95D00008  LINK	LR, #8
;matrixrgb_firmware.c, 1053 :: 		for ( m = 0; m < font_width; m++ )
;matrixrgb_firmware.c, 1046 :: 		void shift_lett_onto_right( uint8_t *text_frame, uint8_t font_width, uint16_t speed )
0x0B60	0xB5F00000  STI.L	SP, #0, R0
0x0B64	0xB1F08004  STI.B	SP, #4, R1
;matrixrgb_firmware.c, 1053 :: 		for ( m = 0; m < font_width; m++ )
;matrixrgb_firmware.c, 1046 :: 		void shift_lett_onto_right( uint8_t *text_frame, uint8_t font_width, uint16_t speed )
0x0B68	0x44A1400D  BEXTU.L	R10, R2, #0
; m end address is: 44 (R11)
; speed end address is: 8 (R2)
; speed start address is: 40 (R10)
;matrixrgb_firmware.c, 1049 :: 		uint16_t i = 0, j = 63;
;matrixrgb_firmware.c, 1051 :: 		uint8_t buffer = 0;
;matrixrgb_firmware.c, 1053 :: 		for ( m = 0; m < font_width; m++ )
; m start address is: 44 (R11)
0x0B6C	0x64B00000  LDK.L	R11, #0
; speed end address is: 40 (R10)
; m end address is: 44 (R11)
L_shift_lett_onto_right171:
; m start address is: 44 (R11)
; speed start address is: 40 (R10)
0x0B70	0xA83F8004  LDI.B	R3, SP, #4
0x0B74	0x59E58032  CMP.B	R11, R3
0x0B78	0x00600306  JMPC	R30, C, #0, L_shift_lett_onto_right172
;matrixrgb_firmware.c, 1055 :: 		for ( k = 0; k < 16; k++ )
; k start address is: 48 (R12)
0x0B7C	0x64C00000  LDK.L	R12, #0
; k end address is: 48 (R12)
; speed end address is: 40 (R10)
; m end address is: 44 (R11)
0x0B80	0x4486500D  BEXTU.L	R8, R12, #256
L_shift_lett_onto_right174:
; k start address is: 32 (R8)
; speed start address is: 40 (R10)
; m start address is: 44 (R11)
0x0B84	0x59E44102  CMP.B	R8, #16
0x0B88	0x006002F9  JMPC	R30, C, #0, L_shift_lett_onto_right175
;matrixrgb_firmware.c, 1057 :: 		buffer = text_frame[( k * 16 + m )];
0x0B8C	0x4434500D  BEXTU.L	R3, R8, #256
0x0B90	0x4431C048  ASHL.L	R3, R3, #4
0x0B94	0x4431C00C  BEXTS.L	R3, R3, #0
0x0B98	0x444180B0  ADD.L	R4, R3, R11
0x0B9C	0x4442400C  BEXTS.L	R4, R4, #0
0x0BA0	0xAC3F8000  LDI.L	R3, SP, #0
0x0BA4	0x44318040  ADD.L	R3, R3, R4
0x0BA8	0xA8318000  LDI.B	R3, R3, #0
;matrixrgb_firmware.c, 1058 :: 		red   = ( buffer & 0x04 );
0x0BAC	0x4461C044  AND.L	R6, R3, #4
;matrixrgb_firmware.c, 1059 :: 		green = ( buffer & 0x02 );
0x0BB0	0x4451C024  AND.L	R5, R3, #2
;matrixrgb_firmware.c, 1060 :: 		blue  = ( buffer & 0x01 );
0x0BB4	0x4441C014  AND.L	R4, R3, #1
;matrixrgb_firmware.c, 1061 :: 		write_pixel( k, ( p_width - 1 ), red, green, blue );
0x0BB8	0xC23000E2  LDA.S	R3, _p_width+0
0x0BBC	0x4431C012  SUB.L	R3, R3, #1
0x0BC0	0x4423500D  BEXTU.L	R2, R6, #256
0x0BC4	0x4411C00D  BEXTU.L	R1, R3, #0
0x0BC8	0x4432D00D  BEXTU.L	R3, R5, #256
0x0BCC	0x4404500D  BEXTU.L	R0, R8, #256
0x0BD0	0x00340439  CALL	_write_pixel+0
;matrixrgb_firmware.c, 1055 :: 		for ( k = 0; k < 16; k++ )
0x0BD4	0x44344010  ADD.L	R3, R8, #1
; k end address is: 32 (R8)
; k start address is: 48 (R12)
0x0BD8	0x44C1D00D  BEXTU.L	R12, R3, #256
;matrixrgb_firmware.c, 1062 :: 		}
; k end address is: 48 (R12)
0x0BDC	0x4486500D  BEXTU.L	R8, R12, #256
0x0BE0	0x003002E1  JMP	L_shift_lett_onto_right174
L_shift_lett_onto_right175:
;matrixrgb_firmware.c, 1064 :: 		for ( p = 0; p < speed; p++ )
; p start address is: 36 (R9)
0x0BE4	0x64900000  LDK.L	R9, #0
; p end address is: 36 (R9)
; speed end address is: 40 (R10)
; m end address is: 44 (R11)
0x0BE8	0x44D5D00D  BEXTU.L	R13, R11, #256
L_shift_lett_onto_right177:
; p start address is: 36 (R9)
; m start address is: 52 (R13)
; speed start address is: 40 (R10)
0x0BEC	0x5BE480A2  CMP.S	R9, R10
0x0BF0	0x00600302  JMPC	R30, C, #0, L_shift_lett_onto_right178
;matrixrgb_firmware.c, 1065 :: 		refresh();
0x0BF4	0x00340384  CALL	_refresh+0
;matrixrgb_firmware.c, 1064 :: 		for ( p = 0; p < speed; p++ )
0x0BF8	0x4434C010  ADD.L	R3, R9, #1
; p end address is: 36 (R9)
; p start address is: 0 (R0)
0x0BFC	0x4401D00D  BEXTU.L	R0, R3, #256
;matrixrgb_firmware.c, 1065 :: 		refresh();
; p end address is: 0 (R0)
0x0C00	0x4490500D  BEXTU.L	R9, R0, #256
0x0C04	0x003002FB  JMP	L_shift_lett_onto_right177
L_shift_lett_onto_right178:
;matrixrgb_firmware.c, 1067 :: 		display_shift_left();
0x0C08	0x00340412  CALL	_display_shift_left+0
;matrixrgb_firmware.c, 1053 :: 		for ( m = 0; m < font_width; m++ )
0x0C0C	0x4436C010  ADD.L	R3, R13, #1
; m end address is: 52 (R13)
; m start address is: 44 (R11)
0x0C10	0x44B1D00D  BEXTU.L	R11, R3, #256
;matrixrgb_firmware.c, 1068 :: 		}
; speed end address is: 40 (R10)
; m end address is: 44 (R11)
0x0C14	0x003002DC  JMP	L_shift_lett_onto_right171
L_shift_lett_onto_right172:
;matrixrgb_firmware.c, 1069 :: 		}
L_end_shift_lett_onto_right:
0x0C18	0x99D00000  UNLINK	LR
0x0C1C	0xA0000000  RETURN	
; end of _shift_lett_onto_right
___CC2DB:
;__Lib_System.c, 4 :: 		
;__Lib_System.c, 6 :: 		
L_loopCC2DB:
;__Lib_System.c, 7 :: 		
0x0B40	0xC99E0000  LPMI.B	R25, R28, #0
;__Lib_System.c, 8 :: 		
0x0B44	0xB1BC8000  STI.B	R27, #0, R25
;__Lib_System.c, 9 :: 		
0x0B48	0x45CE4010  ADD.L	R28, R28, #1
;__Lib_System.c, 10 :: 		
0x0B4C	0x45BDC010  ADD.L	R27, R27, #1
;__Lib_System.c, 11 :: 		
0x0B50	0x5DED81A2  CMP.L	R27, R26
;__Lib_System.c, 12 :: 		
0x0B54	0x002002D0  JMPC	R30, Z, #0, L_loopCC2DB
;__Lib_System.c, 14 :: 		
L_end___CC2DB:
0x0B58	0xA0000000  RETURN	
; end of ___CC2DB
_scroll_text_right_command:
;matrixrgb_firmware.c, 398 :: 		void scroll_text_right_command( void )
0x2810	0x95D00104  LINK	LR, #260
;matrixrgb_firmware.c, 401 :: 		char text[256] = { 0 };
0x2814	0x45BFC030  ADD.L	R27, SP, #3
0x2818	0x45ADD000  ADD.L	R26, R27, #256
0x281C	0x65C03E74  LDK.L	R28, #?ICSscroll_text_right_command_text_L0+0
0x2820	0x003402D0  CALL	___CC2DB+0
;matrixrgb_firmware.c, 402 :: 		char *ptr = text;
0x2824	0x446FC030  ADD.L	R6, SP, #3
; ptr start address is: 24 (R6)
;matrixrgb_firmware.c, 403 :: 		uint8_t i = 0;
;matrixrgb_firmware.c, 404 :: 		uint8_t size = 0;
;matrixrgb_firmware.c, 406 :: 		uint8_t speed = 0;
;matrixrgb_firmware.c, 408 :: 		receive_data( &firm_buffer, 1 );
0x2828	0x64100001  LDK.L	R1, #1
0x282C	0x6400005F  LDK.L	R0, #_firm_buffer+0
0x2830	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware.c, 409 :: 		size = firm_buffer[0];
; size start address is: 16 (R4)
0x2834	0xC040005F  LDA.B	R4, _firm_buffer+0
;matrixrgb_firmware.c, 410 :: 		receive_data( &firm_buffer, 3 );
0x2838	0x64100003  LDK.L	R1, #3
0x283C	0x6400005F  LDK.L	R0, #_firm_buffer+0
0x2840	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware.c, 411 :: 		my_color.red   = firm_buffer[0];
0x2844	0xC000005F  LDA.B	R0, _firm_buffer+0
0x2848	0xB1F00000  STI.B	SP, #0, R0
;matrixrgb_firmware.c, 412 :: 		my_color.green = firm_buffer[1];
0x284C	0xC0000060  LDA.B	R0, _firm_buffer+1
0x2850	0xB1F00001  STI.B	SP, #1, R0
;matrixrgb_firmware.c, 413 :: 		my_color.blue  = firm_buffer[2];
0x2854	0xC0000061  LDA.B	R0, _firm_buffer+2
0x2858	0xB1F00002  STI.B	SP, #2, R0
;matrixrgb_firmware.c, 414 :: 		receive_data( &firm_buffer, 1 );
0x285C	0x64100001  LDK.L	R1, #1
0x2860	0x6400005F  LDK.L	R0, #_firm_buffer+0
0x2864	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware.c, 415 :: 		speed = firm_buffer[0];
; speed start address is: 12 (R3)
0x2868	0xC030005F  LDA.B	R3, _firm_buffer+0
;matrixrgb_firmware.c, 418 :: 		for ( i = 0; i < size; i++ )
; i start address is: 20 (R5)
0x286C	0x64500000  LDK.L	R5, #0
; speed end address is: 12 (R3)
; size end address is: 16 (R4)
; ptr end address is: 24 (R6)
; i end address is: 20 (R5)
L_scroll_text_right_command43:
; i start address is: 20 (R5)
; speed start address is: 12 (R3)
; size start address is: 16 (R4)
; ptr start address is: 24 (R6)
0x2870	0x59E28042  CMP.B	R5, R4
0x2874	0x00600A27  JMPC	R30, C, #0, L_scroll_text_right_command44
;matrixrgb_firmware.c, 420 :: 		receive_data( &firm_buffer, 1 );
0x2878	0x64100001  LDK.L	R1, #1
0x287C	0x6400005F  LDK.L	R0, #_firm_buffer+0
0x2880	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware.c, 421 :: 		*ptr++ = firm_buffer[0];
0x2884	0xC000005F  LDA.B	R0, _firm_buffer+0
0x2888	0xB0600000  STI.B	R6, #0, R0
0x288C	0x44634010  ADD.L	R6, R6, #1
;matrixrgb_firmware.c, 418 :: 		for ( i = 0; i < size; i++ )
0x2890	0x4452C010  ADD.L	R5, R5, #1
0x2894	0x4452D00D  BEXTU.L	R5, R5, #256
;matrixrgb_firmware.c, 422 :: 		}
; size end address is: 16 (R4)
; ptr end address is: 24 (R6)
; i end address is: 20 (R5)
0x2898	0x00300A1C  JMP	L_scroll_text_right_command43
L_scroll_text_right_command44:
;matrixrgb_firmware.c, 424 :: 		scroll_text_right( text, my_color, speed );
0x289C	0x440FC030  ADD.L	R0, SP, #3
0x28A0	0x4411D00D  BEXTU.L	R1, R3, #256
; speed end address is: 12 (R3)
0x28A4	0x45FFC042  SUB.L	SP, SP, #4
0x28A8	0x45EFC040  ADD.L	R30, SP, #4
0x28AC	0xF1FF4045  MEMCPY.B	SP, R30, #4
0x28B0	0x0034056E  CALL	_scroll_text_right+0
0x28B4	0x45FFC040  ADD.L	SP, SP, #4
;matrixrgb_firmware.c, 426 :: 		}
L_end_scroll_text_right_command:
0x28B8	0x99D00000  UNLINK	LR
0x28BC	0xA0000000  RETURN	
; end of _scroll_text_right_command
_scroll_text_right:
;matrixrgb_firmware.c, 1071 :: 		void scroll_text_right( char *text, color_t color, uint16_t speed )
; speed start address is: 4 (R1)
; text start address is: 0 (R0)
0x15B8	0x95D00100  LINK	LR, #256
0x15BC	0x44204000  MOVE.L	R2, R0
; speed end address is: 4 (R1)
; text end address is: 0 (R0)
; text start address is: 8 (R2)
; speed start address is: 4 (R1)
;matrixrgb_firmware.c, 1073 :: 		char *ptr = text;
; ptr start address is: 0 (R0)
0x15C0	0x44014000  MOVE.L	R0, R2
; text end address is: 8 (R2)
;matrixrgb_firmware.c, 1074 :: 		uint8_t text_frame[256] = { 0 };
0x15C4	0x45BFC000  ADD.L	R27, SP, #0
0x15C8	0x45ADD000  ADD.L	R26, R27, #256
0x15CC	0x65C03B74  LDK.L	R28, #?ICSscroll_text_right_text_frame_L0+0
0x15D0	0x003402D0  CALL	___CC2DB+0
;matrixrgb_firmware.c, 1077 :: 		uint8_t cnt = 0;
;matrixrgb_firmware.c, 1079 :: 		uint8_t color_buffer = 0;
; color_buffer start address is: 16 (R4)
0x15D4	0x64400000  LDK.L	R4, #0
;matrixrgb_firmware.c, 1080 :: 		uint8_t text_length = 0;
; text_length start address is: 12 (R3)
0x15D8	0x64300000  LDK.L	R3, #0
;matrixrgb_firmware.c, 1082 :: 		if ( ptr == NULL )          //Sanity check
0x15DC	0x5DE04002  CMP.L	R0, #0
0x15E0	0x0020057A  JMPC	R30, Z, #0, L_scroll_text_right180
; ptr end address is: 0 (R0)
; color_buffer end address is: 16 (R4)
; speed end address is: 4 (R1)
; text_length end address is: 12 (R3)
;matrixrgb_firmware.c, 1083 :: 		return;
0x15E4	0x00300610  JMP	L_end_scroll_text_right
L_scroll_text_right180:
;matrixrgb_firmware.c, 1085 :: 		if ( color.red  > 0 )       //Create color for frame
; text_length start address is: 12 (R3)
; speed start address is: 4 (R1)
; color_buffer start address is: 16 (R4)
; ptr start address is: 0 (R0)
0x15E8	0x442FD080  ADD.L	R2, SP, #264
0x15EC	0xA8210000  LDI.B	R2, R2, #0
0x15F0	0x59E14002  CMP.B	R2, #0
0x15F4	0x01A00581  JMPC	R30, A, #0, L__scroll_text_right311
;matrixrgb_firmware.c, 1086 :: 		color_buffer |= 0x04;
0x15F8	0x44424045  OR.L	R4, R4, #4
0x15FC	0x4442500D  BEXTU.L	R4, R4, #256
; color_buffer end address is: 16 (R4)
0x1600	0x00300581  JMP	L_scroll_text_right181
L__scroll_text_right311:
;matrixrgb_firmware.c, 1085 :: 		if ( color.red  > 0 )       //Create color for frame
;matrixrgb_firmware.c, 1086 :: 		color_buffer |= 0x04;
L_scroll_text_right181:
;matrixrgb_firmware.c, 1087 :: 		if ( color.green > 0 )
; color_buffer start address is: 16 (R4)
0x1604	0x442FD090  ADD.L	R2, SP, #265
0x1608	0xA8210000  LDI.B	R2, R2, #0
0x160C	0x59E14002  CMP.B	R2, #0
0x1610	0x01A00588  JMPC	R30, A, #0, L__scroll_text_right312
;matrixrgb_firmware.c, 1088 :: 		color_buffer |= 0x02;
0x1614	0x44424025  OR.L	R4, R4, #2
0x1618	0x4442500D  BEXTU.L	R4, R4, #256
; color_buffer end address is: 16 (R4)
0x161C	0x00300588  JMP	L_scroll_text_right182
L__scroll_text_right312:
;matrixrgb_firmware.c, 1087 :: 		if ( color.green > 0 )
;matrixrgb_firmware.c, 1088 :: 		color_buffer |= 0x02;
L_scroll_text_right182:
;matrixrgb_firmware.c, 1089 :: 		if ( color.blue > 0 )
; color_buffer start address is: 16 (R4)
0x1620	0x442FD0A0  ADD.L	R2, SP, #266
0x1624	0xA8210000  LDI.B	R2, R2, #0
0x1628	0x59E14002  CMP.B	R2, #0
0x162C	0x01A00590  JMPC	R30, A, #0, L__scroll_text_right313
;matrixrgb_firmware.c, 1090 :: 		color_buffer |= 0x01;
0x1630	0x44224015  OR.L	R2, R4, #1
0x1634	0x4441500D  BEXTU.L	R4, R2, #256
; color_buffer end address is: 16 (R4)
0x1638	0x4422500D  BEXTU.L	R2, R4, #256
0x163C	0x00300591  JMP	L_scroll_text_right183
L__scroll_text_right313:
;matrixrgb_firmware.c, 1089 :: 		if ( color.blue > 0 )
0x1640	0x4422500D  BEXTU.L	R2, R4, #256
;matrixrgb_firmware.c, 1090 :: 		color_buffer |= 0x01;
L_scroll_text_right183:
;matrixrgb_firmware.c, 1092 :: 		while ( *ptr != NULL )
; color_buffer start address is: 8 (R2)
; ptr end address is: 0 (R0)
; color_buffer end address is: 8 (R2)
; speed end address is: 4 (R1)
; text_length end address is: 12 (R3)
0x1644	0x44404000  MOVE.L	R4, R0
0x1648	0x4401500D  BEXTU.L	R0, R2, #256
L_scroll_text_right184:
; color_buffer start address is: 0 (R0)
; text_length start address is: 12 (R3)
; ptr start address is: 16 (R4)
; speed start address is: 4 (R1)
0x164C	0xA8220000  LDI.B	R2, R4, #0
0x1650	0x59E14002  CMP.B	R2, #0
0x1654	0x0028059A  JMPC	R30, Z, #1, L_scroll_text_right185
;matrixrgb_firmware.c, 1094 :: 		ptr++;
0x1658	0x44424010  ADD.L	R4, R4, #1
;matrixrgb_firmware.c, 1095 :: 		text_length++;
0x165C	0x4431C010  ADD.L	R3, R3, #1
0x1660	0x4431D00D  BEXTU.L	R3, R3, #256
;matrixrgb_firmware.c, 1096 :: 		}
0x1664	0x00300593  JMP	L_scroll_text_right184
L_scroll_text_right185:
;matrixrgb_firmware.c, 1098 :: 		ptr--;
0x1668	0x45124012  SUB.L	R17, R4, #1
; ptr end address is: 16 (R4)
; ptr start address is: 68 (R17)
; color_buffer end address is: 0 (R0)
; speed end address is: 4 (R1)
; text_length end address is: 12 (R3)
; ptr end address is: 68 (R17)
0x166C	0x4500500D  BEXTU.L	R16, R0, #256
0x1670	0x4401D00D  BEXTU.L	R0, R3, #256
0x1674	0x44E0C00D  BEXTU.L	R14, R1, #0
;matrixrgb_firmware.c, 1099 :: 		while ( text_length > 0 )
L_scroll_text_right186:
; ptr start address is: 68 (R17)
; speed start address is: 56 (R14)
; text_length start address is: 0 (R0)
; color_buffer start address is: 64 (R16)
0x1678	0x59E04002  CMP.B	R0, #0
0x167C	0x01A00610  JMPC	R30, A, #0, L_scroll_text_right187
;matrixrgb_firmware.c, 1101 :: 		text_length--;
0x1680	0x44F04012  SUB.L	R15, R0, #1
0x1684	0x44F7D00D  BEXTU.L	R15, R15, #256
; text_length end address is: 0 (R0)
; text_length start address is: 60 (R15)
;matrixrgb_firmware.c, 1102 :: 		cnt = 0;
; cnt start address is: 0 (R0)
0x1688	0x64000000  LDK.L	R0, #0
;matrixrgb_firmware.c, 1103 :: 		for ( k = 0; k < 16; k++ )
; k start address is: 40 (R10)
0x168C	0x64A00000  LDK.L	R10, #0
; cnt end address is: 0 (R0)
; text_length end address is: 60 (R15)
; color_buffer end address is: 64 (R16)
; speed end address is: 56 (R14)
; k end address is: 40 (R10)
; ptr end address is: 68 (R17)
L_scroll_text_right188:
; k start address is: 40 (R10)
; cnt start address is: 0 (R0)
; text_length start address is: 60 (R15)
; color_buffer start address is: 64 (R16)
; speed start address is: 56 (R14)
; ptr start address is: 68 (R17)
0x1690	0x59E54102  CMP.B	R10, #16
0x1694	0x00600602  JMPC	R30, C, #0, L_scroll_text_right189
;matrixrgb_firmware.c, 1105 :: 		temp   = Dejavu18_Bitmaps[ ( *ptr * 32 ) - ( 32 * 32 ) + cnt ];
0x1698	0xA8288000  LDI.B	R2, R17, #0
0x169C	0x44314058  ASHL.L	R3, R2, #5
0x16A0	0x4431C00C  BEXTS.L	R3, R3, #0
0x16A4	0x64200400  LDK.L	R2, #1024
0x16A8	0x44218022  SUB.L	R2, R3, R2
0x16AC	0x4421400C  BEXTS.L	R2, R2, #0
0x16B0	0x44410000  ADD.L	R4, R2, R0
0x16B4	0x4442400C  BEXTS.L	R4, R4, #0
0x16B8	0x64303014  LDK.L	R3, #_Dejavu18_Bitmaps+0
0x16BC	0x44218040  ADD.L	R2, R3, R4
0x16C0	0xC8510000  LPMI.B	R5, R2, #0
; temp start address is: 20 (R5)
;matrixrgb_firmware.c, 1106 :: 		temp_2 = Dejavu18_Bitmaps[ ( *ptr * 32 ) - ( 32 * 32 ) +  cnt + 1 ];
0x16C4	0x44224010  ADD.L	R2, R4, #1
0x16C8	0x4421400C  BEXTS.L	R2, R2, #0
0x16CC	0x44218020  ADD.L	R2, R3, R2
0x16D0	0xC8110000  LPMI.B	R1, R2, #0
; temp_2 start address is: 4 (R1)
;matrixrgb_firmware.c, 1107 :: 		for ( j = 0; j < 8; j++ )
; j start address is: 16 (R4)
0x16D4	0x64400000  LDK.L	R4, #0
; temp_2 end address is: 4 (R1)
; cnt end address is: 0 (R0)
; temp end address is: 20 (R5)
; text_length end address is: 60 (R15)
; color_buffer end address is: 64 (R16)
; speed end address is: 56 (R14)
; j end address is: 16 (R4)
; k end address is: 40 (R10)
; ptr end address is: 68 (R17)
0x16D8	0x4497D00D  BEXTU.L	R9, R15, #256
0x16DC	0x4488500D  BEXTU.L	R8, R16, #256
0x16E0	0x4477400D  BEXTU.L	R7, R14, #0
0x16E4	0x4468C000  MOVE.L	R6, R17
L_scroll_text_right191:
; j start address is: 16 (R4)
; temp_2 start address is: 4 (R1)
; temp start address is: 20 (R5)
; ptr start address is: 24 (R6)
; speed start address is: 28 (R7)
; color_buffer start address is: 32 (R8)
; text_length start address is: 36 (R9)
; cnt start address is: 0 (R0)
; k start address is: 40 (R10)
0x16E8	0x59E24082  CMP.B	R4, #8
0x16EC	0x006005D7  JMPC	R30, C, #0, L_scroll_text_right192
;matrixrgb_firmware.c, 1109 :: 		if ( ( temp & 0x80 ) > 0x00 )
0x16F0	0x4422C804  AND.L	R2, R5, #128
0x16F4	0x59E14002  CMP.B	R2, #0
0x16F8	0x01A005C8  JMPC	R30, A, #0, L_scroll_text_right194
;matrixrgb_firmware.c, 1110 :: 		text_frame[( k * 16 ) + j] = color_buffer;
0x16FC	0x4425500D  BEXTU.L	R2, R10, #256
0x1700	0x44214048  ASHL.L	R2, R2, #4
0x1704	0x4421400C  BEXTS.L	R2, R2, #0
0x1708	0x44310040  ADD.L	R3, R2, R4
0x170C	0x4431C00C  BEXTS.L	R3, R3, #0
0x1710	0x442FC000  ADD.L	R2, SP, #0
0x1714	0x44210030  ADD.L	R2, R2, R3
0x1718	0xB0240000  STI.B	R2, #0, R8
0x171C	0x003005D1  JMP	L_scroll_text_right195
L_scroll_text_right194:
;matrixrgb_firmware.c, 1112 :: 		text_frame[( k * 16 ) + j] = 0x00;
0x1720	0x4425500D  BEXTU.L	R2, R10, #256
0x1724	0x44214048  ASHL.L	R2, R2, #4
0x1728	0x4421400C  BEXTS.L	R2, R2, #0
0x172C	0x44310040  ADD.L	R3, R2, R4
0x1730	0x4431C00C  BEXTS.L	R3, R3, #0
0x1734	0x442FC000  ADD.L	R2, SP, #0
0x1738	0x44310030  ADD.L	R3, R2, R3
0x173C	0x64200000  LDK.L	R2, #0
0x1740	0xB0310000  STI.B	R3, #0, R2
L_scroll_text_right195:
;matrixrgb_firmware.c, 1113 :: 		temp = ( temp << 1 );
0x1744	0x4422D00D  BEXTU.L	R2, R5, #256
; temp end address is: 20 (R5)
0x1748	0x44214018  ASHL.L	R2, R2, #1
; temp start address is: 20 (R5)
0x174C	0x4451500D  BEXTU.L	R5, R2, #256
;matrixrgb_firmware.c, 1107 :: 		for ( j = 0; j < 8; j++ )
0x1750	0x44424010  ADD.L	R4, R4, #1
0x1754	0x4442500D  BEXTU.L	R4, R4, #256
;matrixrgb_firmware.c, 1114 :: 		}
; temp end address is: 20 (R5)
; j end address is: 16 (R4)
0x1758	0x003005BA  JMP	L_scroll_text_right191
L_scroll_text_right192:
;matrixrgb_firmware.c, 1115 :: 		for ( j = 8; j < 16; j++ )
; j start address is: 16 (R4)
0x175C	0x64400008  LDK.L	R4, #8
; temp_2 end address is: 4 (R1)
; ptr end address is: 24 (R6)
; speed end address is: 28 (R7)
; color_buffer end address is: 32 (R8)
; text_length end address is: 36 (R9)
; cnt end address is: 0 (R0)
; j end address is: 16 (R4)
; k end address is: 40 (R10)
0x1760	0x4450D00D  BEXTU.L	R5, R1, #256
0x1764	0x4410500D  BEXTU.L	R1, R0, #256
0x1768	0x4405500D  BEXTU.L	R0, R10, #256
0x176C	0x45134000  MOVE.L	R17, R6
0x1770	0x44E3C00D  BEXTU.L	R14, R7, #0
0x1774	0x4504500D  BEXTU.L	R16, R8, #256
0x1778	0x44F4D00D  BEXTU.L	R15, R9, #256
L_scroll_text_right196:
; j start address is: 16 (R4)
; k start address is: 0 (R0)
; cnt start address is: 4 (R1)
; text_length start address is: 60 (R15)
; color_buffer start address is: 64 (R16)
; speed start address is: 56 (R14)
; ptr start address is: 68 (R17)
; temp_2 start address is: 20 (R5)
0x177C	0x59E24102  CMP.B	R4, #16
0x1780	0x006005FC  JMPC	R30, C, #0, L_scroll_text_right197
;matrixrgb_firmware.c, 1117 :: 		if ( ( temp_2 & 0x80 ) > 0x00 )
0x1784	0x4422C804  AND.L	R2, R5, #128
0x1788	0x59E14002  CMP.B	R2, #0
0x178C	0x01A005ED  JMPC	R30, A, #0, L_scroll_text_right199
;matrixrgb_firmware.c, 1118 :: 		text_frame[( k * 16 ) + j] = color_buffer;
0x1790	0x4420500D  BEXTU.L	R2, R0, #256
0x1794	0x44214048  ASHL.L	R2, R2, #4
0x1798	0x4421400C  BEXTS.L	R2, R2, #0
0x179C	0x44310040  ADD.L	R3, R2, R4
0x17A0	0x4431C00C  BEXTS.L	R3, R3, #0
0x17A4	0x442FC000  ADD.L	R2, SP, #0
0x17A8	0x44210030  ADD.L	R2, R2, R3
0x17AC	0xB0280000  STI.B	R2, #0, R16
0x17B0	0x003005F6  JMP	L_scroll_text_right200
L_scroll_text_right199:
;matrixrgb_firmware.c, 1120 :: 		text_frame[( k * 16 ) + j] = 0x00;
0x17B4	0x4420500D  BEXTU.L	R2, R0, #256
0x17B8	0x44214048  ASHL.L	R2, R2, #4
0x17BC	0x4421400C  BEXTS.L	R2, R2, #0
0x17C0	0x44310040  ADD.L	R3, R2, R4
0x17C4	0x4431C00C  BEXTS.L	R3, R3, #0
0x17C8	0x442FC000  ADD.L	R2, SP, #0
0x17CC	0x44310030  ADD.L	R3, R2, R3
0x17D0	0x64200000  LDK.L	R2, #0
0x17D4	0xB0310000  STI.B	R3, #0, R2
L_scroll_text_right200:
;matrixrgb_firmware.c, 1121 :: 		temp_2 = ( temp_2 << 1 );
0x17D8	0x4422D00D  BEXTU.L	R2, R5, #256
; temp_2 end address is: 20 (R5)
0x17DC	0x44214018  ASHL.L	R2, R2, #1
; temp_2 start address is: 20 (R5)
0x17E0	0x4451500D  BEXTU.L	R5, R2, #256
;matrixrgb_firmware.c, 1115 :: 		for ( j = 8; j < 16; j++ )
0x17E4	0x44424010  ADD.L	R4, R4, #1
0x17E8	0x4442500D  BEXTU.L	R4, R4, #256
;matrixrgb_firmware.c, 1122 :: 		}
; temp_2 end address is: 20 (R5)
; j end address is: 16 (R4)
0x17EC	0x003005DF  JMP	L_scroll_text_right196
L_scroll_text_right197:
;matrixrgb_firmware.c, 1123 :: 		cnt += 2;
0x17F0	0x4420C020  ADD.L	R2, R1, #2
0x17F4	0x4411500D  BEXTU.L	R1, R2, #256
;matrixrgb_firmware.c, 1103 :: 		for ( k = 0; k < 16; k++ )
0x17F8	0x44204010  ADD.L	R2, R0, #1
; k end address is: 0 (R0)
; k start address is: 40 (R10)
0x17FC	0x44A1500D  BEXTU.L	R10, R2, #256
;matrixrgb_firmware.c, 1124 :: 		}
; cnt end address is: 4 (R1)
; k end address is: 40 (R10)
0x1800	0x4400D00D  BEXTU.L	R0, R1, #256
0x1804	0x003005A4  JMP	L_scroll_text_right188
L_scroll_text_right189:
;matrixrgb_firmware.c, 1126 :: 		font_width = Dejavu18_Widths[ *ptr - 32 ];
0x1808	0xA8288000  LDI.B	R2, R17, #0
0x180C	0x44314202  SUB.L	R3, R2, #32
0x1810	0x4431C00C  BEXTS.L	R3, R3, #0
0x1814	0x64200004  LDK.L	R2, #_Dejavu18_Widths+0
0x1818	0x44210030  ADD.L	R2, R2, R3
0x181C	0xA8310000  LDI.B	R3, R2, #0
;matrixrgb_firmware.c, 1127 :: 		shift_lett_onto_left( text_frame, font_width, speed );
0x1820	0x442FC000  ADD.L	R2, SP, #0
0x1824	0x4411D00D  BEXTU.L	R1, R3, #256
0x1828	0x44014000  MOVE.L	R0, R2
0x182C	0x4427400D  BEXTU.L	R2, R14, #0
0x1830	0x00340308  CALL	_shift_lett_onto_left+0
;matrixrgb_firmware.c, 1128 :: 		ptr--;
0x1834	0x4518C012  SUB.L	R17, R17, #1
;matrixrgb_firmware.c, 1129 :: 		}
; text_length end address is: 60 (R15)
; color_buffer end address is: 64 (R16)
; speed end address is: 56 (R14)
; ptr end address is: 68 (R17)
0x1838	0x4407D00D  BEXTU.L	R0, R15, #256
0x183C	0x0030059E  JMP	L_scroll_text_right186
L_scroll_text_right187:
;matrixrgb_firmware.c, 1130 :: 		}
L_end_scroll_text_right:
0x1840	0x99D00000  UNLINK	LR
0x1844	0xA0000000  RETURN	
; end of _scroll_text_right
_shift_lett_onto_left:
;matrixrgb_firmware.c, 1132 :: 		void shift_lett_onto_left( uint8_t *text_frame, uint8_t font_width, uint16_t speed )
; speed start address is: 8 (R2)
; font_width start address is: 4 (R1)
; text_frame start address is: 0 (R0)
0x0C20	0x95D00004  LINK	LR, #4
0x0C24	0x4441400D  BEXTU.L	R4, R2, #0
0x0C28	0x4420D00D  BEXTU.L	R2, R1, #256
0x0C2C	0x44104000  MOVE.L	R1, R0
; speed end address is: 8 (R2)
; font_width end address is: 4 (R1)
; text_frame end address is: 0 (R0)
; text_frame start address is: 4 (R1)
; font_width start address is: 8 (R2)
; speed start address is: 16 (R4)
;matrixrgb_firmware.c, 1135 :: 		uint16_t i = 0, j = 64;
;matrixrgb_firmware.c, 1136 :: 		uint8_t difference = 16 - font_width;
0x0C30	0x64300010  LDK.L	R3, #16
0x0C34	0x44318022  SUB.L	R3, R3, R2
; difference start address is: 12 (R3)
0x0C38	0x4431D00D  BEXTU.L	R3, R3, #256
;matrixrgb_firmware.c, 1138 :: 		uint8_t buffer = 0;
;matrixrgb_firmware.c, 1140 :: 		for ( m = difference; m < ( 16 - font_width ) + font_width ; m++ )
; m start address is: 0 (R0)
0x0C3C	0x4401D00D  BEXTU.L	R0, R3, #256
; text_frame end address is: 4 (R1)
; font_width end address is: 8 (R2)
; speed end address is: 16 (R4)
; difference end address is: 12 (R3)
; m end address is: 0 (R0)
0x0C40	0x4480C000  MOVE.L	R8, R1
0x0C44	0x4491500D  BEXTU.L	R9, R2, #256
0x0C48	0x44A2400D  BEXTU.L	R10, R4, #0
0x0C4C	0x44B0500D  BEXTU.L	R11, R0, #256
L_shift_lett_onto_left201:
; m start address is: 44 (R11)
; speed start address is: 40 (R10)
; font_width start address is: 36 (R9)
; text_frame start address is: 32 (R8)
0x0C50	0x64300010  LDK.L	R3, #16
0x0C54	0x44318092  SUB.L	R3, R3, R9
0x0C58	0x4431C00C  BEXTS.L	R3, R3, #0
0x0C5C	0x44318090  ADD.L	R3, R3, R9
0x0C60	0x5BE58032  CMP.S	R11, R3
0x0C64	0x01280347  JMPC	R30, GTE, #1, L_shift_lett_onto_left202
;matrixrgb_firmware.c, 1142 :: 		for ( k = 0; k < 16; k++ )
; k start address is: 0 (R0)
0x0C68	0x64000000  LDK.L	R0, #0
; k end address is: 0 (R0)
; text_frame end address is: 32 (R8)
; font_width end address is: 36 (R9)
; m end address is: 44 (R11)
; speed end address is: 40 (R10)
0x0C6C	0x44C0500D  BEXTU.L	R12, R0, #256
L_shift_lett_onto_left204:
; k start address is: 48 (R12)
; text_frame start address is: 32 (R8)
; font_width start address is: 36 (R9)
; speed start address is: 40 (R10)
; m start address is: 44 (R11)
0x0C70	0x59E64102  CMP.B	R12, #16
0x0C74	0x00600335  JMPC	R30, C, #0, L_shift_lett_onto_left205
;matrixrgb_firmware.c, 1144 :: 		buffer = text_frame[k * 16 + ( 15 - m )];
0x0C78	0x4436500D  BEXTU.L	R3, R12, #256
0x0C7C	0x4441C048  ASHL.L	R4, R3, #4
0x0C80	0x4442400C  BEXTS.L	R4, R4, #0
0x0C84	0x6430000F  LDK.L	R3, #15
0x0C88	0x443180B2  SUB.L	R3, R3, R11
0x0C8C	0x4431C00C  BEXTS.L	R3, R3, #0
0x0C90	0x44320030  ADD.L	R3, R4, R3
0x0C94	0x4431C00C  BEXTS.L	R3, R3, #0
0x0C98	0x44340030  ADD.L	R3, R8, R3
0x0C9C	0xA8318000  LDI.B	R3, R3, #0
;matrixrgb_firmware.c, 1145 :: 		red   = ( buffer & 0x04 );
0x0CA0	0x4451C044  AND.L	R5, R3, #4
;matrixrgb_firmware.c, 1146 :: 		green = ( buffer & 0x02 );
0x0CA4	0x4441C024  AND.L	R4, R3, #2
;matrixrgb_firmware.c, 1147 :: 		blue  = ( buffer & 0x01 );
0x0CA8	0x4431C014  AND.L	R3, R3, #1
;matrixrgb_firmware.c, 1148 :: 		write_pixel( k, 0, red, green, blue );
0x0CAC	0xB1F20000  STI.B	SP, #0, R4
0x0CB0	0x4422D00D  BEXTU.L	R2, R5, #256
0x0CB4	0x64100000  LDK.L	R1, #0
0x0CB8	0x4406500D  BEXTU.L	R0, R12, #256
0x0CBC	0x4441D00D  BEXTU.L	R4, R3, #256
0x0CC0	0xA83F8000  LDI.B	R3, SP, #0
0x0CC4	0x00340439  CALL	_write_pixel+0
;matrixrgb_firmware.c, 1142 :: 		for ( k = 0; k < 16; k++ )
0x0CC8	0x44C64010  ADD.L	R12, R12, #1
0x0CCC	0x44C6500D  BEXTU.L	R12, R12, #256
;matrixrgb_firmware.c, 1149 :: 		}
; k end address is: 48 (R12)
0x0CD0	0x0030031C  JMP	L_shift_lett_onto_left204
L_shift_lett_onto_left205:
;matrixrgb_firmware.c, 1151 :: 		for ( p = 0; p < speed; p++ )
; p start address is: 0 (R0)
0x0CD4	0x64000000  LDK.L	R0, #0
; text_frame end address is: 32 (R8)
; font_width end address is: 36 (R9)
; m end address is: 44 (R11)
; p end address is: 0 (R0)
; speed end address is: 40 (R10)
0x0CD8	0x44C44000  MOVE.L	R12, R8
0x0CDC	0x44D5D00D  BEXTU.L	R13, R11, #256
0x0CE0	0x44B4D00D  BEXTU.L	R11, R9, #256
0x0CE4	0x4490500D  BEXTU.L	R9, R0, #256
L_shift_lett_onto_left207:
; p start address is: 36 (R9)
; m start address is: 52 (R13)
; speed start address is: 40 (R10)
; font_width start address is: 44 (R11)
; text_frame start address is: 48 (R12)
0x0CE8	0x5BE480A2  CMP.S	R9, R10
0x0CEC	0x00600340  JMPC	R30, C, #0, L_shift_lett_onto_left208
;matrixrgb_firmware.c, 1152 :: 		refresh();
0x0CF0	0x00340384  CALL	_refresh+0
;matrixrgb_firmware.c, 1151 :: 		for ( p = 0; p < speed; p++ )
0x0CF4	0x4494C010  ADD.L	R9, R9, #1
0x0CF8	0x4494D00D  BEXTU.L	R9, R9, #256
;matrixrgb_firmware.c, 1152 :: 		refresh();
; p end address is: 36 (R9)
0x0CFC	0x0030033A  JMP	L_shift_lett_onto_left207
L_shift_lett_onto_left208:
;matrixrgb_firmware.c, 1154 :: 		display_shift_right();
0x0D00	0x003403ED  CALL	_display_shift_right+0
;matrixrgb_firmware.c, 1140 :: 		for ( m = difference; m < ( 16 - font_width ) + font_width ; m++ )
0x0D04	0x4436C010  ADD.L	R3, R13, #1
; m end address is: 52 (R13)
; m start address is: 0 (R0)
0x0D08	0x4401D00D  BEXTU.L	R0, R3, #256
;matrixrgb_firmware.c, 1155 :: 		}
0x0D0C	0x44864000  MOVE.L	R8, R12
; speed end address is: 40 (R10)
; font_width end address is: 44 (R11)
; text_frame end address is: 48 (R12)
; m end address is: 0 (R0)
0x0D10	0x4495D00D  BEXTU.L	R9, R11, #256
0x0D14	0x44B0500D  BEXTU.L	R11, R0, #256
0x0D18	0x00300314  JMP	L_shift_lett_onto_left201
L_shift_lett_onto_left202:
;matrixrgb_firmware.c, 1156 :: 		}
L_end_shift_lett_onto_left:
0x0D1C	0x99D00000  UNLINK	LR
0x0D20	0xA0000000  RETURN	
; end of _shift_lett_onto_left
_display_shift_up_command:
;matrixrgb_firmware.c, 429 :: 		void display_shift_up_command( void )
;matrixrgb_firmware.c, 431 :: 		display_shift_up();
0x2D00	0x00340628  CALL	_display_shift_up+0
;matrixrgb_firmware.c, 432 :: 		}
L_end_display_shift_up_command:
0x2D04	0xA0000000  RETURN	
; end of _display_shift_up_command
_display_shift_up:
;matrixrgb_firmware.c, 1271 :: 		void display_shift_up( void )
;matrixrgb_firmware.c, 1273 :: 		uint16_t row          = 0;
;matrixrgb_firmware.c, 1274 :: 		uint16_t column       = 0;
;matrixrgb_firmware.c, 1275 :: 		uint16_t temp_col     = 0;
;matrixrgb_firmware.c, 1276 :: 		uint16_t temp_row     = 0;
;matrixrgb_firmware.c, 1277 :: 		uint8_t buffer        = 0;
;matrixrgb_firmware.c, 1279 :: 		for ( row = 0; row < p_height; row++ )
; row start address is: 28 (R7)
0x18A0	0x64700000  LDK.L	R7, #0
; row end address is: 28 (R7)
L_display_shift_up251:
; row start address is: 28 (R7)
0x18A4	0xC200EB44  LDA.S	R0, _p_height+0
0x18A8	0x5BE38002  CMP.S	R7, R0
0x18AC	0x0060065D  JMPC	R30, C, #0, L_display_shift_up252
;matrixrgb_firmware.c, 1281 :: 		for ( column = ( p_width - 1 ); column > 0; column-- )
0x18B0	0xC20000E2  LDA.S	R0, _p_width+0
0x18B4	0x44804012  SUB.L	R8, R0, #1
0x18B8	0x4484400D  BEXTU.L	R8, R8, #0
; column start address is: 32 (R8)
; column end address is: 32 (R8)
; row end address is: 28 (R7)
L_display_shift_up254:
; column start address is: 32 (R8)
; row start address is: 28 (R7)
0x18BC	0x5BE44002  CMP.S	R8, #0
0x18C0	0x01A0064B  JMPC	R30, A, #0, L_display_shift_up255
;matrixrgb_firmware.c, 1283 :: 		if ( row == ( p_height - 1 ) )
0x18C4	0xC200EB44  LDA.S	R0, _p_height+0
0x18C8	0x44004012  SUB.L	R0, R0, #1
0x18CC	0x5BE38002  CMP.S	R7, R0
0x18D0	0x00200639  JMPC	R30, Z, #0, L_display_shift_up257
;matrixrgb_firmware.c, 1284 :: 		erase_pixel( row, column );
0x18D4	0x4414400D  BEXTU.L	R1, R8, #0
0x18D8	0x4403C00D  BEXTU.L	R0, R7, #0
0x18DC	0x0034024E  CALL	_erase_pixel+0
0x18E0	0x00300648  JMP	L_display_shift_up258
L_display_shift_up257:
;matrixrgb_firmware.c, 1288 :: 		temp_col   = column;
; temp_col start address is: 36 (R9)
0x18E4	0x4494400D  BEXTU.L	R9, R8, #0
;matrixrgb_firmware.c, 1289 :: 		temp_row   = row + 1;
0x18E8	0x4403C010  ADD.L	R0, R7, #1
0x18EC	0x4400400D  BEXTU.L	R0, R0, #0
;matrixrgb_firmware.c, 1290 :: 		buffer = FB[ get_coord_index( temp_row, temp_col ) ];
0x18F0	0x4414400D  BEXTU.L	R1, R8, #0
0x18F4	0x00340349  CALL	matrixrgb_firmware_get_coord_index+0
0x18F8	0xC410EB48  LDA.L	R1, _FB+0
0x18FC	0x44008000  ADD.L	R0, R1, R0
0x1900	0xA8000000  LDI.B	R0, R0, #0
; buffer start address is: 40 (R10)
0x1904	0x44A0500D  BEXTU.L	R10, R0, #256
;matrixrgb_firmware.c, 1291 :: 		FB[ get_coord_index( row, temp_col ) ] = buffer;
0x1908	0x4414C00D  BEXTU.L	R1, R9, #0
; temp_col end address is: 36 (R9)
0x190C	0x4403C00D  BEXTU.L	R0, R7, #0
0x1910	0x00340349  CALL	matrixrgb_firmware_get_coord_index+0
0x1914	0xC410EB48  LDA.L	R1, _FB+0
0x1918	0x44008000  ADD.L	R0, R1, R0
0x191C	0xB0050000  STI.B	R0, #0, R10
; buffer end address is: 40 (R10)
;matrixrgb_firmware.c, 1292 :: 		}
L_display_shift_up258:
;matrixrgb_firmware.c, 1281 :: 		for ( column = ( p_width - 1 ); column > 0; column-- )
0x1920	0x44844012  SUB.L	R8, R8, #1
0x1924	0x4484400D  BEXTU.L	R8, R8, #0
;matrixrgb_firmware.c, 1293 :: 		}
; column end address is: 32 (R8)
0x1928	0x0030062F  JMP	L_display_shift_up254
L_display_shift_up255:
;matrixrgb_firmware.c, 1295 :: 		temp_col   = 0;
; temp_col start address is: 32 (R8)
0x192C	0x64800000  LDK.L	R8, #0
;matrixrgb_firmware.c, 1296 :: 		temp_row   = row + 1;
0x1930	0x4403C010  ADD.L	R0, R7, #1
0x1934	0x4400400D  BEXTU.L	R0, R0, #0
;matrixrgb_firmware.c, 1297 :: 		buffer = FB[ get_coord_index( temp_row, temp_col ) ];
0x1938	0x64100000  LDK.L	R1, #0
0x193C	0x00340349  CALL	matrixrgb_firmware_get_coord_index+0
0x1940	0xC410EB48  LDA.L	R1, _FB+0
0x1944	0x44008000  ADD.L	R0, R1, R0
0x1948	0xA8000000  LDI.B	R0, R0, #0
; buffer start address is: 36 (R9)
0x194C	0x4490500D  BEXTU.L	R9, R0, #256
;matrixrgb_firmware.c, 1298 :: 		FB[ get_coord_index( row, temp_col ) ] = buffer;
0x1950	0x4414400D  BEXTU.L	R1, R8, #0
; temp_col end address is: 32 (R8)
0x1954	0x4403C00D  BEXTU.L	R0, R7, #0
0x1958	0x00340349  CALL	matrixrgb_firmware_get_coord_index+0
0x195C	0xC410EB48  LDA.L	R1, _FB+0
0x1960	0x44008000  ADD.L	R0, R1, R0
0x1964	0xB0048000  STI.B	R0, #0, R9
; buffer end address is: 36 (R9)
;matrixrgb_firmware.c, 1279 :: 		for ( row = 0; row < p_height; row++ )
0x1968	0x4473C010  ADD.L	R7, R7, #1
0x196C	0x4473C00D  BEXTU.L	R7, R7, #0
;matrixrgb_firmware.c, 1299 :: 		}
; row end address is: 28 (R7)
0x1970	0x00300629  JMP	L_display_shift_up251
L_display_shift_up252:
;matrixrgb_firmware.c, 1301 :: 		}
L_end_display_shift_up:
0x1974	0xA0000000  RETURN	
; end of _display_shift_up
_display_shift_down_command:
;matrixrgb_firmware.c, 435 :: 		void display_shift_down_command( void )
;matrixrgb_firmware.c, 437 :: 		display_shift_down();
0x2B48	0x0034065E  CALL	_display_shift_down+0
;matrixrgb_firmware.c, 438 :: 		}
L_end_display_shift_down_command:
0x2B4C	0xA0000000  RETURN	
; end of _display_shift_down_command
_display_shift_down:
;matrixrgb_firmware.c, 1303 :: 		void display_shift_down( void )
;matrixrgb_firmware.c, 1305 :: 		uint16_t i            = 0;
;matrixrgb_firmware.c, 1306 :: 		uint16_t row          = 0;
;matrixrgb_firmware.c, 1307 :: 		uint16_t column       = 0;
;matrixrgb_firmware.c, 1308 :: 		uint16_t temp_col     = 0;
;matrixrgb_firmware.c, 1309 :: 		uint16_t temp_row     = 0;
;matrixrgb_firmware.c, 1310 :: 		uint8_t buffer       = 0;
;matrixrgb_firmware.c, 1312 :: 		for ( row = ( p_height - 1 ); row > 0; row-- )
0x1978	0xC200EB44  LDA.S	R0, _p_height+0
0x197C	0x44704012  SUB.L	R7, R0, #1
0x1980	0x4473C00D  BEXTU.L	R7, R7, #0
; row start address is: 28 (R7)
; row end address is: 28 (R7)
L_display_shift_down259:
; row start address is: 28 (R7)
0x1984	0x5BE3C002  CMP.S	R7, #0
0x1988	0x01A0068C  JMPC	R30, A, #0, L_display_shift_down260
;matrixrgb_firmware.c, 1314 :: 		for ( column = ( p_width - 1 ); column > 0; column-- )
0x198C	0xC20000E2  LDA.S	R0, _p_width+0
0x1990	0x44804012  SUB.L	R8, R0, #1
0x1994	0x4484400D  BEXTU.L	R8, R8, #0
; column start address is: 32 (R8)
; column end address is: 32 (R8)
; row end address is: 28 (R7)
L_display_shift_down262:
; column start address is: 32 (R8)
; row start address is: 28 (R7)
0x1998	0x5BE44002  CMP.S	R8, #0
0x199C	0x01A0067A  JMPC	R30, A, #0, L_display_shift_down263
;matrixrgb_firmware.c, 1317 :: 		temp_col   = column;
; temp_col start address is: 36 (R9)
0x19A0	0x4494400D  BEXTU.L	R9, R8, #0
;matrixrgb_firmware.c, 1318 :: 		temp_row   = row - 1;
0x19A4	0x4403C012  SUB.L	R0, R7, #1
0x19A8	0x4400400D  BEXTU.L	R0, R0, #0
;matrixrgb_firmware.c, 1319 :: 		buffer = FB[ get_coord_index( temp_row, temp_col ) ];
0x19AC	0x4414400D  BEXTU.L	R1, R8, #0
0x19B0	0x00340349  CALL	matrixrgb_firmware_get_coord_index+0
0x19B4	0xC410EB48  LDA.L	R1, _FB+0
0x19B8	0x44008000  ADD.L	R0, R1, R0
0x19BC	0xA8000000  LDI.B	R0, R0, #0
; buffer start address is: 40 (R10)
0x19C0	0x44A0500D  BEXTU.L	R10, R0, #256
;matrixrgb_firmware.c, 1320 :: 		FB[ get_coord_index( row, temp_col ) ] = buffer;
0x19C4	0x4414C00D  BEXTU.L	R1, R9, #0
; temp_col end address is: 36 (R9)
0x19C8	0x4403C00D  BEXTU.L	R0, R7, #0
0x19CC	0x00340349  CALL	matrixrgb_firmware_get_coord_index+0
0x19D0	0xC410EB48  LDA.L	R1, _FB+0
0x19D4	0x44008000  ADD.L	R0, R1, R0
0x19D8	0xB0050000  STI.B	R0, #0, R10
; buffer end address is: 40 (R10)
;matrixrgb_firmware.c, 1314 :: 		for ( column = ( p_width - 1 ); column > 0; column-- )
0x19DC	0x44844012  SUB.L	R8, R8, #1
0x19E0	0x4484400D  BEXTU.L	R8, R8, #0
;matrixrgb_firmware.c, 1321 :: 		}
; column end address is: 32 (R8)
0x19E4	0x00300666  JMP	L_display_shift_down262
L_display_shift_down263:
;matrixrgb_firmware.c, 1323 :: 		temp_col   = 0;
; temp_col start address is: 32 (R8)
0x19E8	0x64800000  LDK.L	R8, #0
;matrixrgb_firmware.c, 1324 :: 		temp_row   = row - 1;
0x19EC	0x4403C012  SUB.L	R0, R7, #1
0x19F0	0x4400400D  BEXTU.L	R0, R0, #0
;matrixrgb_firmware.c, 1325 :: 		buffer = FB[ get_coord_index( temp_row, temp_col ) ];
0x19F4	0x64100000  LDK.L	R1, #0
0x19F8	0x00340349  CALL	matrixrgb_firmware_get_coord_index+0
0x19FC	0xC410EB48  LDA.L	R1, _FB+0
0x1A00	0x44008000  ADD.L	R0, R1, R0
0x1A04	0xA8000000  LDI.B	R0, R0, #0
; buffer start address is: 36 (R9)
0x1A08	0x4490500D  BEXTU.L	R9, R0, #256
;matrixrgb_firmware.c, 1326 :: 		FB[ get_coord_index( row, temp_col ) ] = buffer;
0x1A0C	0x4414400D  BEXTU.L	R1, R8, #0
; temp_col end address is: 32 (R8)
0x1A10	0x4403C00D  BEXTU.L	R0, R7, #0
0x1A14	0x00340349  CALL	matrixrgb_firmware_get_coord_index+0
0x1A18	0xC410EB48  LDA.L	R1, _FB+0
0x1A1C	0x44008000  ADD.L	R0, R1, R0
0x1A20	0xB0048000  STI.B	R0, #0, R9
; buffer end address is: 36 (R9)
;matrixrgb_firmware.c, 1312 :: 		for ( row = ( p_height - 1 ); row > 0; row-- )
0x1A24	0x4473C012  SUB.L	R7, R7, #1
0x1A28	0x4473C00D  BEXTU.L	R7, R7, #0
;matrixrgb_firmware.c, 1327 :: 		}
; row end address is: 28 (R7)
0x1A2C	0x00300661  JMP	L_display_shift_down259
L_display_shift_down260:
;matrixrgb_firmware.c, 1328 :: 		for ( i = 0; i < p_width; i++ )
; i start address is: 28 (R7)
0x1A30	0x64700000  LDK.L	R7, #0
; i end address is: 28 (R7)
L_display_shift_down265:
; i start address is: 28 (R7)
0x1A34	0xC20000E2  LDA.S	R0, _p_width+0
0x1A38	0x5BE38002  CMP.S	R7, R0
0x1A3C	0x00600696  JMPC	R30, C, #0, L_display_shift_down266
;matrixrgb_firmware.c, 1329 :: 		erase_pixel( 0, i );
0x1A40	0x4413C00D  BEXTU.L	R1, R7, #0
0x1A44	0x64000000  LDK.L	R0, #0
0x1A48	0x0034024E  CALL	_erase_pixel+0
;matrixrgb_firmware.c, 1328 :: 		for ( i = 0; i < p_width; i++ )
0x1A4C	0x4473C010  ADD.L	R7, R7, #1
0x1A50	0x4473C00D  BEXTU.L	R7, R7, #0
;matrixrgb_firmware.c, 1329 :: 		erase_pixel( 0, i );
; i end address is: 28 (R7)
0x1A54	0x0030068D  JMP	L_display_shift_down265
L_display_shift_down266:
;matrixrgb_firmware.c, 1331 :: 		}
L_end_display_shift_down:
0x1A58	0xA0000000  RETURN	
; end of _display_shift_down
_display_shift_right_command:
;matrixrgb_firmware.c, 441 :: 		void display_shift_right_command( void )
;matrixrgb_firmware.c, 443 :: 		display_shift_right();
0x2B50	0x003403ED  CALL	_display_shift_right+0
;matrixrgb_firmware.c, 444 :: 		}
L_end_display_shift_right_command:
0x2B54	0xA0000000  RETURN	
; end of _display_shift_right_command
_display_shift_left_command:
;matrixrgb_firmware.c, 447 :: 		void display_shift_left_command( void )
;matrixrgb_firmware.c, 449 :: 		display_shift_left();
0x2B58	0x00340412  CALL	_display_shift_left+0
;matrixrgb_firmware.c, 450 :: 		}
L_end_display_shift_left_command:
0x2B5C	0xA0000000  RETURN	
; end of _display_shift_left_command
_display_scroll_off_scrn_up_command:
;matrixrgb_firmware.c, 453 :: 		void display_scroll_off_scrn_up_command( void )
;matrixrgb_firmware.c, 455 :: 		uint8_t speed = 0;
;matrixrgb_firmware.c, 457 :: 		receive_data( &firm_buffer, 1 );
0x2454	0x64100001  LDK.L	R1, #1
0x2458	0x6400005F  LDK.L	R0, #_firm_buffer+0
0x245C	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware.c, 459 :: 		scroll_off_screen_up( speed );
0x2460	0xC000005F  LDA.B	R0, _firm_buffer+0
0x2464	0x00340612  CALL	_scroll_off_screen_up+0
;matrixrgb_firmware.c, 460 :: 		}
L_end_display_scroll_off_scrn_up_command:
0x2468	0xA0000000  RETURN	
; end of _display_scroll_off_scrn_up_command
_scroll_off_screen_up:
;matrixrgb_firmware.c, 1333 :: 		void scroll_off_screen_up( uint16_t speed )
; i start address is: 44 (R11)
0x1848	0x95D00004  LINK	LR, #4
;matrixrgb_firmware.c, 1337 :: 		for ( i = 0; i < p_height; i++ )
;matrixrgb_firmware.c, 1333 :: 		void scroll_off_screen_up( uint16_t speed )
;matrixrgb_firmware.c, 1337 :: 		for ( i = 0; i < p_height; i++ )
;matrixrgb_firmware.c, 1333 :: 		void scroll_off_screen_up( uint16_t speed )
0x184C	0xB3F00000  STI.S	SP, #0, R0
; i end address is: 44 (R11)
;matrixrgb_firmware.c, 1337 :: 		for ( i = 0; i < p_height; i++ )
; i start address is: 44 (R11)
0x1850	0x64B00000  LDK.L	R11, #0
; i end address is: 44 (R11)
L_scroll_off_screen_up268:
; i start address is: 44 (R11)
0x1854	0xC210EB44  LDA.S	R1, _p_height+0
0x1858	0x5BE58012  CMP.S	R11, R1
0x185C	0x00600626  JMPC	R30, C, #0, L_scroll_off_screen_up269
;matrixrgb_firmware.c, 1339 :: 		display_shift_up();
0x1860	0x00340628  CALL	_display_shift_up+0
;matrixrgb_firmware.c, 1340 :: 		for ( j = 0; j < speed; j++ )
; j start address is: 36 (R9)
0x1864	0x64900000  LDK.L	R9, #0
; j end address is: 36 (R9)
; i end address is: 44 (R11)
0x1868	0x44A5C00D  BEXTU.L	R10, R11, #0
L_scroll_off_screen_up271:
; j start address is: 36 (R9)
; i start address is: 40 (R10)
0x186C	0xAA1F8000  LDI.S	R1, SP, #0
0x1870	0x5BE48012  CMP.S	R9, R1
0x1874	0x00600623  JMPC	R30, C, #0, L_scroll_off_screen_up272
;matrixrgb_firmware.c, 1341 :: 		refresh();
0x1878	0x00340384  CALL	_refresh+0
;matrixrgb_firmware.c, 1340 :: 		for ( j = 0; j < speed; j++ )
0x187C	0x4414C010  ADD.L	R1, R9, #1
; j end address is: 36 (R9)
; j start address is: 0 (R0)
0x1880	0x4400C00D  BEXTU.L	R0, R1, #0
;matrixrgb_firmware.c, 1341 :: 		refresh();
; j end address is: 0 (R0)
0x1884	0x4490400D  BEXTU.L	R9, R0, #0
0x1888	0x0030061B  JMP	L_scroll_off_screen_up271
L_scroll_off_screen_up272:
;matrixrgb_firmware.c, 1337 :: 		for ( i = 0; i < p_height; i++ )
0x188C	0x44154010  ADD.L	R1, R10, #1
; i end address is: 40 (R10)
; i start address is: 44 (R11)
0x1890	0x44B0C00D  BEXTU.L	R11, R1, #0
;matrixrgb_firmware.c, 1342 :: 		}
; i end address is: 44 (R11)
0x1894	0x00300615  JMP	L_scroll_off_screen_up268
L_scroll_off_screen_up269:
;matrixrgb_firmware.c, 1343 :: 		}
L_end_scroll_off_screen_up:
0x1898	0x99D00000  UNLINK	LR
0x189C	0xA0000000  RETURN	
; end of _scroll_off_screen_up
_display_scroll_off_scrn_down_command:
;matrixrgb_firmware.c, 463 :: 		void display_scroll_off_scrn_down_command( void )
;matrixrgb_firmware.c, 465 :: 		uint8_t speed = 0;
;matrixrgb_firmware.c, 467 :: 		receive_data( &firm_buffer, 1 );
0x24BC	0x64100001  LDK.L	R1, #1
0x24C0	0x6400005F  LDK.L	R0, #_firm_buffer+0
0x24C4	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware.c, 469 :: 		scroll_off_screen_down( speed );
0x24C8	0xC000005F  LDA.B	R0, _firm_buffer+0
0x24CC	0x00340558  CALL	_scroll_off_screen_down+0
;matrixrgb_firmware.c, 470 :: 		}
L_end_display_scroll_off_scrn_down_command:
0x24D0	0xA0000000  RETURN	
; end of _display_scroll_off_scrn_down_command
_scroll_off_screen_down:
;matrixrgb_firmware.c, 1345 :: 		void scroll_off_screen_down( uint16_t speed )
; i start address is: 44 (R11)
0x1560	0x95D00004  LINK	LR, #4
;matrixrgb_firmware.c, 1349 :: 		for ( i = 0; i < p_height; i++ )
;matrixrgb_firmware.c, 1345 :: 		void scroll_off_screen_down( uint16_t speed )
;matrixrgb_firmware.c, 1349 :: 		for ( i = 0; i < p_height; i++ )
;matrixrgb_firmware.c, 1345 :: 		void scroll_off_screen_down( uint16_t speed )
0x1564	0xB3F00000  STI.S	SP, #0, R0
; i end address is: 44 (R11)
;matrixrgb_firmware.c, 1349 :: 		for ( i = 0; i < p_height; i++ )
; i start address is: 44 (R11)
0x1568	0x64B00000  LDK.L	R11, #0
; i end address is: 44 (R11)
L_scroll_off_screen_down274:
; i start address is: 44 (R11)
0x156C	0xC210EB44  LDA.S	R1, _p_height+0
0x1570	0x5BE58012  CMP.S	R11, R1
0x1574	0x0060056C  JMPC	R30, C, #0, L_scroll_off_screen_down275
;matrixrgb_firmware.c, 1351 :: 		display_shift_down();
0x1578	0x0034065E  CALL	_display_shift_down+0
;matrixrgb_firmware.c, 1352 :: 		for ( j = 0; j < speed; j++ )
; j start address is: 36 (R9)
0x157C	0x64900000  LDK.L	R9, #0
; j end address is: 36 (R9)
; i end address is: 44 (R11)
0x1580	0x44A5C00D  BEXTU.L	R10, R11, #0
L_scroll_off_screen_down277:
; j start address is: 36 (R9)
; i start address is: 40 (R10)
0x1584	0xAA1F8000  LDI.S	R1, SP, #0
0x1588	0x5BE48012  CMP.S	R9, R1
0x158C	0x00600569  JMPC	R30, C, #0, L_scroll_off_screen_down278
;matrixrgb_firmware.c, 1353 :: 		refresh();
0x1590	0x00340384  CALL	_refresh+0
;matrixrgb_firmware.c, 1352 :: 		for ( j = 0; j < speed; j++ )
0x1594	0x4414C010  ADD.L	R1, R9, #1
; j end address is: 36 (R9)
; j start address is: 0 (R0)
0x1598	0x4400C00D  BEXTU.L	R0, R1, #0
;matrixrgb_firmware.c, 1353 :: 		refresh();
; j end address is: 0 (R0)
0x159C	0x4490400D  BEXTU.L	R9, R0, #0
0x15A0	0x00300561  JMP	L_scroll_off_screen_down277
L_scroll_off_screen_down278:
;matrixrgb_firmware.c, 1349 :: 		for ( i = 0; i < p_height; i++ )
0x15A4	0x44154010  ADD.L	R1, R10, #1
; i end address is: 40 (R10)
; i start address is: 44 (R11)
0x15A8	0x44B0C00D  BEXTU.L	R11, R1, #0
;matrixrgb_firmware.c, 1354 :: 		}
; i end address is: 44 (R11)
0x15AC	0x0030055B  JMP	L_scroll_off_screen_down274
L_scroll_off_screen_down275:
;matrixrgb_firmware.c, 1356 :: 		}
L_end_scroll_off_screen_down:
0x15B0	0x99D00000  UNLINK	LR
0x15B4	0xA0000000  RETURN	
; end of _scroll_off_screen_down
_display_scroll_off_scrn_left_command:
;matrixrgb_firmware.c, 473 :: 		void display_scroll_off_scrn_left_command( void )
;matrixrgb_firmware.c, 475 :: 		uint8_t speed = 0;
;matrixrgb_firmware.c, 477 :: 		receive_data( &firm_buffer, 1 );
0x26E4	0x64100001  LDK.L	R1, #1
0x26E8	0x6400005F  LDK.L	R0, #_firm_buffer+0
0x26EC	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware.c, 479 :: 		scroll_off_screen_left( speed );
0x26F0	0xC000005F  LDA.B	R0, _firm_buffer+0
0x26F4	0x00340499  CALL	_scroll_off_screen_left+0
;matrixrgb_firmware.c, 480 :: 		}
L_end_display_scroll_off_scrn_left_command:
0x26F8	0xA0000000  RETURN	
; end of _display_scroll_off_scrn_left_command
_scroll_off_screen_left:
;matrixrgb_firmware.c, 1203 :: 		void scroll_off_screen_left( uint16_t speed )
; i start address is: 40 (R10)
0x1264	0x95D00004  LINK	LR, #4
;matrixrgb_firmware.c, 1207 :: 		for ( i = 0; i < p_width; i++ )
;matrixrgb_firmware.c, 1203 :: 		void scroll_off_screen_left( uint16_t speed )
;matrixrgb_firmware.c, 1207 :: 		for ( i = 0; i < p_width; i++ )
;matrixrgb_firmware.c, 1203 :: 		void scroll_off_screen_left( uint16_t speed )
0x1268	0xB3F00000  STI.S	SP, #0, R0
; i end address is: 40 (R10)
;matrixrgb_firmware.c, 1207 :: 		for ( i = 0; i < p_width; i++ )
; i start address is: 40 (R10)
0x126C	0x64A00000  LDK.L	R10, #0
; i end address is: 40 (R10)
L_scroll_off_screen_left227:
; i start address is: 40 (R10)
0x1270	0xC21000E2  LDA.S	R1, _p_width+0
0x1274	0x5BE50012  CMP.S	R10, R1
0x1278	0x006004AC  JMPC	R30, C, #0, L_scroll_off_screen_left228
;matrixrgb_firmware.c, 1209 :: 		display_shift_left();
0x127C	0x00340412  CALL	_display_shift_left+0
;matrixrgb_firmware.c, 1210 :: 		for ( p = 0; p < speed; p++ )
; p start address is: 36 (R9)
0x1280	0x64900000  LDK.L	R9, #0
; p end address is: 36 (R9)
; i end address is: 40 (R10)
L_scroll_off_screen_left230:
; p start address is: 36 (R9)
; i start address is: 40 (R10)
0x1284	0xAA1F8000  LDI.S	R1, SP, #0
0x1288	0x5BE48012  CMP.S	R9, R1
0x128C	0x006004A9  JMPC	R30, C, #0, L_scroll_off_screen_left231
;matrixrgb_firmware.c, 1211 :: 		refresh();
0x1290	0x00340384  CALL	_refresh+0
;matrixrgb_firmware.c, 1210 :: 		for ( p = 0; p < speed; p++ )
0x1294	0x4414C010  ADD.L	R1, R9, #1
; p end address is: 36 (R9)
; p start address is: 44 (R11)
0x1298	0x44B0C00D  BEXTU.L	R11, R1, #0
;matrixrgb_firmware.c, 1211 :: 		refresh();
; p end address is: 44 (R11)
0x129C	0x4495C00D  BEXTU.L	R9, R11, #0
0x12A0	0x003004A1  JMP	L_scroll_off_screen_left230
L_scroll_off_screen_left231:
;matrixrgb_firmware.c, 1207 :: 		for ( i = 0; i < p_width; i++ )
0x12A4	0x44A54010  ADD.L	R10, R10, #1
0x12A8	0x44A5400D  BEXTU.L	R10, R10, #0
;matrixrgb_firmware.c, 1212 :: 		}
; i end address is: 40 (R10)
0x12AC	0x0030049C  JMP	L_scroll_off_screen_left227
L_scroll_off_screen_left228:
;matrixrgb_firmware.c, 1213 :: 		}
L_end_scroll_off_screen_left:
0x12B0	0x99D00000  UNLINK	LR
0x12B4	0xA0000000  RETURN	
; end of _scroll_off_screen_left
_display_scroll_off_scrn_right_command:
;matrixrgb_firmware.c, 483 :: 		void display_scroll_off_scrn_right_command( void )
;matrixrgb_firmware.c, 485 :: 		uint8_t speed = 0;
;matrixrgb_firmware.c, 487 :: 		receive_data( &firm_buffer, 1 );
0x26FC	0x64100001  LDK.L	R1, #1
0x2700	0x6400005F  LDK.L	R0, #_firm_buffer+0
0x2704	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware.c, 489 :: 		scroll_off_screen_right( speed );
0x2708	0xC000005F  LDA.B	R0, _firm_buffer+0
0x270C	0x00340543  CALL	_scroll_off_screen_right+0
;matrixrgb_firmware.c, 490 :: 		}
L_end_display_scroll_off_scrn_right_command:
0x2710	0xA0000000  RETURN	
; end of _display_scroll_off_scrn_right_command
_scroll_off_screen_right:
;matrixrgb_firmware.c, 1215 :: 		void scroll_off_screen_right( uint16_t speed )
; i start address is: 40 (R10)
0x150C	0x95D00004  LINK	LR, #4
;matrixrgb_firmware.c, 1219 :: 		for ( i = 0; i < p_width; i++ )
;matrixrgb_firmware.c, 1215 :: 		void scroll_off_screen_right( uint16_t speed )
;matrixrgb_firmware.c, 1219 :: 		for ( i = 0; i < p_width; i++ )
;matrixrgb_firmware.c, 1215 :: 		void scroll_off_screen_right( uint16_t speed )
0x1510	0xB3F00000  STI.S	SP, #0, R0
; i end address is: 40 (R10)
;matrixrgb_firmware.c, 1219 :: 		for ( i = 0; i < p_width; i++ )
; i start address is: 40 (R10)
0x1514	0x64A00000  LDK.L	R10, #0
; i end address is: 40 (R10)
L_scroll_off_screen_right233:
; i start address is: 40 (R10)
0x1518	0xC21000E2  LDA.S	R1, _p_width+0
0x151C	0x5BE50012  CMP.S	R10, R1
0x1520	0x00600556  JMPC	R30, C, #0, L_scroll_off_screen_right234
;matrixrgb_firmware.c, 1221 :: 		display_shift_right();
0x1524	0x003403ED  CALL	_display_shift_right+0
;matrixrgb_firmware.c, 1222 :: 		for ( p = 0; p < speed; p++ )
; p start address is: 36 (R9)
0x1528	0x64900000  LDK.L	R9, #0
; p end address is: 36 (R9)
; i end address is: 40 (R10)
L_scroll_off_screen_right236:
; p start address is: 36 (R9)
; i start address is: 40 (R10)
0x152C	0xAA1F8000  LDI.S	R1, SP, #0
0x1530	0x5BE48012  CMP.S	R9, R1
0x1534	0x00600553  JMPC	R30, C, #0, L_scroll_off_screen_right237
;matrixrgb_firmware.c, 1223 :: 		refresh();
0x1538	0x00340384  CALL	_refresh+0
;matrixrgb_firmware.c, 1222 :: 		for ( p = 0; p < speed; p++ )
0x153C	0x4414C010  ADD.L	R1, R9, #1
; p end address is: 36 (R9)
; p start address is: 44 (R11)
0x1540	0x44B0C00D  BEXTU.L	R11, R1, #0
;matrixrgb_firmware.c, 1223 :: 		refresh();
; p end address is: 44 (R11)
0x1544	0x4495C00D  BEXTU.L	R9, R11, #0
0x1548	0x0030054B  JMP	L_scroll_off_screen_right236
L_scroll_off_screen_right237:
;matrixrgb_firmware.c, 1219 :: 		for ( i = 0; i < p_width; i++ )
0x154C	0x44A54010  ADD.L	R10, R10, #1
0x1550	0x44A5400D  BEXTU.L	R10, R10, #0
;matrixrgb_firmware.c, 1224 :: 		}
; i end address is: 40 (R10)
0x1554	0x00300546  JMP	L_scroll_off_screen_right233
L_scroll_off_screen_right234:
;matrixrgb_firmware.c, 1227 :: 		}
L_end_scroll_off_screen_right:
0x1558	0x99D00000  UNLINK	LR
0x155C	0xA0000000  RETURN	
; end of _scroll_off_screen_right
_clear_screen_command:
;matrixrgb_firmware.c, 497 :: 		void clear_screen_command( void )
;matrixrgb_firmware.c, 499 :: 		clear_frame_buffer();
0x26DC	0x00340697  CALL	_clear_frame_buffer+0
;matrixrgb_firmware.c, 500 :: 		}
L_end_clear_screen_command:
0x26E0	0xA0000000  RETURN	
; end of _clear_screen_command
_clear_frame_buffer:
;matrixrgb_firmware.c, 743 :: 		void clear_frame_buffer( void )
;matrixrgb_firmware.c, 746 :: 		uint8_t *ptr = FB;
; ptr start address is: 12 (R3)
0x1A5C	0xC430EB48  LDA.L	R3, _FB+0
;matrixrgb_firmware.c, 747 :: 		uint8_t zero = 0x00;
; zero start address is: 8 (R2)
0x1A60	0x64200000  LDK.L	R2, #0
;matrixrgb_firmware.c, 749 :: 		for ( i = 0; i < ( p_width * p_height ); i++ )
; i start address is: 16 (R4)
0x1A64	0x64400000  LDK.L	R4, #0
; i end address is: 16 (R4)
L_clear_frame_buffer77:
; i start address is: 16 (R4)
; zero start address is: 8 (R2)
; zero end address is: 8 (R2)
; ptr start address is: 12 (R3)
; ptr end address is: 12 (R3)
0x1A68	0xC210EB44  LDA.S	R1, _p_height+0
0x1A6C	0xC20000E2  LDA.S	R0, _p_width+0
0x1A70	0xF4000018  MUL.L	R0, R0, R1
0x1A74	0x5BE20002  CMP.S	R4, R0
0x1A78	0x006006A4  JMPC	R30, C, #0, L_clear_frame_buffer78
; zero end address is: 8 (R2)
; ptr end address is: 12 (R3)
;matrixrgb_firmware.c, 750 :: 		ptr[i] = zero;
; ptr start address is: 12 (R3)
; zero start address is: 8 (R2)
0x1A7C	0x44018040  ADD.L	R0, R3, R4
0x1A80	0xB0010000  STI.B	R0, #0, R2
;matrixrgb_firmware.c, 749 :: 		for ( i = 0; i < ( p_width * p_height ); i++ )
0x1A84	0x44424010  ADD.L	R4, R4, #1
0x1A88	0x4442400D  BEXTU.L	R4, R4, #0
;matrixrgb_firmware.c, 750 :: 		ptr[i] = zero;
; zero end address is: 8 (R2)
; ptr end address is: 12 (R3)
; i end address is: 16 (R4)
0x1A8C	0x0030069A  JMP	L_clear_frame_buffer77
L_clear_frame_buffer78:
;matrixrgb_firmware.c, 751 :: 		}
L_end_clear_frame_buffer:
0x1A90	0xA0000000  RETURN	
; end of _clear_frame_buffer
_write_text_command:
;matrixrgb_firmware.c, 136 :: 		void write_text_command( void )
0x24F0	0x95D00104  LINK	LR, #260
;matrixrgb_firmware.c, 138 :: 		uint8_t text[256] = { 0 };
0x24F4	0x45BFC030  ADD.L	R27, SP, #3
0x24F8	0x45ADD000  ADD.L	R26, R27, #256
0x24FC	0x65C03C74  LDK.L	R28, #?ICSwrite_text_command_text_L0+0
0x2500	0x003402D0  CALL	___CC2DB+0
;matrixrgb_firmware.c, 139 :: 		char *ptr = text;
0x2504	0x440FC030  ADD.L	R0, SP, #3
; ptr start address is: 12 (R3)
0x2508	0x44304000  MOVE.L	R3, R0
;matrixrgb_firmware.c, 140 :: 		uint8_t i = 0;
;matrixrgb_firmware.c, 141 :: 		uint8_t size = 0;
;matrixrgb_firmware.c, 148 :: 		receive_data( &firm_buffer, 1 );
0x250C	0x64100001  LDK.L	R1, #1
0x2510	0x6400005F  LDK.L	R0, #_firm_buffer+0
0x2514	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware.c, 149 :: 		size = firm_buffer[0];
; size start address is: 16 (R4)
0x2518	0xC040005F  LDA.B	R4, _firm_buffer+0
;matrixrgb_firmware.c, 150 :: 		receive_data( &firm_buffer, 3 );
0x251C	0x64100003  LDK.L	R1, #3
0x2520	0x6400005F  LDK.L	R0, #_firm_buffer+0
0x2524	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware.c, 151 :: 		my_color.red   = firm_buffer[0];
0x2528	0xC000005F  LDA.B	R0, _firm_buffer+0
0x252C	0xB1F00000  STI.B	SP, #0, R0
;matrixrgb_firmware.c, 152 :: 		my_color.green = firm_buffer[1];
0x2530	0xC0000060  LDA.B	R0, _firm_buffer+1
0x2534	0xB1F00001  STI.B	SP, #1, R0
;matrixrgb_firmware.c, 153 :: 		my_color.blue  = firm_buffer[2];
0x2538	0xC0000061  LDA.B	R0, _firm_buffer+2
0x253C	0xB1F00002  STI.B	SP, #2, R0
;matrixrgb_firmware.c, 154 :: 		receive_data( &firm_buffer, 4 );
0x2540	0x64100004  LDK.L	R1, #4
0x2544	0x6400005F  LDK.L	R0, #_firm_buffer+0
0x2548	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware.c, 159 :: 		start_col = col_hi;
; start_col start address is: 4 (R1)
0x254C	0xC0100060  LDA.B	R1, _firm_buffer+1
;matrixrgb_firmware.c, 160 :: 		start_col = ( start_col << 8 ) | col_lo;
0x2550	0x4400C00D  BEXTU.L	R0, R1, #0
; start_col end address is: 4 (R1)
0x2554	0x44104088  ASHL.L	R1, R0, #8
0x2558	0x4410C00D  BEXTU.L	R1, R1, #0
0x255C	0xC000005F  LDA.B	R0, _firm_buffer+0
0x2560	0x44008005  OR.L	R0, R1, R0
; start_col start address is: 8 (R2)
0x2564	0x4420400D  BEXTU.L	R2, R0, #0
;matrixrgb_firmware.c, 161 :: 		start_row = row_hi;
; start_row start address is: 4 (R1)
0x2568	0xC0100062  LDA.B	R1, _firm_buffer+3
;matrixrgb_firmware.c, 162 :: 		start_row = ( start_row << 8 ) | row_lo;
0x256C	0x4400C00D  BEXTU.L	R0, R1, #0
; start_row end address is: 4 (R1)
0x2570	0x44104088  ASHL.L	R1, R0, #8
0x2574	0x4410C00D  BEXTU.L	R1, R1, #0
0x2578	0xC0000061  LDA.B	R0, _firm_buffer+2
0x257C	0x44008005  OR.L	R0, R1, R0
; start_row start address is: 0 (R0)
;matrixrgb_firmware.c, 164 :: 		for ( i = 0; i < size; i++ )
; i start address is: 24 (R6)
0x2580	0x64600000  LDK.L	R6, #0
; ptr end address is: 12 (R3)
; size end address is: 16 (R4)
; start_col end address is: 8 (R2)
; start_row end address is: 0 (R0)
; i end address is: 24 (R6)
0x2584	0x4471C000  MOVE.L	R7, R3
0x2588	0x4430400D  BEXTU.L	R3, R0, #0
0x258C	0x4452500D  BEXTU.L	R5, R4, #256
0x2590	0x4441400D  BEXTU.L	R4, R2, #0
L_write_text_command7:
; i start address is: 24 (R6)
; start_row start address is: 12 (R3)
; start_col start address is: 16 (R4)
; size start address is: 20 (R5)
; ptr start address is: 28 (R7)
0x2594	0x59E30052  CMP.B	R6, R5
0x2598	0x00600970  JMPC	R30, C, #0, L_write_text_command8
;matrixrgb_firmware.c, 166 :: 		receive_data( &firm_buffer, 1 );
0x259C	0x64100001  LDK.L	R1, #1
0x25A0	0x6400005F  LDK.L	R0, #_firm_buffer+0
0x25A4	0x0034091B  CALL	_receive_data+0
;matrixrgb_firmware.c, 167 :: 		*ptr++ = firm_buffer[0];
0x25A8	0xC000005F  LDA.B	R0, _firm_buffer+0
0x25AC	0xB0700000  STI.B	R7, #0, R0
0x25B0	0x4473C010  ADD.L	R7, R7, #1
;matrixrgb_firmware.c, 164 :: 		for ( i = 0; i < size; i++ )
0x25B4	0x44634010  ADD.L	R6, R6, #1
0x25B8	0x4463500D  BEXTU.L	R6, R6, #256
;matrixrgb_firmware.c, 168 :: 		}
; size end address is: 20 (R5)
; ptr end address is: 28 (R7)
; i end address is: 24 (R6)
0x25BC	0x00300965  JMP	L_write_text_command7
L_write_text_command8:
;matrixrgb_firmware.c, 169 :: 		write_text( text, my_color, start_row, start_col );
0x25C0	0x440FC030  ADD.L	R0, SP, #3
0x25C4	0x4422400D  BEXTU.L	R2, R4, #0
; start_col end address is: 16 (R4)
0x25C8	0x4411C00D  BEXTU.L	R1, R3, #0
; start_row end address is: 12 (R3)
0x25CC	0x45FFC042  SUB.L	SP, SP, #4
0x25D0	0x45EFC040  ADD.L	R30, SP, #4
0x25D4	0xF1FF4045  MEMCPY.B	SP, R30, #4
0x25D8	0x003406A5  CALL	_write_text+0
0x25DC	0x45FFC040  ADD.L	SP, SP, #4
;matrixrgb_firmware.c, 171 :: 		}
L_end_write_text_command:
0x25E0	0x99D00000  UNLINK	LR
0x25E4	0xA0000000  RETURN	
; end of _write_text_command
_write_text:
;matrixrgb_firmware.c, 753 :: 		void write_text( uint8_t *text, color_t color, uint16_t start_row, uint16_t start_col )
; start_col start address is: 8 (R2)
; start_row start address is: 4 (R1)
; text start address is: 0 (R0)
0x1A94	0x95D00100  LINK	LR, #256
0x1A98	0x4430C00D  BEXTU.L	R3, R1, #0
0x1A9C	0x44104000  MOVE.L	R1, R0
; start_col end address is: 8 (R2)
; start_row end address is: 4 (R1)
; text end address is: 0 (R0)
; text start address is: 4 (R1)
; start_row start address is: 12 (R3)
; start_col start address is: 8 (R2)
;matrixrgb_firmware.c, 755 :: 		char *ptr = text;
; ptr start address is: 0 (R0)
0x1AA0	0x4400C000  MOVE.L	R0, R1
; text end address is: 4 (R1)
;matrixrgb_firmware.c, 756 :: 		uint8_t text_frame[256] = { 0 };
0x1AA4	0x45BFC000  ADD.L	R27, SP, #0
0x1AA8	0x45ADD000  ADD.L	R26, R27, #256
0x1AAC	0x65C03D74  LDK.L	R28, #?ICSwrite_text_text_frame_L0+0
0x1AB0	0x003402D0  CALL	___CC2DB+0
;matrixrgb_firmware.c, 759 :: 		uint8_t cnt = 0;
;matrixrgb_firmware.c, 761 :: 		uint8_t color_buffer = 0;
; color_buffer start address is: 20 (R5)
0x1AB4	0x64500000  LDK.L	R5, #0
;matrixrgb_firmware.c, 762 :: 		uint16_t curr_row = start_row;    //Current row and column are top left of letter
; curr_row start address is: 4 (R1)
0x1AB8	0x4411C00D  BEXTU.L	R1, R3, #0
; start_row end address is: 12 (R3)
;matrixrgb_firmware.c, 763 :: 		uint16_t curr_col = start_col;
; curr_col start address is: 16 (R4)
0x1ABC	0x4441400D  BEXTU.L	R4, R2, #0
;matrixrgb_firmware.c, 765 :: 		if ( ptr == NULL )          //Sanity check
0x1AC0	0x5DE04002  CMP.L	R0, #0
0x1AC4	0x002006B3  JMPC	R30, Z, #0, L_write_text80
; start_col end address is: 8 (R2)
; ptr end address is: 0 (R0)
; curr_col end address is: 16 (R4)
; color_buffer end address is: 20 (R5)
; curr_row end address is: 4 (R1)
;matrixrgb_firmware.c, 766 :: 		return;
0x1AC8	0x00300756  JMP	L_end_write_text
L_write_text80:
;matrixrgb_firmware.c, 768 :: 		if ( color.red  > 0 )       //Create color for frame
; curr_row start address is: 4 (R1)
; color_buffer start address is: 20 (R5)
; curr_col start address is: 16 (R4)
; ptr start address is: 0 (R0)
; start_col start address is: 8 (R2)
0x1ACC	0x443FD080  ADD.L	R3, SP, #264
0x1AD0	0xA8318000  LDI.B	R3, R3, #0
0x1AD4	0x59E1C002  CMP.B	R3, #0
0x1AD8	0x01A006BA  JMPC	R30, A, #0, L__write_text294
;matrixrgb_firmware.c, 769 :: 		color_buffer |= 0x04;
0x1ADC	0x4452C045  OR.L	R5, R5, #4
0x1AE0	0x4452D00D  BEXTU.L	R5, R5, #256
; color_buffer end address is: 20 (R5)
0x1AE4	0x003006BA  JMP	L_write_text81
L__write_text294:
;matrixrgb_firmware.c, 768 :: 		if ( color.red  > 0 )       //Create color for frame
;matrixrgb_firmware.c, 769 :: 		color_buffer |= 0x04;
L_write_text81:
;matrixrgb_firmware.c, 770 :: 		if ( color.green > 0 )
; color_buffer start address is: 20 (R5)
0x1AE8	0x443FD090  ADD.L	R3, SP, #265
0x1AEC	0xA8318000  LDI.B	R3, R3, #0
0x1AF0	0x59E1C002  CMP.B	R3, #0
0x1AF4	0x01A006C1  JMPC	R30, A, #0, L__write_text295
;matrixrgb_firmware.c, 771 :: 		color_buffer |= 0x02;
0x1AF8	0x4452C025  OR.L	R5, R5, #2
0x1AFC	0x4452D00D  BEXTU.L	R5, R5, #256
; color_buffer end address is: 20 (R5)
0x1B00	0x003006C1  JMP	L_write_text82
L__write_text295:
;matrixrgb_firmware.c, 770 :: 		if ( color.green > 0 )
;matrixrgb_firmware.c, 771 :: 		color_buffer |= 0x02;
L_write_text82:
;matrixrgb_firmware.c, 772 :: 		if ( color.blue > 0 )
; color_buffer start address is: 20 (R5)
0x1B04	0x443FD0A0  ADD.L	R3, SP, #266
0x1B08	0xA8318000  LDI.B	R3, R3, #0
0x1B0C	0x59E1C002  CMP.B	R3, #0
0x1B10	0x01A006C9  JMPC	R30, A, #0, L__write_text296
;matrixrgb_firmware.c, 773 :: 		color_buffer |= 0x01;
0x1B14	0x4432C015  OR.L	R3, R5, #1
0x1B18	0x4451D00D  BEXTU.L	R5, R3, #256
; color_buffer end address is: 20 (R5)
0x1B1C	0x4512D00D  BEXTU.L	R17, R5, #256
0x1B20	0x003006CA  JMP	L_write_text83
L__write_text296:
;matrixrgb_firmware.c, 772 :: 		if ( color.blue > 0 )
0x1B24	0x4512D00D  BEXTU.L	R17, R5, #256
;matrixrgb_firmware.c, 773 :: 		color_buffer |= 0x01;
L_write_text83:
;matrixrgb_firmware.c, 775 :: 		while ( *ptr != NULL )
; color_buffer start address is: 68 (R17)
0x1B28	0x44F1400D  BEXTU.L	R15, R2, #0
; start_col end address is: 8 (R2)
; ptr end address is: 0 (R0)
; curr_col end address is: 16 (R4)
; color_buffer end address is: 68 (R17)
; curr_row end address is: 4 (R1)
0x1B2C	0x45004000  MOVE.L	R16, R0
0x1B30	0x4480C00D  BEXTU.L	R8, R1, #0
0x1B34	0x4472400D  BEXTU.L	R7, R4, #0
L_write_text84:
; color_buffer start address is: 68 (R17)
; curr_col start address is: 28 (R7)
; curr_row start address is: 32 (R8)
; ptr start address is: 64 (R16)
; start_col start address is: 60 (R15)
0x1B38	0xA8380000  LDI.B	R3, R16, #0
0x1B3C	0x59E1C002  CMP.B	R3, #0
0x1B40	0x00280756  JMPC	R30, Z, #1, L_write_text85
;matrixrgb_firmware.c, 777 :: 		cnt = 0;
; cnt start address is: 0 (R0)
0x1B44	0x64000000  LDK.L	R0, #0
;matrixrgb_firmware.c, 778 :: 		for ( k = 0; k < 16; k++ )
; k start address is: 44 (R11)
0x1B48	0x64B00000  LDK.L	R11, #0
; cnt end address is: 0 (R0)
; start_col end address is: 60 (R15)
; curr_row end address is: 32 (R8)
; curr_col end address is: 28 (R7)
; color_buffer end address is: 68 (R17)
; k end address is: 44 (R11)
; ptr end address is: 64 (R16)
L_write_text86:
; k start address is: 44 (R11)
; cnt start address is: 0 (R0)
; start_col start address is: 60 (R15)
; ptr start address is: 64 (R16)
; curr_row start address is: 32 (R8)
; curr_col start address is: 28 (R7)
; color_buffer start address is: 68 (R17)
0x1B4C	0x59E5C102  CMP.B	R11, #16
0x1B50	0x00600730  JMPC	R30, C, #0, L_write_text87
;matrixrgb_firmware.c, 780 :: 		temp   = Dejavu18_Bitmaps[ ( *ptr * 32 ) - ( 32 * 32 ) + cnt ];
0x1B54	0xA8380000  LDI.B	R3, R16, #0
0x1B58	0x4441C058  ASHL.L	R4, R3, #5
0x1B5C	0x4442400C  BEXTS.L	R4, R4, #0
0x1B60	0x64300400  LDK.L	R3, #1024
0x1B64	0x44320032  SUB.L	R3, R4, R3
0x1B68	0x4431C00C  BEXTS.L	R3, R3, #0
0x1B6C	0x44518000  ADD.L	R5, R3, R0
0x1B70	0x4452C00C  BEXTS.L	R5, R5, #0
0x1B74	0x64403014  LDK.L	R4, #_Dejavu18_Bitmaps+0
0x1B78	0x44320050  ADD.L	R3, R4, R5
0x1B7C	0xC8618000  LPMI.B	R6, R3, #0
; temp start address is: 24 (R6)
;matrixrgb_firmware.c, 781 :: 		temp_2 = Dejavu18_Bitmaps[ ( *ptr * 32 ) - ( 32 * 32 ) +  cnt + 1 ];
0x1B80	0x4432C010  ADD.L	R3, R5, #1
0x1B84	0x4431C00C  BEXTS.L	R3, R3, #0
0x1B88	0x44320030  ADD.L	R3, R4, R3
0x1B8C	0xC8118000  LPMI.B	R1, R3, #0
; temp_2 start address is: 4 (R1)
;matrixrgb_firmware.c, 782 :: 		for ( j = 0; j < 8; j++ )
; j start address is: 20 (R5)
0x1B90	0x64500000  LDK.L	R5, #0
; temp_2 end address is: 4 (R1)
; cnt end address is: 0 (R0)
; temp end address is: 24 (R6)
; j end address is: 20 (R5)
; start_col end address is: 60 (R15)
; curr_row end address is: 32 (R8)
; curr_col end address is: 28 (R7)
; color_buffer end address is: 68 (R17)
; k end address is: 44 (R11)
; ptr end address is: 64 (R16)
0x1B94	0x44A7C00D  BEXTU.L	R10, R15, #0
0x1B98	0x44984000  MOVE.L	R9, R16
0x1B9C	0x4428D00D  BEXTU.L	R2, R17, #256
L_write_text89:
; j start address is: 20 (R5)
; temp_2 start address is: 4 (R1)
; temp start address is: 24 (R6)
; color_buffer start address is: 8 (R2)
; curr_col start address is: 28 (R7)
; curr_row start address is: 32 (R8)
; ptr start address is: 36 (R9)
; start_col start address is: 40 (R10)
; cnt start address is: 0 (R0)
; k start address is: 44 (R11)
0x1BA0	0x59E2C082  CMP.B	R5, #8
0x1BA4	0x00600705  JMPC	R30, C, #0, L_write_text90
;matrixrgb_firmware.c, 784 :: 		if ( ( temp & 0x80 ) > 0x00 )
0x1BA8	0x44334804  AND.L	R3, R6, #128
0x1BAC	0x59E1C002  CMP.B	R3, #0
0x1BB0	0x01A006F6  JMPC	R30, A, #0, L_write_text92
;matrixrgb_firmware.c, 785 :: 		text_frame[( k * 16 ) + j] = color_buffer;
0x1BB4	0x4435D00D  BEXTU.L	R3, R11, #256
0x1BB8	0x4431C048  ASHL.L	R3, R3, #4
0x1BBC	0x4431C00C  BEXTS.L	R3, R3, #0
0x1BC0	0x44418050  ADD.L	R4, R3, R5
0x1BC4	0x4442400C  BEXTS.L	R4, R4, #0
0x1BC8	0x443FC000  ADD.L	R3, SP, #0
0x1BCC	0x44318040  ADD.L	R3, R3, R4
0x1BD0	0xB0310000  STI.B	R3, #0, R2
0x1BD4	0x003006FF  JMP	L_write_text93
L_write_text92:
;matrixrgb_firmware.c, 787 :: 		text_frame[( k * 16 ) + j] = 0x00;
0x1BD8	0x4435D00D  BEXTU.L	R3, R11, #256
0x1BDC	0x4431C048  ASHL.L	R3, R3, #4
0x1BE0	0x4431C00C  BEXTS.L	R3, R3, #0
0x1BE4	0x44418050  ADD.L	R4, R3, R5
0x1BE8	0x4442400C  BEXTS.L	R4, R4, #0
0x1BEC	0x443FC000  ADD.L	R3, SP, #0
0x1BF0	0x44418040  ADD.L	R4, R3, R4
0x1BF4	0x64300000  LDK.L	R3, #0
0x1BF8	0xB0418000  STI.B	R4, #0, R3
L_write_text93:
;matrixrgb_firmware.c, 788 :: 		temp = ( temp << 1 );
0x1BFC	0x4433500D  BEXTU.L	R3, R6, #256
; temp end address is: 24 (R6)
0x1C00	0x4431C018  ASHL.L	R3, R3, #1
; temp start address is: 24 (R6)
0x1C04	0x4461D00D  BEXTU.L	R6, R3, #256
;matrixrgb_firmware.c, 782 :: 		for ( j = 0; j < 8; j++ )
0x1C08	0x4452C010  ADD.L	R5, R5, #1
0x1C0C	0x4452D00D  BEXTU.L	R5, R5, #256
;matrixrgb_firmware.c, 789 :: 		}
; temp end address is: 24 (R6)
; j end address is: 20 (R5)
0x1C10	0x003006E8  JMP	L_write_text89
L_write_text90:
;matrixrgb_firmware.c, 790 :: 		for ( j = 8; j < 16; j++ )
; j start address is: 12 (R3)
0x1C14	0x64300008  LDK.L	R3, #8
; temp_2 end address is: 4 (R1)
; color_buffer end address is: 8 (R2)
; ptr end address is: 36 (R9)
; start_col end address is: 40 (R10)
; cnt end address is: 0 (R0)
; j end address is: 12 (R3)
; curr_row end address is: 32 (R8)
; curr_col end address is: 28 (R7)
; k end address is: 44 (R11)
0x1C18	0x4450D00D  BEXTU.L	R5, R1, #256
0x1C1C	0x4410500D  BEXTU.L	R1, R0, #256
0x1C20	0x4405D00D  BEXTU.L	R0, R11, #256
0x1C24	0x4511500D  BEXTU.L	R17, R2, #256
0x1C28	0x4421D00D  BEXTU.L	R2, R3, #256
0x1C2C	0x4504C000  MOVE.L	R16, R9
0x1C30	0x44F5400D  BEXTU.L	R15, R10, #0
L_write_text94:
; j start address is: 8 (R2)
; k start address is: 0 (R0)
; cnt start address is: 4 (R1)
; start_col start address is: 60 (R15)
; ptr start address is: 64 (R16)
; curr_row start address is: 32 (R8)
; curr_col start address is: 28 (R7)
; color_buffer start address is: 68 (R17)
; temp_2 start address is: 20 (R5)
0x1C34	0x59E14102  CMP.B	R2, #16
0x1C38	0x0060072A  JMPC	R30, C, #0, L_write_text95
;matrixrgb_firmware.c, 792 :: 		if ( ( temp_2 & 0x80 ) > 0x00 )
0x1C3C	0x4432C804  AND.L	R3, R5, #128
0x1C40	0x59E1C002  CMP.B	R3, #0
0x1C44	0x01A0071B  JMPC	R30, A, #0, L_write_text97
;matrixrgb_firmware.c, 793 :: 		text_frame[( k * 16 ) + j] = color_buffer;
0x1C48	0x4430500D  BEXTU.L	R3, R0, #256
0x1C4C	0x4431C048  ASHL.L	R3, R3, #4
0x1C50	0x4431C00C  BEXTS.L	R3, R3, #0
0x1C54	0x44418020  ADD.L	R4, R3, R2
0x1C58	0x4442400C  BEXTS.L	R4, R4, #0
0x1C5C	0x443FC000  ADD.L	R3, SP, #0
0x1C60	0x44318040  ADD.L	R3, R3, R4
0x1C64	0xB0388000  STI.B	R3, #0, R17
0x1C68	0x00300724  JMP	L_write_text98
L_write_text97:
;matrixrgb_firmware.c, 795 :: 		text_frame[( k * 16 ) + j] = 0x00;
0x1C6C	0x4430500D  BEXTU.L	R3, R0, #256
0x1C70	0x4431C048  ASHL.L	R3, R3, #4
0x1C74	0x4431C00C  BEXTS.L	R3, R3, #0
0x1C78	0x44418020  ADD.L	R4, R3, R2
0x1C7C	0x4442400C  BEXTS.L	R4, R4, #0
0x1C80	0x443FC000  ADD.L	R3, SP, #0
0x1C84	0x44418040  ADD.L	R4, R3, R4
0x1C88	0x64300000  LDK.L	R3, #0
0x1C8C	0xB0418000  STI.B	R4, #0, R3
L_write_text98:
;matrixrgb_firmware.c, 796 :: 		temp_2 = ( temp_2 << 1 );
0x1C90	0x4432D00D  BEXTU.L	R3, R5, #256
; temp_2 end address is: 20 (R5)
0x1C94	0x4431C018  ASHL.L	R3, R3, #1
; temp_2 start address is: 20 (R5)
0x1C98	0x4451D00D  BEXTU.L	R5, R3, #256
;matrixrgb_firmware.c, 790 :: 		for ( j = 8; j < 16; j++ )
0x1C9C	0x44214010  ADD.L	R2, R2, #1
0x1CA0	0x4421500D  BEXTU.L	R2, R2, #256
;matrixrgb_firmware.c, 797 :: 		}
; temp_2 end address is: 20 (R5)
; j end address is: 8 (R2)
0x1CA4	0x0030070D  JMP	L_write_text94
L_write_text95:
;matrixrgb_firmware.c, 798 :: 		cnt += 2;
0x1CA8	0x4430C020  ADD.L	R3, R1, #2
0x1CAC	0x4411D00D  BEXTU.L	R1, R3, #256
;matrixrgb_firmware.c, 778 :: 		for ( k = 0; k < 16; k++ )
0x1CB0	0x44304010  ADD.L	R3, R0, #1
; k end address is: 0 (R0)
; k start address is: 44 (R11)
0x1CB4	0x44B1D00D  BEXTU.L	R11, R3, #256
;matrixrgb_firmware.c, 799 :: 		}
; cnt end address is: 4 (R1)
; k end address is: 44 (R11)
0x1CB8	0x4400D00D  BEXTU.L	R0, R1, #256
0x1CBC	0x003006D3  JMP	L_write_text86
L_write_text87:
;matrixrgb_firmware.c, 801 :: 		font_width = Dejavu18_Widths[ *ptr - 32 ];
0x1CC0	0xA8380000  LDI.B	R3, R16, #0
0x1CC4	0x4441C202  SUB.L	R4, R3, #32
0x1CC8	0x4442400C  BEXTS.L	R4, R4, #0
0x1CCC	0x64300004  LDK.L	R3, #_Dejavu18_Widths+0
0x1CD0	0x44318040  ADD.L	R3, R3, R4
0x1CD4	0xA8318000  LDI.B	R3, R3, #0
; font_width start address is: 72 (R18)
0x1CD8	0x4521D00D  BEXTU.L	R18, R3, #256
;matrixrgb_firmware.c, 802 :: 		if ( ( curr_col + font_width ) >= p_width )
0x1CDC	0x44438030  ADD.L	R4, R7, R3
0x1CE0	0xC23000E2  LDA.S	R3, _p_width+0
0x1CE4	0x5BE20032  CMP.S	R4, R3
0x1CE8	0x0068073F  JMPC	R30, C, #1, L__write_text297
; curr_col end address is: 28 (R7)
;matrixrgb_firmware.c, 804 :: 		curr_row += 16;
0x1CEC	0x45344100  ADD.L	R19, R8, #16
0x1CF0	0x4539C00D  BEXTU.L	R19, R19, #0
; curr_row end address is: 32 (R8)
; curr_row start address is: 76 (R19)
;matrixrgb_firmware.c, 805 :: 		curr_col = start_col;
; curr_col start address is: 80 (R20)
0x1CF4	0x4547C00D  BEXTU.L	R20, R15, #0
; curr_col end address is: 80 (R20)
; curr_row end address is: 76 (R19)
;matrixrgb_firmware.c, 806 :: 		}
0x1CF8	0x00300741  JMP	L_write_text99
L__write_text297:
;matrixrgb_firmware.c, 802 :: 		if ( ( curr_col + font_width ) >= p_width )
0x1CFC	0x4543C00D  BEXTU.L	R20, R7, #0
0x1D00	0x4534400D  BEXTU.L	R19, R8, #0
;matrixrgb_firmware.c, 806 :: 		}
L_write_text99:
;matrixrgb_firmware.c, 807 :: 		write_letter( text_frame, font_width, curr_row, curr_col );
; curr_col start address is: 80 (R20)
; curr_row start address is: 76 (R19)
0x1D04	0x443FC000  ADD.L	R3, SP, #0
0x1D08	0x4429C00D  BEXTU.L	R2, R19, #0
0x1D0C	0x4419500D  BEXTU.L	R1, R18, #256
0x1D10	0x4401C000  MOVE.L	R0, R3
0x1D14	0x443A400D  BEXTU.L	R3, R20, #0
0x1D18	0x00340451  CALL	_write_letter+0
;matrixrgb_firmware.c, 808 :: 		curr_col += font_width;
0x1D1C	0x444A0120  ADD.L	R4, R20, R18
0x1D20	0x4442400D  BEXTU.L	R4, R4, #0
; font_width end address is: 72 (R18)
; curr_col end address is: 80 (R20)
; curr_col start address is: 0 (R0)
0x1D24	0x4402400D  BEXTU.L	R0, R4, #0
;matrixrgb_firmware.c, 810 :: 		if ( curr_col >= shift_reg )
0x1D28	0xC430EB50  LDA.L	R3, _shift_reg+0
0x1D2C	0x5DE20032  CMP.L	R4, R3
0x1D30	0x00680751  JMPC	R30, C, #1, L__write_text298
; curr_col end address is: 0 (R0)
;matrixrgb_firmware.c, 812 :: 		curr_row += 16;
0x1D34	0x4419C100  ADD.L	R1, R19, #16
0x1D38	0x4410C00D  BEXTU.L	R1, R1, #0
; curr_row end address is: 76 (R19)
; curr_row start address is: 4 (R1)
;matrixrgb_firmware.c, 813 :: 		curr_col = start_col;
; curr_col start address is: 0 (R0)
0x1D3C	0x4407C00D  BEXTU.L	R0, R15, #0
; curr_col end address is: 0 (R0)
; curr_row end address is: 4 (R1)
;matrixrgb_firmware.c, 814 :: 		}
0x1D40	0x00300752  JMP	L_write_text100
L__write_text298:
;matrixrgb_firmware.c, 810 :: 		if ( curr_col >= shift_reg )
0x1D44	0x4419C00D  BEXTU.L	R1, R19, #0
;matrixrgb_firmware.c, 814 :: 		}
L_write_text100:
;matrixrgb_firmware.c, 815 :: 		ptr++;
; curr_col start address is: 0 (R0)
; curr_row start address is: 4 (R1)
0x1D48	0x45084010  ADD.L	R16, R16, #1
;matrixrgb_firmware.c, 816 :: 		}
; start_col end address is: 60 (R15)
; color_buffer end address is: 68 (R17)
; curr_col end address is: 0 (R0)
; curr_row end address is: 4 (R1)
; ptr end address is: 64 (R16)
0x1D4C	0x4480C00D  BEXTU.L	R8, R1, #0
0x1D50	0x4470400D  BEXTU.L	R7, R0, #0
0x1D54	0x003006CE  JMP	L_write_text84
L_write_text85:
;matrixrgb_firmware.c, 818 :: 		}
L_end_write_text:
0x1D58	0x99D00000  UNLINK	LR
0x1D5C	0xA0000000  RETURN	
; end of _write_text
_write_letter:
;matrixrgb_firmware.c, 820 :: 		void write_letter( uint8_t *text_frame, uint8_t width, uint16_t current_row, uint16_t current_col )
; current_col start address is: 12 (R3)
; current_row start address is: 8 (R2)
; width start address is: 4 (R1)
; text_frame start address is: 0 (R0)
0x1144	0x95D00004  LINK	LR, #4
0x1148	0x4441400D  BEXTU.L	R4, R2, #0
; current_col end address is: 12 (R3)
; current_row end address is: 8 (R2)
; width end address is: 4 (R1)
; text_frame end address is: 0 (R0)
; text_frame start address is: 0 (R0)
; width start address is: 4 (R1)
; current_row start address is: 16 (R4)
; current_col start address is: 12 (R3)
;matrixrgb_firmware.c, 824 :: 		uint8_t row = current_row;
; row start address is: 8 (R2)
0x114C	0x4422500D  BEXTU.L	R2, R4, #256
; current_row end address is: 16 (R4)
;matrixrgb_firmware.c, 825 :: 		uint8_t col = current_col;
; col start address is: 16 (R4)
0x1150	0x4441D00D  BEXTU.L	R4, R3, #256
; current_col end address is: 12 (R3)
;matrixrgb_firmware.c, 833 :: 		for ( m = 0; m < width; m++ )
; m start address is: 12 (R3)
0x1154	0x64300000  LDK.L	R3, #0
; text_frame end address is: 0 (R0)
; width end address is: 4 (R1)
; row end address is: 8 (R2)
; col end address is: 16 (R4)
; m end address is: 12 (R3)
0x1158	0x44904000  MOVE.L	R9, R0
0x115C	0x44A0D00D  BEXTU.L	R10, R1, #256
0x1160	0x44B1500D  BEXTU.L	R11, R2, #256
0x1164	0x44C2500D  BEXTU.L	R12, R4, #256
0x1168	0x44D1D00D  BEXTU.L	R13, R3, #256
L_write_letter101:
; m start address is: 52 (R13)
; col start address is: 48 (R12)
; row start address is: 44 (R11)
; width start address is: 40 (R10)
; text_frame start address is: 36 (R9)
0x116C	0x59E680A2  CMP.B	R13, R10
0x1170	0x00600478  JMPC	R30, C, #0, L_write_letter102
;matrixrgb_firmware.c, 836 :: 		for ( k = 0; k < 16; k++ )
; k start address is: 56 (R14)
0x1174	0x64E00000  LDK.L	R14, #0
; text_frame end address is: 36 (R9)
; width end address is: 40 (R10)
; row end address is: 44 (R11)
; col end address is: 48 (R12)
; k end address is: 56 (R14)
; m end address is: 52 (R13)
L_write_letter104:
; k start address is: 56 (R14)
; text_frame start address is: 36 (R9)
; width start address is: 40 (R10)
; row start address is: 44 (R11)
; col start address is: 48 (R12)
; m start address is: 52 (R13)
0x1178	0x59E74102  CMP.B	R14, #16
0x117C	0x00600475  JMPC	R30, C, #0, L_write_letter105
;matrixrgb_firmware.c, 838 :: 		red = text_frame[( k * 16 + m )] & 0x04;
0x1180	0x4447500D  BEXTU.L	R4, R14, #256
0x1184	0x44424048  ASHL.L	R4, R4, #4
0x1188	0x4442400C  BEXTS.L	R4, R4, #0
0x118C	0x444200D0  ADD.L	R4, R4, R13
0x1190	0x4442400C  BEXTS.L	R4, R4, #0
0x1194	0x44448040  ADD.L	R4, R9, R4
0x1198	0xA8420000  LDI.B	R4, R4, #0
0x119C	0x44824044  AND.L	R8, R4, #4
;matrixrgb_firmware.c, 839 :: 		green = text_frame[( k * 16 + m )] & 0x02;
0x11A0	0x44724024  AND.L	R7, R4, #2
;matrixrgb_firmware.c, 840 :: 		blue = text_frame[( k * 16 + m )] & 0x01;
0x11A4	0x44624014  AND.L	R6, R4, #1
;matrixrgb_firmware.c, 841 :: 		write_pixel( row + k, col + m, red, green, blue );
0x11A8	0x445600D0  ADD.L	R5, R12, R13
0x11AC	0x444580E0  ADD.L	R4, R11, R14
0x11B0	0x4433D00D  BEXTU.L	R3, R7, #256
0x11B4	0x4424500D  BEXTU.L	R2, R8, #256
0x11B8	0x4412C00D  BEXTU.L	R1, R5, #0
0x11BC	0x4402400D  BEXTU.L	R0, R4, #0
0x11C0	0x4443500D  BEXTU.L	R4, R6, #256
0x11C4	0x00340439  CALL	_write_pixel+0
;matrixrgb_firmware.c, 836 :: 		for ( k = 0; k < 16; k++ )
0x11C8	0x44E74010  ADD.L	R14, R14, #1
0x11CC	0x44E7500D  BEXTU.L	R14, R14, #256
;matrixrgb_firmware.c, 842 :: 		}
; k end address is: 56 (R14)
0x11D0	0x0030045E  JMP	L_write_letter104
L_write_letter105:
;matrixrgb_firmware.c, 833 :: 		for ( m = 0; m < width; m++ )
0x11D4	0x44D6C010  ADD.L	R13, R13, #1
0x11D8	0x44D6D00D  BEXTU.L	R13, R13, #256
;matrixrgb_firmware.c, 844 :: 		}
; text_frame end address is: 36 (R9)
; width end address is: 40 (R10)
; row end address is: 44 (R11)
; col end address is: 48 (R12)
; m end address is: 52 (R13)
0x11DC	0x0030045B  JMP	L_write_letter101
L_write_letter102:
;matrixrgb_firmware.c, 847 :: 		}
L_end_write_letter:
0x11E0	0x99D00000  UNLINK	LR
0x11E4	0xA0000000  RETURN	
; end of _write_letter
__Lib_System_InitialSetUpCLKPMC:
;__Lib_System.c, 43 :: 		
;__Lib_System.c, 48 :: 		
0x3004	0x6C000C04  LPM.L	R0, $+12
0x3008	0xBC00EBF8  STA.L	___System_CLOCK_IN_KHZ+0, R0
;__Lib_System.c, 52 :: 		
L_end_InitialSetUpCLKPMC:
0x300C	0xA0000000  RETURN	
0x3010	0x000186A0  	#100000
; end of __Lib_System_InitialSetUpCLKPMC
___GenExcept:
;__Lib_System.c, 79 :: 		
;__Lib_System.c, 80 :: 		
L___GenExcept4:
0x2DE0	0x00300B78  JMP	L___GenExcept4
;__Lib_System.c, 81 :: 		
L_end___GenExcept:
0x2DE4	0xA0000000  RETURN	
; end of ___GenExcept
0x4254	0x65B00004  LDK.L	R27, #4
0x4258	0x65A000E2  LDK.L	R26, #226
0x425C	0x65C04174  LDK.L	R28, #16756
0x4260	0x003402D0  CALL	___CC2DB
0x4264	0xA0000000  RETURN	
0x4268	0x64000004  LDK.L	R0, #4
0x426C	0x64100000  LDK.L	R1, #0
0x4270	0x6420EBF8  LDK.L	R2, #60408
0x4274	0xF0008027  MEMSET.B	R0, R1, R2
0x4278	0xA0000000  RETURN	
_TimerInterrupt:
;matrixrgb_firmware.c, 1409 :: 		void TimerInterrupt(void) iv IVT_TIMERS_IRQ
;matrixrgb_firmware.c, 1413 :: 		if (TIMER_INT_A_bit)
0x2DE8	0x84000000  PUSH.L	R0
0x2DEC	0x840F0000  PUSH.L	R30
0x2DF0	0xC0010345  LDA.B	R0, TIMER_INT_A_bit+0
0x2DF4	0x4400420D  BEXTU.L	R0, R0, #BitPos(TIMER_INT_A_bit+0)
0x2DF8	0x5DE04002  CMP.L	R0, #0
0x2DFC	0x00280B85  JMPC	R30, Z, #1, L_TimerInterrupt286
;matrixrgb_firmware.c, 1414 :: 		TIMER_INT = (TIMER_INT & 0xAA) | (1 << 0);
0x2E00	0xC0010345  LDA.B	R0, TIMER_INT+0
0x2E04	0x44004AA4  AND.L	R0, R0, #170
0x2E08	0x4400500D  BEXTU.L	R0, R0, #256
0x2E0C	0x44004015  OR.L	R0, R0, #1
0x2E10	0xB8010345  STA.B	TIMER_INT+0, R0
L_TimerInterrupt286:
;matrixrgb_firmware.c, 1415 :: 		}
L_end_TimerInterrupt:
0x2E14	0x8DE00000  POP.L	R30
0x2E18	0x8C000000  POP.L	R0
0x2E1C	0xA4000000  RETI	
; end of _TimerInterrupt
;fontlibrary.c,10 :: _Dejavu18_Bitmaps [2912]
0x3014	0x00000000 ;_Dejavu18_Bitmaps+0
0x3018	0x00000000 ;_Dejavu18_Bitmaps+4
0x301C	0x00000000 ;_Dejavu18_Bitmaps+8
0x3020	0x00000000 ;_Dejavu18_Bitmaps+12
0x3024	0x00000000 ;_Dejavu18_Bitmaps+16
0x3028	0x00000000 ;_Dejavu18_Bitmaps+20
0x302C	0x00000000 ;_Dejavu18_Bitmaps+24
0x3030	0x00000000 ;_Dejavu18_Bitmaps+28
0x3034	0x00000000 ;_Dejavu18_Bitmaps+32
0x3038	0x00400000 ;_Dejavu18_Bitmaps+36
0x303C	0x00400040 ;_Dejavu18_Bitmaps+40
0x3040	0x00400040 ;_Dejavu18_Bitmaps+44
0x3044	0x00400040 ;_Dejavu18_Bitmaps+48
0x3048	0x00000040 ;_Dejavu18_Bitmaps+52
0x304C	0x00000040 ;_Dejavu18_Bitmaps+56
0x3050	0x00000000 ;_Dejavu18_Bitmaps+60
0x3054	0x00000000 ;_Dejavu18_Bitmaps+64
0x3058	0x00500000 ;_Dejavu18_Bitmaps+68
0x305C	0x00500050 ;_Dejavu18_Bitmaps+72
0x3060	0x00000000 ;_Dejavu18_Bitmaps+76
0x3064	0x00000000 ;_Dejavu18_Bitmaps+80
0x3068	0x00000000 ;_Dejavu18_Bitmaps+84
0x306C	0x00000000 ;_Dejavu18_Bitmaps+88
0x3070	0x00000000 ;_Dejavu18_Bitmaps+92
0x3074	0x00000000 ;_Dejavu18_Bitmaps+96
0x3078	0x00120000 ;_Dejavu18_Bitmaps+100
0x307C	0x00220012 ;_Dejavu18_Bitmaps+104
0x3080	0x002400FF ;_Dejavu18_Bitmaps+108
0x3084	0x00FF0024 ;_Dejavu18_Bitmaps+112
0x3088	0x00480048 ;_Dejavu18_Bitmaps+116
0x308C	0x00000048 ;_Dejavu18_Bitmaps+120
0x3090	0x00000000 ;_Dejavu18_Bitmaps+124
0x3094	0x00000000 ;_Dejavu18_Bitmaps+128
0x3098	0x00380000 ;_Dejavu18_Bitmaps+132
0x309C	0x00500054 ;_Dejavu18_Bitmaps+136
0x30A0	0x00700050 ;_Dejavu18_Bitmaps+140
0x30A4	0x0014001C ;_Dejavu18_Bitmaps+144
0x30A8	0x00540054 ;_Dejavu18_Bitmaps+148
0x30AC	0x00100038 ;_Dejavu18_Bitmaps+152
0x30B0	0x00000000 ;_Dejavu18_Bitmaps+156
0x30B4	0x00000000 ;_Dejavu18_Bitmaps+160
0x30B8	0x80300000 ;_Dejavu18_Bitmaps+164
0x30BC	0x00490049 ;_Dejavu18_Bitmaps+168
0x30C0	0x0032004A ;_Dejavu18_Bitmaps+172
0x30C4	0x2005C004 ;_Dejavu18_Bitmaps+176
0x30C8	0x20092009 ;_Dejavu18_Bitmaps+180
0x30CC	0x0000C010 ;_Dejavu18_Bitmaps+184
0x30D0	0x00000000 ;_Dejavu18_Bitmaps+188
0x30D4	0x00000000 ;_Dejavu18_Bitmaps+192
0x30D8	0x00180000 ;_Dejavu18_Bitmaps+196
0x30DC	0x00240024 ;_Dejavu18_Bitmaps+200
0x30E0	0x00180024 ;_Dejavu18_Bitmaps+204
0x30E4	0x00490030 ;_Dejavu18_Bitmaps+208
0x30E8	0x00460045 ;_Dejavu18_Bitmaps+212
0x30EC	0x00008039 ;_Dejavu18_Bitmaps+216
0x30F0	0x00000000 ;_Dejavu18_Bitmaps+220
0x30F4	0x00000000 ;_Dejavu18_Bitmaps+224
0x30F8	0x00400000 ;_Dejavu18_Bitmaps+228
0x30FC	0x00400040 ;_Dejavu18_Bitmaps+232
0x3100	0x00000000 ;_Dejavu18_Bitmaps+236
0x3104	0x00000000 ;_Dejavu18_Bitmaps+240
0x3108	0x00000000 ;_Dejavu18_Bitmaps+244
0x310C	0x00000000 ;_Dejavu18_Bitmaps+248
0x3110	0x00000000 ;_Dejavu18_Bitmaps+252
0x3114	0x00000000 ;_Dejavu18_Bitmaps+256
0x3118	0x00100000 ;_Dejavu18_Bitmaps+260
0x311C	0x00200020 ;_Dejavu18_Bitmaps+264
0x3120	0x00400040 ;_Dejavu18_Bitmaps+268
0x3124	0x00400040 ;_Dejavu18_Bitmaps+272
0x3128	0x00400040 ;_Dejavu18_Bitmaps+276
0x312C	0x00200040 ;_Dejavu18_Bitmaps+280
0x3130	0x00100020 ;_Dejavu18_Bitmaps+284
0x3134	0x00000000 ;_Dejavu18_Bitmaps+288
0x3138	0x00800000 ;_Dejavu18_Bitmaps+292
0x313C	0x00400040 ;_Dejavu18_Bitmaps+296
0x3140	0x00200020 ;_Dejavu18_Bitmaps+300
0x3144	0x00200020 ;_Dejavu18_Bitmaps+304
0x3148	0x00200020 ;_Dejavu18_Bitmaps+308
0x314C	0x00400020 ;_Dejavu18_Bitmaps+312
0x3150	0x00800040 ;_Dejavu18_Bitmaps+316
0x3154	0x00000000 ;_Dejavu18_Bitmaps+320
0x3158	0x00200000 ;_Dejavu18_Bitmaps+324
0x315C	0x002000F8 ;_Dejavu18_Bitmaps+328
0x3160	0x00000050 ;_Dejavu18_Bitmaps+332
0x3164	0x00000000 ;_Dejavu18_Bitmaps+336
0x3168	0x00000000 ;_Dejavu18_Bitmaps+340
0x316C	0x00000000 ;_Dejavu18_Bitmaps+344
0x3170	0x00000000 ;_Dejavu18_Bitmaps+348
0x3174	0x00000000 ;_Dejavu18_Bitmaps+352
0x3178	0x00000000 ;_Dejavu18_Bitmaps+356
0x317C	0x00080000 ;_Dejavu18_Bitmaps+360
0x3180	0x00080008 ;_Dejavu18_Bitmaps+364
0x3184	0x0008007F ;_Dejavu18_Bitmaps+368
0x3188	0x00080008 ;_Dejavu18_Bitmaps+372
0x318C	0x00000000 ;_Dejavu18_Bitmaps+376
0x3190	0x00000000 ;_Dejavu18_Bitmaps+380
0x3194	0x00000000 ;_Dejavu18_Bitmaps+384
0x3198	0x00000000 ;_Dejavu18_Bitmaps+388
0x319C	0x00000000 ;_Dejavu18_Bitmaps+392
0x31A0	0x00000000 ;_Dejavu18_Bitmaps+396
0x31A4	0x00000000 ;_Dejavu18_Bitmaps+400
0x31A8	0x00000000 ;_Dejavu18_Bitmaps+404
0x31AC	0x00200020 ;_Dejavu18_Bitmaps+408
0x31B0	0x00000020 ;_Dejavu18_Bitmaps+412
0x31B4	0x00000000 ;_Dejavu18_Bitmaps+416
0x31B8	0x00000000 ;_Dejavu18_Bitmaps+420
0x31BC	0x00000000 ;_Dejavu18_Bitmaps+424
0x31C0	0x00000000 ;_Dejavu18_Bitmaps+428
0x31C4	0x00E00000 ;_Dejavu18_Bitmaps+432
0x31C8	0x00000000 ;_Dejavu18_Bitmaps+436
0x31CC	0x00000000 ;_Dejavu18_Bitmaps+440
0x31D0	0x00000000 ;_Dejavu18_Bitmaps+444
0x31D4	0x00000000 ;_Dejavu18_Bitmaps+448
0x31D8	0x00000000 ;_Dejavu18_Bitmaps+452
0x31DC	0x00000000 ;_Dejavu18_Bitmaps+456
0x31E0	0x00000000 ;_Dejavu18_Bitmaps+460
0x31E4	0x00000000 ;_Dejavu18_Bitmaps+464
0x31E8	0x00000000 ;_Dejavu18_Bitmaps+468
0x31EC	0x00000040 ;_Dejavu18_Bitmaps+472
0x31F0	0x00000000 ;_Dejavu18_Bitmaps+476
0x31F4	0x00000000 ;_Dejavu18_Bitmaps+480
0x31F8	0x00100000 ;_Dejavu18_Bitmaps+484
0x31FC	0x00200010 ;_Dejavu18_Bitmaps+488
0x3200	0x00200020 ;_Dejavu18_Bitmaps+492
0x3204	0x00400040 ;_Dejavu18_Bitmaps+496
0x3208	0x00800040 ;_Dejavu18_Bitmaps+500
0x320C	0x00000080 ;_Dejavu18_Bitmaps+504
0x3210	0x00000000 ;_Dejavu18_Bitmaps+508
0x3214	0x00000000 ;_Dejavu18_Bitmaps+512
0x3218	0x00780000 ;_Dejavu18_Bitmaps+516
0x321C	0x00840084 ;_Dejavu18_Bitmaps+520
0x3220	0x00840084 ;_Dejavu18_Bitmaps+524
0x3224	0x00840084 ;_Dejavu18_Bitmaps+528
0x3228	0x00840084 ;_Dejavu18_Bitmaps+532
0x322C	0x00000078 ;_Dejavu18_Bitmaps+536
0x3230	0x00000000 ;_Dejavu18_Bitmaps+540
0x3234	0x00000000 ;_Dejavu18_Bitmaps+544
0x3238	0x00100000 ;_Dejavu18_Bitmaps+548
0x323C	0x00500030 ;_Dejavu18_Bitmaps+552
0x3240	0x00100010 ;_Dejavu18_Bitmaps+556
0x3244	0x00100010 ;_Dejavu18_Bitmaps+560
0x3248	0x00100010 ;_Dejavu18_Bitmaps+564
0x324C	0x00000010 ;_Dejavu18_Bitmaps+568
0x3250	0x00000000 ;_Dejavu18_Bitmaps+572
0x3254	0x00000000 ;_Dejavu18_Bitmaps+576
0x3258	0x00780000 ;_Dejavu18_Bitmaps+580
0x325C	0x00040084 ;_Dejavu18_Bitmaps+584
0x3260	0x00040004 ;_Dejavu18_Bitmaps+588
0x3264	0x00100008 ;_Dejavu18_Bitmaps+592
0x3268	0x00400020 ;_Dejavu18_Bitmaps+596
0x326C	0x000000FC ;_Dejavu18_Bitmaps+600
0x3270	0x00000000 ;_Dejavu18_Bitmaps+604
0x3274	0x00000000 ;_Dejavu18_Bitmaps+608
0x3278	0x00780000 ;_Dejavu18_Bitmaps+612
0x327C	0x00040084 ;_Dejavu18_Bitmaps+616
0x3280	0x00380004 ;_Dejavu18_Bitmaps+620
0x3284	0x00040004 ;_Dejavu18_Bitmaps+624
0x3288	0x00840004 ;_Dejavu18_Bitmaps+628
0x328C	0x00000078 ;_Dejavu18_Bitmaps+632
0x3290	0x00000000 ;_Dejavu18_Bitmaps+636
0x3294	0x00000000 ;_Dejavu18_Bitmaps+640
0x3298	0x00080000 ;_Dejavu18_Bitmaps+644
0x329C	0x00180018 ;_Dejavu18_Bitmaps+648
0x32A0	0x00280028 ;_Dejavu18_Bitmaps+652
0x32A4	0x00480048 ;_Dejavu18_Bitmaps+656
0x32A8	0x000800FC ;_Dejavu18_Bitmaps+660
0x32AC	0x00000008 ;_Dejavu18_Bitmaps+664
0x32B0	0x00000000 ;_Dejavu18_Bitmaps+668
0x32B4	0x00000000 ;_Dejavu18_Bitmaps+672
0x32B8	0x007C0000 ;_Dejavu18_Bitmaps+676
0x32BC	0x00400040 ;_Dejavu18_Bitmaps+680
0x32C0	0x00F80080 ;_Dejavu18_Bitmaps+684
0x32C4	0x00040084 ;_Dejavu18_Bitmaps+688
0x32C8	0x00840004 ;_Dejavu18_Bitmaps+692
0x32CC	0x00000078 ;_Dejavu18_Bitmaps+696
0x32D0	0x00000000 ;_Dejavu18_Bitmaps+700
0x32D4	0x00000000 ;_Dejavu18_Bitmaps+704
0x32D8	0x00780000 ;_Dejavu18_Bitmaps+708
0x32DC	0x00800084 ;_Dejavu18_Bitmaps+712
0x32E0	0x00B80080 ;_Dejavu18_Bitmaps+716
0x32E4	0x008400C4 ;_Dejavu18_Bitmaps+720
0x32E8	0x00840084 ;_Dejavu18_Bitmaps+724
0x32EC	0x00000078 ;_Dejavu18_Bitmaps+728
0x32F0	0x00000000 ;_Dejavu18_Bitmaps+732
0x32F4	0x00000000 ;_Dejavu18_Bitmaps+736
0x32F8	0x00FC0000 ;_Dejavu18_Bitmaps+740
0x32FC	0x00080008 ;_Dejavu18_Bitmaps+744
0x3300	0x00100010 ;_Dejavu18_Bitmaps+748
0x3304	0x00200020 ;_Dejavu18_Bitmaps+752
0x3308	0x00400040 ;_Dejavu18_Bitmaps+756
0x330C	0x00000040 ;_Dejavu18_Bitmaps+760
0x3310	0x00000000 ;_Dejavu18_Bitmaps+764
0x3314	0x00000000 ;_Dejavu18_Bitmaps+768
0x3318	0x00780000 ;_Dejavu18_Bitmaps+772
0x331C	0x00840084 ;_Dejavu18_Bitmaps+776
0x3320	0x00780084 ;_Dejavu18_Bitmaps+780
0x3324	0x00840084 ;_Dejavu18_Bitmaps+784
0x3328	0x00840084 ;_Dejavu18_Bitmaps+788
0x332C	0x00000078 ;_Dejavu18_Bitmaps+792
0x3330	0x00000000 ;_Dejavu18_Bitmaps+796
0x3334	0x00000000 ;_Dejavu18_Bitmaps+800
0x3338	0x00780000 ;_Dejavu18_Bitmaps+804
0x333C	0x00840084 ;_Dejavu18_Bitmaps+808
0x3340	0x008C0084 ;_Dejavu18_Bitmaps+812
0x3344	0x00040074 ;_Dejavu18_Bitmaps+816
0x3348	0x00880004 ;_Dejavu18_Bitmaps+820
0x334C	0x00000070 ;_Dejavu18_Bitmaps+824
0x3350	0x00000000 ;_Dejavu18_Bitmaps+828
0x3354	0x00000000 ;_Dejavu18_Bitmaps+832
0x3358	0x00000000 ;_Dejavu18_Bitmaps+836
0x335C	0x00000000 ;_Dejavu18_Bitmaps+840
0x3360	0x00000040 ;_Dejavu18_Bitmaps+844
0x3364	0x00000000 ;_Dejavu18_Bitmaps+848
0x3368	0x00000000 ;_Dejavu18_Bitmaps+852
0x336C	0x00000040 ;_Dejavu18_Bitmaps+856
0x3370	0x00000000 ;_Dejavu18_Bitmaps+860
0x3374	0x00000000 ;_Dejavu18_Bitmaps+864
0x3378	0x00000000 ;_Dejavu18_Bitmaps+868
0x337C	0x00000000 ;_Dejavu18_Bitmaps+872
0x3380	0x00000040 ;_Dejavu18_Bitmaps+876
0x3384	0x00000000 ;_Dejavu18_Bitmaps+880
0x3388	0x00000000 ;_Dejavu18_Bitmaps+884
0x338C	0x00400040 ;_Dejavu18_Bitmaps+888
0x3390	0x00000040 ;_Dejavu18_Bitmaps+892
0x3394	0x00000000 ;_Dejavu18_Bitmaps+896
0x3398	0x00000000 ;_Dejavu18_Bitmaps+900
0x339C	0x00020000 ;_Dejavu18_Bitmaps+904
0x33A0	0x0030000C ;_Dejavu18_Bitmaps+908
0x33A4	0x00300040 ;_Dejavu18_Bitmaps+912
0x33A8	0x0002000C ;_Dejavu18_Bitmaps+916
0x33AC	0x00000000 ;_Dejavu18_Bitmaps+920
0x33B0	0x00000000 ;_Dejavu18_Bitmaps+924
0x33B4	0x00000000 ;_Dejavu18_Bitmaps+928
0x33B8	0x00000000 ;_Dejavu18_Bitmaps+932
0x33BC	0x00000000 ;_Dejavu18_Bitmaps+936
0x33C0	0x000000FE ;_Dejavu18_Bitmaps+940
0x33C4	0x00FE0000 ;_Dejavu18_Bitmaps+944
0x33C8	0x00000000 ;_Dejavu18_Bitmaps+948
0x33CC	0x00000000 ;_Dejavu18_Bitmaps+952
0x33D0	0x00000000 ;_Dejavu18_Bitmaps+956
0x33D4	0x00000000 ;_Dejavu18_Bitmaps+960
0x33D8	0x00000000 ;_Dejavu18_Bitmaps+964
0x33DC	0x00400000 ;_Dejavu18_Bitmaps+968
0x33E0	0x000C0030 ;_Dejavu18_Bitmaps+972
0x33E4	0x000C0002 ;_Dejavu18_Bitmaps+976
0x33E8	0x00400030 ;_Dejavu18_Bitmaps+980
0x33EC	0x00000000 ;_Dejavu18_Bitmaps+984
0x33F0	0x00000000 ;_Dejavu18_Bitmaps+988
0x33F4	0x00000000 ;_Dejavu18_Bitmaps+992
0x33F8	0x00380000 ;_Dejavu18_Bitmaps+996
0x33FC	0x00440044 ;_Dejavu18_Bitmaps+1000
0x3400	0x00080004 ;_Dejavu18_Bitmaps+1004
0x3404	0x00200010 ;_Dejavu18_Bitmaps+1008
0x3408	0x00000020 ;_Dejavu18_Bitmaps+1012
0x340C	0x00000020 ;_Dejavu18_Bitmaps+1016
0x3410	0x00000000 ;_Dejavu18_Bitmaps+1020
0x3414	0x00000000 ;_Dejavu18_Bitmaps+1024
0x3418	0x800F0000 ;_Dejavu18_Bitmaps+1028
0x341C	0x20404030 ;_Dejavu18_Bitmaps+1032
0x3420	0x9091904E ;_Dejavu18_Bitmaps+1036
0x3424	0x10A190A0 ;_Dejavu18_Bitmaps+1040
0x3428	0x20A320A1 ;_Dejavu18_Bitmaps+1044
0x342C	0x1040C09D ;_Dejavu18_Bitmaps+1048
0x3430	0x801F6020 ;_Dejavu18_Bitmaps+1052
0x3434	0x00000000 ;_Dejavu18_Bitmaps+1056
0x3438	0x00080000 ;_Dejavu18_Bitmaps+1060
0x343C	0x00140014 ;_Dejavu18_Bitmaps+1064
0x3440	0x00220014 ;_Dejavu18_Bitmaps+1068
0x3444	0x007F0022 ;_Dejavu18_Bitmaps+1072
0x3448	0x80800041 ;_Dejavu18_Bitmaps+1076
0x344C	0x00008080 ;_Dejavu18_Bitmaps+1080
0x3450	0x00000000 ;_Dejavu18_Bitmaps+1084
0x3454	0x00000000 ;_Dejavu18_Bitmaps+1088
0x3458	0x007E0000 ;_Dejavu18_Bitmaps+1092
0x345C	0x00410041 ;_Dejavu18_Bitmaps+1096
0x3460	0x007E0041 ;_Dejavu18_Bitmaps+1100
0x3464	0x00410041 ;_Dejavu18_Bitmaps+1104
0x3468	0x00410041 ;_Dejavu18_Bitmaps+1108
0x346C	0x0000007E ;_Dejavu18_Bitmaps+1112
0x3470	0x00000000 ;_Dejavu18_Bitmaps+1116
0x3474	0x00000000 ;_Dejavu18_Bitmaps+1120
0x3478	0x001C0000 ;_Dejavu18_Bitmaps+1124
0x347C	0x00410022 ;_Dejavu18_Bitmaps+1128
0x3480	0x00400040 ;_Dejavu18_Bitmaps+1132
0x3484	0x00400040 ;_Dejavu18_Bitmaps+1136
0x3488	0x00220041 ;_Dejavu18_Bitmaps+1140
0x348C	0x0000001C ;_Dejavu18_Bitmaps+1144
0x3490	0x00000000 ;_Dejavu18_Bitmaps+1148
0x3494	0x00000000 ;_Dejavu18_Bitmaps+1152
0x3498	0x007C0000 ;_Dejavu18_Bitmaps+1156
0x349C	0x00410042 ;_Dejavu18_Bitmaps+1160
0x34A0	0x00410041 ;_Dejavu18_Bitmaps+1164
0x34A4	0x00410041 ;_Dejavu18_Bitmaps+1168
0x34A8	0x00420041 ;_Dejavu18_Bitmaps+1172
0x34AC	0x0000007C ;_Dejavu18_Bitmaps+1176
0x34B0	0x00000000 ;_Dejavu18_Bitmaps+1180
0x34B4	0x00000000 ;_Dejavu18_Bitmaps+1184
0x34B8	0x007F0000 ;_Dejavu18_Bitmaps+1188
0x34BC	0x00400040 ;_Dejavu18_Bitmaps+1192
0x34C0	0x007C0040 ;_Dejavu18_Bitmaps+1196
0x34C4	0x00400040 ;_Dejavu18_Bitmaps+1200
0x34C8	0x00400040 ;_Dejavu18_Bitmaps+1204
0x34CC	0x0000007F ;_Dejavu18_Bitmaps+1208
0x34D0	0x00000000 ;_Dejavu18_Bitmaps+1212
0x34D4	0x00000000 ;_Dejavu18_Bitmaps+1216
0x34D8	0x007E0000 ;_Dejavu18_Bitmaps+1220
0x34DC	0x00400040 ;_Dejavu18_Bitmaps+1224
0x34E0	0x007C0040 ;_Dejavu18_Bitmaps+1228
0x34E4	0x00400040 ;_Dejavu18_Bitmaps+1232
0x34E8	0x00400040 ;_Dejavu18_Bitmaps+1236
0x34EC	0x00000040 ;_Dejavu18_Bitmaps+1240
0x34F0	0x00000000 ;_Dejavu18_Bitmaps+1244
0x34F4	0x00000000 ;_Dejavu18_Bitmaps+1248
0x34F8	0x001E0000 ;_Dejavu18_Bitmaps+1252
0x34FC	0x80400021 ;_Dejavu18_Bitmaps+1256
0x3500	0x00400040 ;_Dejavu18_Bitmaps+1260
0x3504	0x80408047 ;_Dejavu18_Bitmaps+1264
0x3508	0x00218040 ;_Dejavu18_Bitmaps+1268
0x350C	0x0000001E ;_Dejavu18_Bitmaps+1272
0x3510	0x00000000 ;_Dejavu18_Bitmaps+1276
0x3514	0x00000000 ;_Dejavu18_Bitmaps+1280
0x3518	0x00410000 ;_Dejavu18_Bitmaps+1284
0x351C	0x00410041 ;_Dejavu18_Bitmaps+1288
0x3520	0x007F0041 ;_Dejavu18_Bitmaps+1292
0x3524	0x00410041 ;_Dejavu18_Bitmaps+1296
0x3528	0x00410041 ;_Dejavu18_Bitmaps+1300
0x352C	0x00000041 ;_Dejavu18_Bitmaps+1304
0x3530	0x00000000 ;_Dejavu18_Bitmaps+1308
0x3534	0x00000000 ;_Dejavu18_Bitmaps+1312
0x3538	0x00400000 ;_Dejavu18_Bitmaps+1316
0x353C	0x00400040 ;_Dejavu18_Bitmaps+1320
0x3540	0x00400040 ;_Dejavu18_Bitmaps+1324
0x3544	0x00400040 ;_Dejavu18_Bitmaps+1328
0x3548	0x00400040 ;_Dejavu18_Bitmaps+1332
0x354C	0x00000040 ;_Dejavu18_Bitmaps+1336
0x3550	0x00000000 ;_Dejavu18_Bitmaps+1340
0x3554	0x00000000 ;_Dejavu18_Bitmaps+1344
0x3558	0x00080000 ;_Dejavu18_Bitmaps+1348
0x355C	0x00080008 ;_Dejavu18_Bitmaps+1352
0x3560	0x00080008 ;_Dejavu18_Bitmaps+1356
0x3564	0x00080008 ;_Dejavu18_Bitmaps+1360
0x3568	0x00880088 ;_Dejavu18_Bitmaps+1364
0x356C	0x00000070 ;_Dejavu18_Bitmaps+1368
0x3570	0x00000000 ;_Dejavu18_Bitmaps+1372
0x3574	0x00000000 ;_Dejavu18_Bitmaps+1376
0x3578	0x80400000 ;_Dejavu18_Bitmaps+1380
0x357C	0x00420041 ;_Dejavu18_Bitmaps+1384
0x3580	0x00480044 ;_Dejavu18_Bitmaps+1388
0x3584	0x00640058 ;_Dejavu18_Bitmaps+1392
0x3588	0x00410042 ;_Dejavu18_Bitmaps+1396
0x358C	0x00008040 ;_Dejavu18_Bitmaps+1400
0x3590	0x00000000 ;_Dejavu18_Bitmaps+1404
0x3594	0x00000000 ;_Dejavu18_Bitmaps+1408
0x3598	0x00400000 ;_Dejavu18_Bitmaps+1412
0x359C	0x00400040 ;_Dejavu18_Bitmaps+1416
0x35A0	0x00400040 ;_Dejavu18_Bitmaps+1420
0x35A4	0x00400040 ;_Dejavu18_Bitmaps+1424
0x35A8	0x00400040 ;_Dejavu18_Bitmaps+1428
0x35AC	0x0000007E ;_Dejavu18_Bitmaps+1432
0x35B0	0x00000000 ;_Dejavu18_Bitmaps+1436
0x35B4	0x00000000 ;_Dejavu18_Bitmaps+1440
0x35B8	0x40400000 ;_Dejavu18_Bitmaps+1444
0x35BC	0xC060C060 ;_Dejavu18_Bitmaps+1448
0x35C0	0x40514051 ;_Dejavu18_Bitmaps+1452
0x35C4	0x404A404A ;_Dejavu18_Bitmaps+1456
0x35C8	0x4044404A ;_Dejavu18_Bitmaps+1460
0x35CC	0x00004044 ;_Dejavu18_Bitmaps+1464
0x35D0	0x00000000 ;_Dejavu18_Bitmaps+1468
0x35D4	0x00000000 ;_Dejavu18_Bitmaps+1472
0x35D8	0x00410000 ;_Dejavu18_Bitmaps+1476
0x35DC	0x00510061 ;_Dejavu18_Bitmaps+1480
0x35E0	0x00490051 ;_Dejavu18_Bitmaps+1484
0x35E4	0x00450049 ;_Dejavu18_Bitmaps+1488
0x35E8	0x00430045 ;_Dejavu18_Bitmaps+1492
0x35EC	0x00000041 ;_Dejavu18_Bitmaps+1496
0x35F0	0x00000000 ;_Dejavu18_Bitmaps+1500
0x35F4	0x00000000 ;_Dejavu18_Bitmaps+1504
0x35F8	0x001E0000 ;_Dejavu18_Bitmaps+1508
0x35FC	0x80400021 ;_Dejavu18_Bitmaps+1512
0x3600	0x80408040 ;_Dejavu18_Bitmaps+1516
0x3604	0x80408040 ;_Dejavu18_Bitmaps+1520
0x3608	0x00218040 ;_Dejavu18_Bitmaps+1524
0x360C	0x0000001E ;_Dejavu18_Bitmaps+1528
0x3610	0x00000000 ;_Dejavu18_Bitmaps+1532
0x3614	0x00000000 ;_Dejavu18_Bitmaps+1536
0x3618	0x007E0000 ;_Dejavu18_Bitmaps+1540
0x361C	0x00410041 ;_Dejavu18_Bitmaps+1544
0x3620	0x00410041 ;_Dejavu18_Bitmaps+1548
0x3624	0x0040007E ;_Dejavu18_Bitmaps+1552
0x3628	0x00400040 ;_Dejavu18_Bitmaps+1556
0x362C	0x00000040 ;_Dejavu18_Bitmaps+1560
0x3630	0x00000000 ;_Dejavu18_Bitmaps+1564
0x3634	0x00000000 ;_Dejavu18_Bitmaps+1568
0x3638	0x001E0000 ;_Dejavu18_Bitmaps+1572
0x363C	0x80400021 ;_Dejavu18_Bitmaps+1576
0x3640	0x80408040 ;_Dejavu18_Bitmaps+1580
0x3644	0x80408040 ;_Dejavu18_Bitmaps+1584
0x3648	0x00218046 ;_Dejavu18_Bitmaps+1588
0x364C	0x0000801E ;_Dejavu18_Bitmaps+1592
0x3650	0x00000000 ;_Dejavu18_Bitmaps+1596
0x3654	0x00000000 ;_Dejavu18_Bitmaps+1600
0x3658	0x007E0000 ;_Dejavu18_Bitmaps+1604
0x365C	0x00410041 ;_Dejavu18_Bitmaps+1608
0x3660	0x00410041 ;_Dejavu18_Bitmaps+1612
0x3664	0x0044007E ;_Dejavu18_Bitmaps+1616
0x3668	0x00420042 ;_Dejavu18_Bitmaps+1620
0x366C	0x00000041 ;_Dejavu18_Bitmaps+1624
0x3670	0x00000000 ;_Dejavu18_Bitmaps+1628
0x3674	0x00000000 ;_Dejavu18_Bitmaps+1632
0x3678	0x003E0000 ;_Dejavu18_Bitmaps+1636
0x367C	0x00410041 ;_Dejavu18_Bitmaps+1640
0x3680	0x00380040 ;_Dejavu18_Bitmaps+1644
0x3684	0x00010006 ;_Dejavu18_Bitmaps+1648
0x3688	0x00410041 ;_Dejavu18_Bitmaps+1652
0x368C	0x0000003E ;_Dejavu18_Bitmaps+1656
0x3690	0x00000000 ;_Dejavu18_Bitmaps+1660
0x3694	0x00000000 ;_Dejavu18_Bitmaps+1664
0x3698	0x00FE0000 ;_Dejavu18_Bitmaps+1668
0x369C	0x00100010 ;_Dejavu18_Bitmaps+1672
0x36A0	0x00100010 ;_Dejavu18_Bitmaps+1676
0x36A4	0x00100010 ;_Dejavu18_Bitmaps+1680
0x36A8	0x00100010 ;_Dejavu18_Bitmaps+1684
0x36AC	0x00000010 ;_Dejavu18_Bitmaps+1688
0x36B0	0x00000000 ;_Dejavu18_Bitmaps+1692
0x36B4	0x00000000 ;_Dejavu18_Bitmaps+1696
0x36B8	0x00410000 ;_Dejavu18_Bitmaps+1700
0x36BC	0x00410041 ;_Dejavu18_Bitmaps+1704
0x36C0	0x00410041 ;_Dejavu18_Bitmaps+1708
0x36C4	0x00410041 ;_Dejavu18_Bitmaps+1712
0x36C8	0x00220041 ;_Dejavu18_Bitmaps+1716
0x36CC	0x0000001C ;_Dejavu18_Bitmaps+1720
0x36D0	0x00000000 ;_Dejavu18_Bitmaps+1724
0x36D4	0x00000000 ;_Dejavu18_Bitmaps+1728
0x36D8	0x80800000 ;_Dejavu18_Bitmaps+1732
0x36DC	0x00418080 ;_Dejavu18_Bitmaps+1736
0x36E0	0x00220041 ;_Dejavu18_Bitmaps+1740
0x36E4	0x00140022 ;_Dejavu18_Bitmaps+1744
0x36E8	0x00080014 ;_Dejavu18_Bitmaps+1748
0x36EC	0x00000008 ;_Dejavu18_Bitmaps+1752
0x36F0	0x00000000 ;_Dejavu18_Bitmaps+1756
0x36F4	0x00000000 ;_Dejavu18_Bitmaps+1760
0x36F8	0x08820000 ;_Dejavu18_Bitmaps+1764
0x36FC	0x10450885 ;_Dejavu18_Bitmaps+1768
0x3700	0x10451045 ;_Dejavu18_Bitmaps+1772
0x3704	0xA028A028 ;_Dejavu18_Bitmaps+1776
0x3708	0x4010A028 ;_Dejavu18_Bitmaps+1780
0x370C	0x00004010 ;_Dejavu18_Bitmaps+1784
0x3710	0x00000000 ;_Dejavu18_Bitmaps+1788
0x3714	0x00000000 ;_Dejavu18_Bitmaps+1792
0x3718	0x00820000 ;_Dejavu18_Bitmaps+1796
0x371C	0x00440044 ;_Dejavu18_Bitmaps+1800
0x3720	0x00100028 ;_Dejavu18_Bitmaps+1804
0x3724	0x00280010 ;_Dejavu18_Bitmaps+1808
0x3728	0x00440044 ;_Dejavu18_Bitmaps+1812
0x372C	0x00000082 ;_Dejavu18_Bitmaps+1816
0x3730	0x00000000 ;_Dejavu18_Bitmaps+1820
0x3734	0x00000000 ;_Dejavu18_Bitmaps+1824
0x3738	0x00410000 ;_Dejavu18_Bitmaps+1828
0x373C	0x00220022 ;_Dejavu18_Bitmaps+1832
0x3740	0x00140014 ;_Dejavu18_Bitmaps+1836
0x3744	0x00080008 ;_Dejavu18_Bitmaps+1840
0x3748	0x00080008 ;_Dejavu18_Bitmaps+1844
0x374C	0x00000008 ;_Dejavu18_Bitmaps+1848
0x3750	0x00000000 ;_Dejavu18_Bitmaps+1852
0x3754	0x00000000 ;_Dejavu18_Bitmaps+1856
0x3758	0x007E0000 ;_Dejavu18_Bitmaps+1860
0x375C	0x00080004 ;_Dejavu18_Bitmaps+1864
0x3760	0x00100008 ;_Dejavu18_Bitmaps+1868
0x3764	0x00200010 ;_Dejavu18_Bitmaps+1872
0x3768	0x00400020 ;_Dejavu18_Bitmaps+1876
0x376C	0x000000FE ;_Dejavu18_Bitmaps+1880
0x3770	0x00000000 ;_Dejavu18_Bitmaps+1884
0x3774	0x00000000 ;_Dejavu18_Bitmaps+1888
0x3778	0x00600000 ;_Dejavu18_Bitmaps+1892
0x377C	0x00400040 ;_Dejavu18_Bitmaps+1896
0x3780	0x00400040 ;_Dejavu18_Bitmaps+1900
0x3784	0x00400040 ;_Dejavu18_Bitmaps+1904
0x3788	0x00400040 ;_Dejavu18_Bitmaps+1908
0x378C	0x00400040 ;_Dejavu18_Bitmaps+1912
0x3790	0x00600040 ;_Dejavu18_Bitmaps+1916
0x3794	0x00000000 ;_Dejavu18_Bitmaps+1920
0x3798	0x00800000 ;_Dejavu18_Bitmaps+1924
0x379C	0x00400080 ;_Dejavu18_Bitmaps+1928
0x37A0	0x00400040 ;_Dejavu18_Bitmaps+1932
0x37A4	0x00200020 ;_Dejavu18_Bitmaps+1936
0x37A8	0x00100020 ;_Dejavu18_Bitmaps+1940
0x37AC	0x00000010 ;_Dejavu18_Bitmaps+1944
0x37B0	0x00000000 ;_Dejavu18_Bitmaps+1948
0x37B4	0x00000000 ;_Dejavu18_Bitmaps+1952
0x37B8	0x00600000 ;_Dejavu18_Bitmaps+1956
0x37BC	0x00200020 ;_Dejavu18_Bitmaps+1960
0x37C0	0x00200020 ;_Dejavu18_Bitmaps+1964
0x37C4	0x00200020 ;_Dejavu18_Bitmaps+1968
0x37C8	0x00200020 ;_Dejavu18_Bitmaps+1972
0x37CC	0x00200020 ;_Dejavu18_Bitmaps+1976
0x37D0	0x00600020 ;_Dejavu18_Bitmaps+1980
0x37D4	0x00000000 ;_Dejavu18_Bitmaps+1984
0x37D8	0x00000000 ;_Dejavu18_Bitmaps+1988
0x37DC	0x00500020 ;_Dejavu18_Bitmaps+1992
0x37E0	0x00500050 ;_Dejavu18_Bitmaps+1996
0x37E4	0x00000088 ;_Dejavu18_Bitmaps+2000
0x37E8	0x00000000 ;_Dejavu18_Bitmaps+2004
0x37EC	0x00000000 ;_Dejavu18_Bitmaps+2008
0x37F0	0x00000000 ;_Dejavu18_Bitmaps+2012
0x37F4	0x00000000 ;_Dejavu18_Bitmaps+2016
0x37F8	0x00000000 ;_Dejavu18_Bitmaps+2020
0x37FC	0x00000000 ;_Dejavu18_Bitmaps+2024
0x3800	0x00000000 ;_Dejavu18_Bitmaps+2028
0x3804	0x00000000 ;_Dejavu18_Bitmaps+2032
0x3808	0x00000000 ;_Dejavu18_Bitmaps+2036
0x380C	0x00000000 ;_Dejavu18_Bitmaps+2040
0x3810	0x00FE0000 ;_Dejavu18_Bitmaps+2044
0x3814	0x00000000 ;_Dejavu18_Bitmaps+2048
0x3818	0x00400000 ;_Dejavu18_Bitmaps+2052
0x381C	0x00000020 ;_Dejavu18_Bitmaps+2056
0x3820	0x00000000 ;_Dejavu18_Bitmaps+2060
0x3824	0x00000000 ;_Dejavu18_Bitmaps+2064
0x3828	0x00000000 ;_Dejavu18_Bitmaps+2068
0x382C	0x00000000 ;_Dejavu18_Bitmaps+2072
0x3830	0x00000000 ;_Dejavu18_Bitmaps+2076
0x3834	0x00000000 ;_Dejavu18_Bitmaps+2080
0x3838	0x00000000 ;_Dejavu18_Bitmaps+2084
0x383C	0x00000000 ;_Dejavu18_Bitmaps+2088
0x3840	0x00440038 ;_Dejavu18_Bitmaps+2092
0x3844	0x003C0004 ;_Dejavu18_Bitmaps+2096
0x3848	0x004C0044 ;_Dejavu18_Bitmaps+2100
0x384C	0x00000034 ;_Dejavu18_Bitmaps+2104
0x3850	0x00000000 ;_Dejavu18_Bitmaps+2108
0x3854	0x00000000 ;_Dejavu18_Bitmaps+2112
0x3858	0x00400000 ;_Dejavu18_Bitmaps+2116
0x385C	0x00400040 ;_Dejavu18_Bitmaps+2120
0x3860	0x00640058 ;_Dejavu18_Bitmaps+2124
0x3864	0x00440044 ;_Dejavu18_Bitmaps+2128
0x3868	0x00440044 ;_Dejavu18_Bitmaps+2132
0x386C	0x00000078 ;_Dejavu18_Bitmaps+2136
0x3870	0x00000000 ;_Dejavu18_Bitmaps+2140
0x3874	0x00000000 ;_Dejavu18_Bitmaps+2144
0x3878	0x00000000 ;_Dejavu18_Bitmaps+2148
0x387C	0x00000000 ;_Dejavu18_Bitmaps+2152
0x3880	0x00440038 ;_Dejavu18_Bitmaps+2156
0x3884	0x00400040 ;_Dejavu18_Bitmaps+2160
0x3888	0x00440040 ;_Dejavu18_Bitmaps+2164
0x388C	0x00000038 ;_Dejavu18_Bitmaps+2168
0x3890	0x00000000 ;_Dejavu18_Bitmaps+2172
0x3894	0x00000000 ;_Dejavu18_Bitmaps+2176
0x3898	0x00040000 ;_Dejavu18_Bitmaps+2180
0x389C	0x00040004 ;_Dejavu18_Bitmaps+2184
0x38A0	0x004C0034 ;_Dejavu18_Bitmaps+2188
0x38A4	0x00440044 ;_Dejavu18_Bitmaps+2192
0x38A8	0x004C0044 ;_Dejavu18_Bitmaps+2196
0x38AC	0x00000034 ;_Dejavu18_Bitmaps+2200
0x38B0	0x00000000 ;_Dejavu18_Bitmaps+2204
0x38B4	0x00000000 ;_Dejavu18_Bitmaps+2208
0x38B8	0x00000000 ;_Dejavu18_Bitmaps+2212
0x38BC	0x00000000 ;_Dejavu18_Bitmaps+2216
0x38C0	0x00440038 ;_Dejavu18_Bitmaps+2220
0x38C4	0x007C0044 ;_Dejavu18_Bitmaps+2224
0x38C8	0x00440040 ;_Dejavu18_Bitmaps+2228
0x38CC	0x00000038 ;_Dejavu18_Bitmaps+2232
0x38D0	0x00000000 ;_Dejavu18_Bitmaps+2236
0x38D4	0x00000000 ;_Dejavu18_Bitmaps+2240
0x38D8	0x00300000 ;_Dejavu18_Bitmaps+2244
0x38DC	0x00400040 ;_Dejavu18_Bitmaps+2248
0x38E0	0x004000E0 ;_Dejavu18_Bitmaps+2252
0x38E4	0x00400040 ;_Dejavu18_Bitmaps+2256
0x38E8	0x00400040 ;_Dejavu18_Bitmaps+2260
0x38EC	0x00000040 ;_Dejavu18_Bitmaps+2264
0x38F0	0x00000000 ;_Dejavu18_Bitmaps+2268
0x38F4	0x00000000 ;_Dejavu18_Bitmaps+2272
0x38F8	0x00000000 ;_Dejavu18_Bitmaps+2276
0x38FC	0x00000000 ;_Dejavu18_Bitmaps+2280
0x3900	0x004C0034 ;_Dejavu18_Bitmaps+2284
0x3904	0x00440044 ;_Dejavu18_Bitmaps+2288
0x3908	0x004C0044 ;_Dejavu18_Bitmaps+2292
0x390C	0x00040034 ;_Dejavu18_Bitmaps+2296
0x3910	0x00380044 ;_Dejavu18_Bitmaps+2300
0x3914	0x00000000 ;_Dejavu18_Bitmaps+2304
0x3918	0x00400000 ;_Dejavu18_Bitmaps+2308
0x391C	0x00400040 ;_Dejavu18_Bitmaps+2312
0x3920	0x00640058 ;_Dejavu18_Bitmaps+2316
0x3924	0x00440044 ;_Dejavu18_Bitmaps+2320
0x3928	0x00440044 ;_Dejavu18_Bitmaps+2324
0x392C	0x00000044 ;_Dejavu18_Bitmaps+2328
0x3930	0x00000000 ;_Dejavu18_Bitmaps+2332
0x3934	0x00000000 ;_Dejavu18_Bitmaps+2336
0x3938	0x00400000 ;_Dejavu18_Bitmaps+2340
0x393C	0x00000000 ;_Dejavu18_Bitmaps+2344
0x3940	0x00400040 ;_Dejavu18_Bitmaps+2348
0x3944	0x00400040 ;_Dejavu18_Bitmaps+2352
0x3948	0x00400040 ;_Dejavu18_Bitmaps+2356
0x394C	0x00000040 ;_Dejavu18_Bitmaps+2360
0x3950	0x00000000 ;_Dejavu18_Bitmaps+2364
0x3954	0x00000000 ;_Dejavu18_Bitmaps+2368
0x3958	0x00400000 ;_Dejavu18_Bitmaps+2372
0x395C	0x00000000 ;_Dejavu18_Bitmaps+2376
0x3960	0x00400040 ;_Dejavu18_Bitmaps+2380
0x3964	0x00400040 ;_Dejavu18_Bitmaps+2384
0x3968	0x00400040 ;_Dejavu18_Bitmaps+2388
0x396C	0x00400040 ;_Dejavu18_Bitmaps+2392
0x3970	0x00800040 ;_Dejavu18_Bitmaps+2396
0x3974	0x00000000 ;_Dejavu18_Bitmaps+2400
0x3978	0x00400000 ;_Dejavu18_Bitmaps+2404
0x397C	0x00400040 ;_Dejavu18_Bitmaps+2408
0x3980	0x00480044 ;_Dejavu18_Bitmaps+2412
0x3984	0x00700050 ;_Dejavu18_Bitmaps+2416
0x3988	0x00480048 ;_Dejavu18_Bitmaps+2420
0x398C	0x00000044 ;_Dejavu18_Bitmaps+2424
0x3990	0x00000000 ;_Dejavu18_Bitmaps+2428
0x3994	0x00000000 ;_Dejavu18_Bitmaps+2432
0x3998	0x00400000 ;_Dejavu18_Bitmaps+2436
0x399C	0x00400040 ;_Dejavu18_Bitmaps+2440
0x39A0	0x00400040 ;_Dejavu18_Bitmaps+2444
0x39A4	0x00400040 ;_Dejavu18_Bitmaps+2448
0x39A8	0x00400040 ;_Dejavu18_Bitmaps+2452
0x39AC	0x00000040 ;_Dejavu18_Bitmaps+2456
0x39B0	0x00000000 ;_Dejavu18_Bitmaps+2460
0x39B4	0x00000000 ;_Dejavu18_Bitmaps+2464
0x39B8	0x00000000 ;_Dejavu18_Bitmaps+2468
0x39BC	0x00000000 ;_Dejavu18_Bitmaps+2472
0x39C0	0x40668059 ;_Dejavu18_Bitmaps+2476
0x39C4	0x40444044 ;_Dejavu18_Bitmaps+2480
0x39C8	0x40444044 ;_Dejavu18_Bitmaps+2484
0x39CC	0x00004044 ;_Dejavu18_Bitmaps+2488
0x39D0	0x00000000 ;_Dejavu18_Bitmaps+2492
0x39D4	0x00000000 ;_Dejavu18_Bitmaps+2496
0x39D8	0x00000000 ;_Dejavu18_Bitmaps+2500
0x39DC	0x00000000 ;_Dejavu18_Bitmaps+2504
0x39E0	0x00640058 ;_Dejavu18_Bitmaps+2508
0x39E4	0x00440044 ;_Dejavu18_Bitmaps+2512
0x39E8	0x00440044 ;_Dejavu18_Bitmaps+2516
0x39EC	0x00000044 ;_Dejavu18_Bitmaps+2520
0x39F0	0x00000000 ;_Dejavu18_Bitmaps+2524
0x39F4	0x00000000 ;_Dejavu18_Bitmaps+2528
0x39F8	0x00000000 ;_Dejavu18_Bitmaps+2532
0x39FC	0x00000000 ;_Dejavu18_Bitmaps+2536
0x3A00	0x00440038 ;_Dejavu18_Bitmaps+2540
0x3A04	0x00440044 ;_Dejavu18_Bitmaps+2544
0x3A08	0x00440044 ;_Dejavu18_Bitmaps+2548
0x3A0C	0x00000038 ;_Dejavu18_Bitmaps+2552
0x3A10	0x00000000 ;_Dejavu18_Bitmaps+2556
0x3A14	0x00000000 ;_Dejavu18_Bitmaps+2560
0x3A18	0x00000000 ;_Dejavu18_Bitmaps+2564
0x3A1C	0x00000000 ;_Dejavu18_Bitmaps+2568
0x3A20	0x00640058 ;_Dejavu18_Bitmaps+2572
0x3A24	0x00440044 ;_Dejavu18_Bitmaps+2576
0x3A28	0x00640044 ;_Dejavu18_Bitmaps+2580
0x3A2C	0x00400058 ;_Dejavu18_Bitmaps+2584
0x3A30	0x00400040 ;_Dejavu18_Bitmaps+2588
0x3A34	0x00000000 ;_Dejavu18_Bitmaps+2592
0x3A38	0x00000000 ;_Dejavu18_Bitmaps+2596
0x3A3C	0x00000000 ;_Dejavu18_Bitmaps+2600
0x3A40	0x004C0034 ;_Dejavu18_Bitmaps+2604
0x3A44	0x00440044 ;_Dejavu18_Bitmaps+2608
0x3A48	0x004C0044 ;_Dejavu18_Bitmaps+2612
0x3A4C	0x00040034 ;_Dejavu18_Bitmaps+2616
0x3A50	0x00040004 ;_Dejavu18_Bitmaps+2620
0x3A54	0x00000000 ;_Dejavu18_Bitmaps+2624
0x3A58	0x00000000 ;_Dejavu18_Bitmaps+2628
0x3A5C	0x00000000 ;_Dejavu18_Bitmaps+2632
0x3A60	0x00600050 ;_Dejavu18_Bitmaps+2636
0x3A64	0x00400040 ;_Dejavu18_Bitmaps+2640
0x3A68	0x00400040 ;_Dejavu18_Bitmaps+2644
0x3A6C	0x00000040 ;_Dejavu18_Bitmaps+2648
0x3A70	0x00000000 ;_Dejavu18_Bitmaps+2652
0x3A74	0x00000000 ;_Dejavu18_Bitmaps+2656
0x3A78	0x00000000 ;_Dejavu18_Bitmaps+2660
0x3A7C	0x00000000 ;_Dejavu18_Bitmaps+2664
0x3A80	0x00440038 ;_Dejavu18_Bitmaps+2668
0x3A84	0x00380040 ;_Dejavu18_Bitmaps+2672
0x3A88	0x00440004 ;_Dejavu18_Bitmaps+2676
0x3A8C	0x00000038 ;_Dejavu18_Bitmaps+2680
0x3A90	0x00000000 ;_Dejavu18_Bitmaps+2684
0x3A94	0x00000000 ;_Dejavu18_Bitmaps+2688
0x3A98	0x00000000 ;_Dejavu18_Bitmaps+2692
0x3A9C	0x00400040 ;_Dejavu18_Bitmaps+2696
0x3AA0	0x004000E0 ;_Dejavu18_Bitmaps+2700
0x3AA4	0x00400040 ;_Dejavu18_Bitmaps+2704
0x3AA8	0x00400040 ;_Dejavu18_Bitmaps+2708
0x3AAC	0x00000060 ;_Dejavu18_Bitmaps+2712
0x3AB0	0x00000000 ;_Dejavu18_Bitmaps+2716
0x3AB4	0x00000000 ;_Dejavu18_Bitmaps+2720
0x3AB8	0x00000000 ;_Dejavu18_Bitmaps+2724
0x3ABC	0x00000000 ;_Dejavu18_Bitmaps+2728
0x3AC0	0x00440044 ;_Dejavu18_Bitmaps+2732
0x3AC4	0x00440044 ;_Dejavu18_Bitmaps+2736
0x3AC8	0x00440044 ;_Dejavu18_Bitmaps+2740
0x3ACC	0x0000003C ;_Dejavu18_Bitmaps+2744
0x3AD0	0x00000000 ;_Dejavu18_Bitmaps+2748
0x3AD4	0x00000000 ;_Dejavu18_Bitmaps+2752
0x3AD8	0x00000000 ;_Dejavu18_Bitmaps+2756
0x3ADC	0x00000000 ;_Dejavu18_Bitmaps+2760
0x3AE0	0x00880088 ;_Dejavu18_Bitmaps+2764
0x3AE4	0x00500050 ;_Dejavu18_Bitmaps+2768
0x3AE8	0x00200050 ;_Dejavu18_Bitmaps+2772
0x3AEC	0x00000020 ;_Dejavu18_Bitmaps+2776
0x3AF0	0x00000000 ;_Dejavu18_Bitmaps+2780
0x3AF4	0x00000000 ;_Dejavu18_Bitmaps+2784
0x3AF8	0x00000000 ;_Dejavu18_Bitmaps+2788
0x3AFC	0x00000000 ;_Dejavu18_Bitmaps+2792
0x3B00	0x80888088 ;_Dejavu18_Bitmaps+2796
0x3B04	0x00550055 ;_Dejavu18_Bitmaps+2800
0x3B08	0x00220055 ;_Dejavu18_Bitmaps+2804
0x3B0C	0x00000022 ;_Dejavu18_Bitmaps+2808
0x3B10	0x00000000 ;_Dejavu18_Bitmaps+2812
0x3B14	0x00000000 ;_Dejavu18_Bitmaps+2816
0x3B18	0x00000000 ;_Dejavu18_Bitmaps+2820
0x3B1C	0x00000000 ;_Dejavu18_Bitmaps+2824
0x3B20	0x00280044 ;_Dejavu18_Bitmaps+2828
0x3B24	0x00100028 ;_Dejavu18_Bitmaps+2832
0x3B28	0x00280028 ;_Dejavu18_Bitmaps+2836
0x3B2C	0x00000044 ;_Dejavu18_Bitmaps+2840
0x3B30	0x00000000 ;_Dejavu18_Bitmaps+2844
0x3B34	0x00000000 ;_Dejavu18_Bitmaps+2848
0x3B38	0x00000000 ;_Dejavu18_Bitmaps+2852
0x3B3C	0x00000000 ;_Dejavu18_Bitmaps+2856
0x3B40	0x00440044 ;_Dejavu18_Bitmaps+2860
0x3B44	0x00280028 ;_Dejavu18_Bitmaps+2864
0x3B48	0x00100028 ;_Dejavu18_Bitmaps+2868
0x3B4C	0x00100010 ;_Dejavu18_Bitmaps+2872
0x3B50	0x00600010 ;_Dejavu18_Bitmaps+2876
0x3B54	0x00000000 ;_Dejavu18_Bitmaps+2880
0x3B58	0x00000000 ;_Dejavu18_Bitmaps+2884
0x3B5C	0x00000000 ;_Dejavu18_Bitmaps+2888
0x3B60	0x0008007C ;_Dejavu18_Bitmaps+2892
0x3B64	0x00100008 ;_Dejavu18_Bitmaps+2896
0x3B68	0x00200020 ;_Dejavu18_Bitmaps+2900
0x3B6C	0x0000007C ;_Dejavu18_Bitmaps+2904
0x3B70	0x00000000 ;_Dejavu18_Bitmaps+2908
; end of _Dejavu18_Bitmaps
;matrixrgb_firmware.c,0 :: ?ICSscroll_text_right_text_frame_L0 [256]
0x3B74	0x00000000 ;?ICSscroll_text_right_text_frame_L0+0
0x3B78	0x00000000 ;?ICSscroll_text_right_text_frame_L0+4
0x3B7C	0x00000000 ;?ICSscroll_text_right_text_frame_L0+8
0x3B80	0x00000000 ;?ICSscroll_text_right_text_frame_L0+12
0x3B84	0x00000000 ;?ICSscroll_text_right_text_frame_L0+16
0x3B88	0x00000000 ;?ICSscroll_text_right_text_frame_L0+20
0x3B8C	0x00000000 ;?ICSscroll_text_right_text_frame_L0+24
0x3B90	0x00000000 ;?ICSscroll_text_right_text_frame_L0+28
0x3B94	0x00000000 ;?ICSscroll_text_right_text_frame_L0+32
0x3B98	0x00000000 ;?ICSscroll_text_right_text_frame_L0+36
0x3B9C	0x00000000 ;?ICSscroll_text_right_text_frame_L0+40
0x3BA0	0x00000000 ;?ICSscroll_text_right_text_frame_L0+44
0x3BA4	0x00000000 ;?ICSscroll_text_right_text_frame_L0+48
0x3BA8	0x00000000 ;?ICSscroll_text_right_text_frame_L0+52
0x3BAC	0x00000000 ;?ICSscroll_text_right_text_frame_L0+56
0x3BB0	0x00000000 ;?ICSscroll_text_right_text_frame_L0+60
0x3BB4	0x00000000 ;?ICSscroll_text_right_text_frame_L0+64
0x3BB8	0x00000000 ;?ICSscroll_text_right_text_frame_L0+68
0x3BBC	0x00000000 ;?ICSscroll_text_right_text_frame_L0+72
0x3BC0	0x00000000 ;?ICSscroll_text_right_text_frame_L0+76
0x3BC4	0x00000000 ;?ICSscroll_text_right_text_frame_L0+80
0x3BC8	0x00000000 ;?ICSscroll_text_right_text_frame_L0+84
0x3BCC	0x00000000 ;?ICSscroll_text_right_text_frame_L0+88
0x3BD0	0x00000000 ;?ICSscroll_text_right_text_frame_L0+92
0x3BD4	0x00000000 ;?ICSscroll_text_right_text_frame_L0+96
0x3BD8	0x00000000 ;?ICSscroll_text_right_text_frame_L0+100
0x3BDC	0x00000000 ;?ICSscroll_text_right_text_frame_L0+104
0x3BE0	0x00000000 ;?ICSscroll_text_right_text_frame_L0+108
0x3BE4	0x00000000 ;?ICSscroll_text_right_text_frame_L0+112
0x3BE8	0x00000000 ;?ICSscroll_text_right_text_frame_L0+116
0x3BEC	0x00000000 ;?ICSscroll_text_right_text_frame_L0+120
0x3BF0	0x00000000 ;?ICSscroll_text_right_text_frame_L0+124
0x3BF4	0x00000000 ;?ICSscroll_text_right_text_frame_L0+128
0x3BF8	0x00000000 ;?ICSscroll_text_right_text_frame_L0+132
0x3BFC	0x00000000 ;?ICSscroll_text_right_text_frame_L0+136
0x3C00	0x00000000 ;?ICSscroll_text_right_text_frame_L0+140
0x3C04	0x00000000 ;?ICSscroll_text_right_text_frame_L0+144
0x3C08	0x00000000 ;?ICSscroll_text_right_text_frame_L0+148
0x3C0C	0x00000000 ;?ICSscroll_text_right_text_frame_L0+152
0x3C10	0x00000000 ;?ICSscroll_text_right_text_frame_L0+156
0x3C14	0x00000000 ;?ICSscroll_text_right_text_frame_L0+160
0x3C18	0x00000000 ;?ICSscroll_text_right_text_frame_L0+164
0x3C1C	0x00000000 ;?ICSscroll_text_right_text_frame_L0+168
0x3C20	0x00000000 ;?ICSscroll_text_right_text_frame_L0+172
0x3C24	0x00000000 ;?ICSscroll_text_right_text_frame_L0+176
0x3C28	0x00000000 ;?ICSscroll_text_right_text_frame_L0+180
0x3C2C	0x00000000 ;?ICSscroll_text_right_text_frame_L0+184
0x3C30	0x00000000 ;?ICSscroll_text_right_text_frame_L0+188
0x3C34	0x00000000 ;?ICSscroll_text_right_text_frame_L0+192
0x3C38	0x00000000 ;?ICSscroll_text_right_text_frame_L0+196
0x3C3C	0x00000000 ;?ICSscroll_text_right_text_frame_L0+200
0x3C40	0x00000000 ;?ICSscroll_text_right_text_frame_L0+204
0x3C44	0x00000000 ;?ICSscroll_text_right_text_frame_L0+208
0x3C48	0x00000000 ;?ICSscroll_text_right_text_frame_L0+212
0x3C4C	0x00000000 ;?ICSscroll_text_right_text_frame_L0+216
0x3C50	0x00000000 ;?ICSscroll_text_right_text_frame_L0+220
0x3C54	0x00000000 ;?ICSscroll_text_right_text_frame_L0+224
0x3C58	0x00000000 ;?ICSscroll_text_right_text_frame_L0+228
0x3C5C	0x00000000 ;?ICSscroll_text_right_text_frame_L0+232
0x3C60	0x00000000 ;?ICSscroll_text_right_text_frame_L0+236
0x3C64	0x00000000 ;?ICSscroll_text_right_text_frame_L0+240
0x3C68	0x00000000 ;?ICSscroll_text_right_text_frame_L0+244
0x3C6C	0x00000000 ;?ICSscroll_text_right_text_frame_L0+248
0x3C70	0x00000000 ;?ICSscroll_text_right_text_frame_L0+252
; end of ?ICSscroll_text_right_text_frame_L0
;matrixrgb_firmware.c,0 :: ?ICSwrite_text_command_text_L0 [256]
0x3C74	0x00000000 ;?ICSwrite_text_command_text_L0+0
0x3C78	0x00000000 ;?ICSwrite_text_command_text_L0+4
0x3C7C	0x00000000 ;?ICSwrite_text_command_text_L0+8
0x3C80	0x00000000 ;?ICSwrite_text_command_text_L0+12
0x3C84	0x00000000 ;?ICSwrite_text_command_text_L0+16
0x3C88	0x00000000 ;?ICSwrite_text_command_text_L0+20
0x3C8C	0x00000000 ;?ICSwrite_text_command_text_L0+24
0x3C90	0x00000000 ;?ICSwrite_text_command_text_L0+28
0x3C94	0x00000000 ;?ICSwrite_text_command_text_L0+32
0x3C98	0x00000000 ;?ICSwrite_text_command_text_L0+36
0x3C9C	0x00000000 ;?ICSwrite_text_command_text_L0+40
0x3CA0	0x00000000 ;?ICSwrite_text_command_text_L0+44
0x3CA4	0x00000000 ;?ICSwrite_text_command_text_L0+48
0x3CA8	0x00000000 ;?ICSwrite_text_command_text_L0+52
0x3CAC	0x00000000 ;?ICSwrite_text_command_text_L0+56
0x3CB0	0x00000000 ;?ICSwrite_text_command_text_L0+60
0x3CB4	0x00000000 ;?ICSwrite_text_command_text_L0+64
0x3CB8	0x00000000 ;?ICSwrite_text_command_text_L0+68
0x3CBC	0x00000000 ;?ICSwrite_text_command_text_L0+72
0x3CC0	0x00000000 ;?ICSwrite_text_command_text_L0+76
0x3CC4	0x00000000 ;?ICSwrite_text_command_text_L0+80
0x3CC8	0x00000000 ;?ICSwrite_text_command_text_L0+84
0x3CCC	0x00000000 ;?ICSwrite_text_command_text_L0+88
0x3CD0	0x00000000 ;?ICSwrite_text_command_text_L0+92
0x3CD4	0x00000000 ;?ICSwrite_text_command_text_L0+96
0x3CD8	0x00000000 ;?ICSwrite_text_command_text_L0+100
0x3CDC	0x00000000 ;?ICSwrite_text_command_text_L0+104
0x3CE0	0x00000000 ;?ICSwrite_text_command_text_L0+108
0x3CE4	0x00000000 ;?ICSwrite_text_command_text_L0+112
0x3CE8	0x00000000 ;?ICSwrite_text_command_text_L0+116
0x3CEC	0x00000000 ;?ICSwrite_text_command_text_L0+120
0x3CF0	0x00000000 ;?ICSwrite_text_command_text_L0+124
0x3CF4	0x00000000 ;?ICSwrite_text_command_text_L0+128
0x3CF8	0x00000000 ;?ICSwrite_text_command_text_L0+132
0x3CFC	0x00000000 ;?ICSwrite_text_command_text_L0+136
0x3D00	0x00000000 ;?ICSwrite_text_command_text_L0+140
0x3D04	0x00000000 ;?ICSwrite_text_command_text_L0+144
0x3D08	0x00000000 ;?ICSwrite_text_command_text_L0+148
0x3D0C	0x00000000 ;?ICSwrite_text_command_text_L0+152
0x3D10	0x00000000 ;?ICSwrite_text_command_text_L0+156
0x3D14	0x00000000 ;?ICSwrite_text_command_text_L0+160
0x3D18	0x00000000 ;?ICSwrite_text_command_text_L0+164
0x3D1C	0x00000000 ;?ICSwrite_text_command_text_L0+168
0x3D20	0x00000000 ;?ICSwrite_text_command_text_L0+172
0x3D24	0x00000000 ;?ICSwrite_text_command_text_L0+176
0x3D28	0x00000000 ;?ICSwrite_text_command_text_L0+180
0x3D2C	0x00000000 ;?ICSwrite_text_command_text_L0+184
0x3D30	0x00000000 ;?ICSwrite_text_command_text_L0+188
0x3D34	0x00000000 ;?ICSwrite_text_command_text_L0+192
0x3D38	0x00000000 ;?ICSwrite_text_command_text_L0+196
0x3D3C	0x00000000 ;?ICSwrite_text_command_text_L0+200
0x3D40	0x00000000 ;?ICSwrite_text_command_text_L0+204
0x3D44	0x00000000 ;?ICSwrite_text_command_text_L0+208
0x3D48	0x00000000 ;?ICSwrite_text_command_text_L0+212
0x3D4C	0x00000000 ;?ICSwrite_text_command_text_L0+216
0x3D50	0x00000000 ;?ICSwrite_text_command_text_L0+220
0x3D54	0x00000000 ;?ICSwrite_text_command_text_L0+224
0x3D58	0x00000000 ;?ICSwrite_text_command_text_L0+228
0x3D5C	0x00000000 ;?ICSwrite_text_command_text_L0+232
0x3D60	0x00000000 ;?ICSwrite_text_command_text_L0+236
0x3D64	0x00000000 ;?ICSwrite_text_command_text_L0+240
0x3D68	0x00000000 ;?ICSwrite_text_command_text_L0+244
0x3D6C	0x00000000 ;?ICSwrite_text_command_text_L0+248
0x3D70	0x00000000 ;?ICSwrite_text_command_text_L0+252
; end of ?ICSwrite_text_command_text_L0
;matrixrgb_firmware.c,0 :: ?ICSwrite_text_text_frame_L0 [256]
0x3D74	0x00000000 ;?ICSwrite_text_text_frame_L0+0
0x3D78	0x00000000 ;?ICSwrite_text_text_frame_L0+4
0x3D7C	0x00000000 ;?ICSwrite_text_text_frame_L0+8
0x3D80	0x00000000 ;?ICSwrite_text_text_frame_L0+12
0x3D84	0x00000000 ;?ICSwrite_text_text_frame_L0+16
0x3D88	0x00000000 ;?ICSwrite_text_text_frame_L0+20
0x3D8C	0x00000000 ;?ICSwrite_text_text_frame_L0+24
0x3D90	0x00000000 ;?ICSwrite_text_text_frame_L0+28
0x3D94	0x00000000 ;?ICSwrite_text_text_frame_L0+32
0x3D98	0x00000000 ;?ICSwrite_text_text_frame_L0+36
0x3D9C	0x00000000 ;?ICSwrite_text_text_frame_L0+40
0x3DA0	0x00000000 ;?ICSwrite_text_text_frame_L0+44
0x3DA4	0x00000000 ;?ICSwrite_text_text_frame_L0+48
0x3DA8	0x00000000 ;?ICSwrite_text_text_frame_L0+52
0x3DAC	0x00000000 ;?ICSwrite_text_text_frame_L0+56
0x3DB0	0x00000000 ;?ICSwrite_text_text_frame_L0+60
0x3DB4	0x00000000 ;?ICSwrite_text_text_frame_L0+64
0x3DB8	0x00000000 ;?ICSwrite_text_text_frame_L0+68
0x3DBC	0x00000000 ;?ICSwrite_text_text_frame_L0+72
0x3DC0	0x00000000 ;?ICSwrite_text_text_frame_L0+76
0x3DC4	0x00000000 ;?ICSwrite_text_text_frame_L0+80
0x3DC8	0x00000000 ;?ICSwrite_text_text_frame_L0+84
0x3DCC	0x00000000 ;?ICSwrite_text_text_frame_L0+88
0x3DD0	0x00000000 ;?ICSwrite_text_text_frame_L0+92
0x3DD4	0x00000000 ;?ICSwrite_text_text_frame_L0+96
0x3DD8	0x00000000 ;?ICSwrite_text_text_frame_L0+100
0x3DDC	0x00000000 ;?ICSwrite_text_text_frame_L0+104
0x3DE0	0x00000000 ;?ICSwrite_text_text_frame_L0+108
0x3DE4	0x00000000 ;?ICSwrite_text_text_frame_L0+112
0x3DE8	0x00000000 ;?ICSwrite_text_text_frame_L0+116
0x3DEC	0x00000000 ;?ICSwrite_text_text_frame_L0+120
0x3DF0	0x00000000 ;?ICSwrite_text_text_frame_L0+124
0x3DF4	0x00000000 ;?ICSwrite_text_text_frame_L0+128
0x3DF8	0x00000000 ;?ICSwrite_text_text_frame_L0+132
0x3DFC	0x00000000 ;?ICSwrite_text_text_frame_L0+136
0x3E00	0x00000000 ;?ICSwrite_text_text_frame_L0+140
0x3E04	0x00000000 ;?ICSwrite_text_text_frame_L0+144
0x3E08	0x00000000 ;?ICSwrite_text_text_frame_L0+148
0x3E0C	0x00000000 ;?ICSwrite_text_text_frame_L0+152
0x3E10	0x00000000 ;?ICSwrite_text_text_frame_L0+156
0x3E14	0x00000000 ;?ICSwrite_text_text_frame_L0+160
0x3E18	0x00000000 ;?ICSwrite_text_text_frame_L0+164
0x3E1C	0x00000000 ;?ICSwrite_text_text_frame_L0+168
0x3E20	0x00000000 ;?ICSwrite_text_text_frame_L0+172
0x3E24	0x00000000 ;?ICSwrite_text_text_frame_L0+176
0x3E28	0x00000000 ;?ICSwrite_text_text_frame_L0+180
0x3E2C	0x00000000 ;?ICSwrite_text_text_frame_L0+184
0x3E30	0x00000000 ;?ICSwrite_text_text_frame_L0+188
0x3E34	0x00000000 ;?ICSwrite_text_text_frame_L0+192
0x3E38	0x00000000 ;?ICSwrite_text_text_frame_L0+196
0x3E3C	0x00000000 ;?ICSwrite_text_text_frame_L0+200
0x3E40	0x00000000 ;?ICSwrite_text_text_frame_L0+204
0x3E44	0x00000000 ;?ICSwrite_text_text_frame_L0+208
0x3E48	0x00000000 ;?ICSwrite_text_text_frame_L0+212
0x3E4C	0x00000000 ;?ICSwrite_text_text_frame_L0+216
0x3E50	0x00000000 ;?ICSwrite_text_text_frame_L0+220
0x3E54	0x00000000 ;?ICSwrite_text_text_frame_L0+224
0x3E58	0x00000000 ;?ICSwrite_text_text_frame_L0+228
0x3E5C	0x00000000 ;?ICSwrite_text_text_frame_L0+232
0x3E60	0x00000000 ;?ICSwrite_text_text_frame_L0+236
0x3E64	0x00000000 ;?ICSwrite_text_text_frame_L0+240
0x3E68	0x00000000 ;?ICSwrite_text_text_frame_L0+244
0x3E6C	0x00000000 ;?ICSwrite_text_text_frame_L0+248
0x3E70	0x00000000 ;?ICSwrite_text_text_frame_L0+252
; end of ?ICSwrite_text_text_frame_L0
;matrixrgb_firmware.c,0 :: ?ICSscroll_text_right_command_text_L0 [256]
0x3E74	0x00000000 ;?ICSscroll_text_right_command_text_L0+0
0x3E78	0x00000000 ;?ICSscroll_text_right_command_text_L0+4
0x3E7C	0x00000000 ;?ICSscroll_text_right_command_text_L0+8
0x3E80	0x00000000 ;?ICSscroll_text_right_command_text_L0+12
0x3E84	0x00000000 ;?ICSscroll_text_right_command_text_L0+16
0x3E88	0x00000000 ;?ICSscroll_text_right_command_text_L0+20
0x3E8C	0x00000000 ;?ICSscroll_text_right_command_text_L0+24
0x3E90	0x00000000 ;?ICSscroll_text_right_command_text_L0+28
0x3E94	0x00000000 ;?ICSscroll_text_right_command_text_L0+32
0x3E98	0x00000000 ;?ICSscroll_text_right_command_text_L0+36
0x3E9C	0x00000000 ;?ICSscroll_text_right_command_text_L0+40
0x3EA0	0x00000000 ;?ICSscroll_text_right_command_text_L0+44
0x3EA4	0x00000000 ;?ICSscroll_text_right_command_text_L0+48
0x3EA8	0x00000000 ;?ICSscroll_text_right_command_text_L0+52
0x3EAC	0x00000000 ;?ICSscroll_text_right_command_text_L0+56
0x3EB0	0x00000000 ;?ICSscroll_text_right_command_text_L0+60
0x3EB4	0x00000000 ;?ICSscroll_text_right_command_text_L0+64
0x3EB8	0x00000000 ;?ICSscroll_text_right_command_text_L0+68
0x3EBC	0x00000000 ;?ICSscroll_text_right_command_text_L0+72
0x3EC0	0x00000000 ;?ICSscroll_text_right_command_text_L0+76
0x3EC4	0x00000000 ;?ICSscroll_text_right_command_text_L0+80
0x3EC8	0x00000000 ;?ICSscroll_text_right_command_text_L0+84
0x3ECC	0x00000000 ;?ICSscroll_text_right_command_text_L0+88
0x3ED0	0x00000000 ;?ICSscroll_text_right_command_text_L0+92
0x3ED4	0x00000000 ;?ICSscroll_text_right_command_text_L0+96
0x3ED8	0x00000000 ;?ICSscroll_text_right_command_text_L0+100
0x3EDC	0x00000000 ;?ICSscroll_text_right_command_text_L0+104
0x3EE0	0x00000000 ;?ICSscroll_text_right_command_text_L0+108
0x3EE4	0x00000000 ;?ICSscroll_text_right_command_text_L0+112
0x3EE8	0x00000000 ;?ICSscroll_text_right_command_text_L0+116
0x3EEC	0x00000000 ;?ICSscroll_text_right_command_text_L0+120
0x3EF0	0x00000000 ;?ICSscroll_text_right_command_text_L0+124
0x3EF4	0x00000000 ;?ICSscroll_text_right_command_text_L0+128
0x3EF8	0x00000000 ;?ICSscroll_text_right_command_text_L0+132
0x3EFC	0x00000000 ;?ICSscroll_text_right_command_text_L0+136
0x3F00	0x00000000 ;?ICSscroll_text_right_command_text_L0+140
0x3F04	0x00000000 ;?ICSscroll_text_right_command_text_L0+144
0x3F08	0x00000000 ;?ICSscroll_text_right_command_text_L0+148
0x3F0C	0x00000000 ;?ICSscroll_text_right_command_text_L0+152
0x3F10	0x00000000 ;?ICSscroll_text_right_command_text_L0+156
0x3F14	0x00000000 ;?ICSscroll_text_right_command_text_L0+160
0x3F18	0x00000000 ;?ICSscroll_text_right_command_text_L0+164
0x3F1C	0x00000000 ;?ICSscroll_text_right_command_text_L0+168
0x3F20	0x00000000 ;?ICSscroll_text_right_command_text_L0+172
0x3F24	0x00000000 ;?ICSscroll_text_right_command_text_L0+176
0x3F28	0x00000000 ;?ICSscroll_text_right_command_text_L0+180
0x3F2C	0x00000000 ;?ICSscroll_text_right_command_text_L0+184
0x3F30	0x00000000 ;?ICSscroll_text_right_command_text_L0+188
0x3F34	0x00000000 ;?ICSscroll_text_right_command_text_L0+192
0x3F38	0x00000000 ;?ICSscroll_text_right_command_text_L0+196
0x3F3C	0x00000000 ;?ICSscroll_text_right_command_text_L0+200
0x3F40	0x00000000 ;?ICSscroll_text_right_command_text_L0+204
0x3F44	0x00000000 ;?ICSscroll_text_right_command_text_L0+208
0x3F48	0x00000000 ;?ICSscroll_text_right_command_text_L0+212
0x3F4C	0x00000000 ;?ICSscroll_text_right_command_text_L0+216
0x3F50	0x00000000 ;?ICSscroll_text_right_command_text_L0+220
0x3F54	0x00000000 ;?ICSscroll_text_right_command_text_L0+224
0x3F58	0x00000000 ;?ICSscroll_text_right_command_text_L0+228
0x3F5C	0x00000000 ;?ICSscroll_text_right_command_text_L0+232
0x3F60	0x00000000 ;?ICSscroll_text_right_command_text_L0+236
0x3F64	0x00000000 ;?ICSscroll_text_right_command_text_L0+240
0x3F68	0x00000000 ;?ICSscroll_text_right_command_text_L0+244
0x3F6C	0x00000000 ;?ICSscroll_text_right_command_text_L0+248
0x3F70	0x00000000 ;?ICSscroll_text_right_command_text_L0+252
; end of ?ICSscroll_text_right_command_text_L0
;matrixrgb_firmware.c,0 :: ?ICSscroll_text_left_command_text_L0 [256]
0x3F74	0x00000000 ;?ICSscroll_text_left_command_text_L0+0
0x3F78	0x00000000 ;?ICSscroll_text_left_command_text_L0+4
0x3F7C	0x00000000 ;?ICSscroll_text_left_command_text_L0+8
0x3F80	0x00000000 ;?ICSscroll_text_left_command_text_L0+12
0x3F84	0x00000000 ;?ICSscroll_text_left_command_text_L0+16
0x3F88	0x00000000 ;?ICSscroll_text_left_command_text_L0+20
0x3F8C	0x00000000 ;?ICSscroll_text_left_command_text_L0+24
0x3F90	0x00000000 ;?ICSscroll_text_left_command_text_L0+28
0x3F94	0x00000000 ;?ICSscroll_text_left_command_text_L0+32
0x3F98	0x00000000 ;?ICSscroll_text_left_command_text_L0+36
0x3F9C	0x00000000 ;?ICSscroll_text_left_command_text_L0+40
0x3FA0	0x00000000 ;?ICSscroll_text_left_command_text_L0+44
0x3FA4	0x00000000 ;?ICSscroll_text_left_command_text_L0+48
0x3FA8	0x00000000 ;?ICSscroll_text_left_command_text_L0+52
0x3FAC	0x00000000 ;?ICSscroll_text_left_command_text_L0+56
0x3FB0	0x00000000 ;?ICSscroll_text_left_command_text_L0+60
0x3FB4	0x00000000 ;?ICSscroll_text_left_command_text_L0+64
0x3FB8	0x00000000 ;?ICSscroll_text_left_command_text_L0+68
0x3FBC	0x00000000 ;?ICSscroll_text_left_command_text_L0+72
0x3FC0	0x00000000 ;?ICSscroll_text_left_command_text_L0+76
0x3FC4	0x00000000 ;?ICSscroll_text_left_command_text_L0+80
0x3FC8	0x00000000 ;?ICSscroll_text_left_command_text_L0+84
0x3FCC	0x00000000 ;?ICSscroll_text_left_command_text_L0+88
0x3FD0	0x00000000 ;?ICSscroll_text_left_command_text_L0+92
0x3FD4	0x00000000 ;?ICSscroll_text_left_command_text_L0+96
0x3FD8	0x00000000 ;?ICSscroll_text_left_command_text_L0+100
0x3FDC	0x00000000 ;?ICSscroll_text_left_command_text_L0+104
0x3FE0	0x00000000 ;?ICSscroll_text_left_command_text_L0+108
0x3FE4	0x00000000 ;?ICSscroll_text_left_command_text_L0+112
0x3FE8	0x00000000 ;?ICSscroll_text_left_command_text_L0+116
0x3FEC	0x00000000 ;?ICSscroll_text_left_command_text_L0+120
0x3FF0	0x00000000 ;?ICSscroll_text_left_command_text_L0+124
0x3FF4	0x00000000 ;?ICSscroll_text_left_command_text_L0+128
0x3FF8	0x00000000 ;?ICSscroll_text_left_command_text_L0+132
0x3FFC	0x00000000 ;?ICSscroll_text_left_command_text_L0+136
0x4000	0x00000000 ;?ICSscroll_text_left_command_text_L0+140
0x4004	0x00000000 ;?ICSscroll_text_left_command_text_L0+144
0x4008	0x00000000 ;?ICSscroll_text_left_command_text_L0+148
0x400C	0x00000000 ;?ICSscroll_text_left_command_text_L0+152
0x4010	0x00000000 ;?ICSscroll_text_left_command_text_L0+156
0x4014	0x00000000 ;?ICSscroll_text_left_command_text_L0+160
0x4018	0x00000000 ;?ICSscroll_text_left_command_text_L0+164
0x401C	0x00000000 ;?ICSscroll_text_left_command_text_L0+168
0x4020	0x00000000 ;?ICSscroll_text_left_command_text_L0+172
0x4024	0x00000000 ;?ICSscroll_text_left_command_text_L0+176
0x4028	0x00000000 ;?ICSscroll_text_left_command_text_L0+180
0x402C	0x00000000 ;?ICSscroll_text_left_command_text_L0+184
0x4030	0x00000000 ;?ICSscroll_text_left_command_text_L0+188
0x4034	0x00000000 ;?ICSscroll_text_left_command_text_L0+192
0x4038	0x00000000 ;?ICSscroll_text_left_command_text_L0+196
0x403C	0x00000000 ;?ICSscroll_text_left_command_text_L0+200
0x4040	0x00000000 ;?ICSscroll_text_left_command_text_L0+204
0x4044	0x00000000 ;?ICSscroll_text_left_command_text_L0+208
0x4048	0x00000000 ;?ICSscroll_text_left_command_text_L0+212
0x404C	0x00000000 ;?ICSscroll_text_left_command_text_L0+216
0x4050	0x00000000 ;?ICSscroll_text_left_command_text_L0+220
0x4054	0x00000000 ;?ICSscroll_text_left_command_text_L0+224
0x4058	0x00000000 ;?ICSscroll_text_left_command_text_L0+228
0x405C	0x00000000 ;?ICSscroll_text_left_command_text_L0+232
0x4060	0x00000000 ;?ICSscroll_text_left_command_text_L0+236
0x4064	0x00000000 ;?ICSscroll_text_left_command_text_L0+240
0x4068	0x00000000 ;?ICSscroll_text_left_command_text_L0+244
0x406C	0x00000000 ;?ICSscroll_text_left_command_text_L0+248
0x4070	0x00000000 ;?ICSscroll_text_left_command_text_L0+252
; end of ?ICSscroll_text_left_command_text_L0
;matrixrgb_firmware.c,0 :: ?ICSscroll_text_left_text_frame_L0 [256]
0x4074	0x00000000 ;?ICSscroll_text_left_text_frame_L0+0
0x4078	0x00000000 ;?ICSscroll_text_left_text_frame_L0+4
0x407C	0x00000000 ;?ICSscroll_text_left_text_frame_L0+8
0x4080	0x00000000 ;?ICSscroll_text_left_text_frame_L0+12
0x4084	0x00000000 ;?ICSscroll_text_left_text_frame_L0+16
0x4088	0x00000000 ;?ICSscroll_text_left_text_frame_L0+20
0x408C	0x00000000 ;?ICSscroll_text_left_text_frame_L0+24
0x4090	0x00000000 ;?ICSscroll_text_left_text_frame_L0+28
0x4094	0x00000000 ;?ICSscroll_text_left_text_frame_L0+32
0x4098	0x00000000 ;?ICSscroll_text_left_text_frame_L0+36
0x409C	0x00000000 ;?ICSscroll_text_left_text_frame_L0+40
0x40A0	0x00000000 ;?ICSscroll_text_left_text_frame_L0+44
0x40A4	0x00000000 ;?ICSscroll_text_left_text_frame_L0+48
0x40A8	0x00000000 ;?ICSscroll_text_left_text_frame_L0+52
0x40AC	0x00000000 ;?ICSscroll_text_left_text_frame_L0+56
0x40B0	0x00000000 ;?ICSscroll_text_left_text_frame_L0+60
0x40B4	0x00000000 ;?ICSscroll_text_left_text_frame_L0+64
0x40B8	0x00000000 ;?ICSscroll_text_left_text_frame_L0+68
0x40BC	0x00000000 ;?ICSscroll_text_left_text_frame_L0+72
0x40C0	0x00000000 ;?ICSscroll_text_left_text_frame_L0+76
0x40C4	0x00000000 ;?ICSscroll_text_left_text_frame_L0+80
0x40C8	0x00000000 ;?ICSscroll_text_left_text_frame_L0+84
0x40CC	0x00000000 ;?ICSscroll_text_left_text_frame_L0+88
0x40D0	0x00000000 ;?ICSscroll_text_left_text_frame_L0+92
0x40D4	0x00000000 ;?ICSscroll_text_left_text_frame_L0+96
0x40D8	0x00000000 ;?ICSscroll_text_left_text_frame_L0+100
0x40DC	0x00000000 ;?ICSscroll_text_left_text_frame_L0+104
0x40E0	0x00000000 ;?ICSscroll_text_left_text_frame_L0+108
0x40E4	0x00000000 ;?ICSscroll_text_left_text_frame_L0+112
0x40E8	0x00000000 ;?ICSscroll_text_left_text_frame_L0+116
0x40EC	0x00000000 ;?ICSscroll_text_left_text_frame_L0+120
0x40F0	0x00000000 ;?ICSscroll_text_left_text_frame_L0+124
0x40F4	0x00000000 ;?ICSscroll_text_left_text_frame_L0+128
0x40F8	0x00000000 ;?ICSscroll_text_left_text_frame_L0+132
0x40FC	0x00000000 ;?ICSscroll_text_left_text_frame_L0+136
0x4100	0x00000000 ;?ICSscroll_text_left_text_frame_L0+140
0x4104	0x00000000 ;?ICSscroll_text_left_text_frame_L0+144
0x4108	0x00000000 ;?ICSscroll_text_left_text_frame_L0+148
0x410C	0x00000000 ;?ICSscroll_text_left_text_frame_L0+152
0x4110	0x00000000 ;?ICSscroll_text_left_text_frame_L0+156
0x4114	0x00000000 ;?ICSscroll_text_left_text_frame_L0+160
0x4118	0x00000000 ;?ICSscroll_text_left_text_frame_L0+164
0x411C	0x00000000 ;?ICSscroll_text_left_text_frame_L0+168
0x4120	0x00000000 ;?ICSscroll_text_left_text_frame_L0+172
0x4124	0x00000000 ;?ICSscroll_text_left_text_frame_L0+176
0x4128	0x00000000 ;?ICSscroll_text_left_text_frame_L0+180
0x412C	0x00000000 ;?ICSscroll_text_left_text_frame_L0+184
0x4130	0x00000000 ;?ICSscroll_text_left_text_frame_L0+188
0x4134	0x00000000 ;?ICSscroll_text_left_text_frame_L0+192
0x4138	0x00000000 ;?ICSscroll_text_left_text_frame_L0+196
0x413C	0x00000000 ;?ICSscroll_text_left_text_frame_L0+200
0x4140	0x00000000 ;?ICSscroll_text_left_text_frame_L0+204
0x4144	0x00000000 ;?ICSscroll_text_left_text_frame_L0+208
0x4148	0x00000000 ;?ICSscroll_text_left_text_frame_L0+212
0x414C	0x00000000 ;?ICSscroll_text_left_text_frame_L0+216
0x4150	0x00000000 ;?ICSscroll_text_left_text_frame_L0+220
0x4154	0x00000000 ;?ICSscroll_text_left_text_frame_L0+224
0x4158	0x00000000 ;?ICSscroll_text_left_text_frame_L0+228
0x415C	0x00000000 ;?ICSscroll_text_left_text_frame_L0+232
0x4160	0x00000000 ;?ICSscroll_text_left_text_frame_L0+236
0x4164	0x00000000 ;?ICSscroll_text_left_text_frame_L0+240
0x4168	0x00000000 ;?ICSscroll_text_left_text_frame_L0+244
0x416C	0x00000000 ;?ICSscroll_text_left_text_frame_L0+248
0x4170	0x00000000 ;?ICSscroll_text_left_text_frame_L0+252
; end of ?ICSscroll_text_left_text_frame_L0
;,0 :: _initBlock_7 [156]
; Containing: ?ICS_Dejavu18_Widths [91]
;             ?ICS_firm_buffer [65]
0x4174	0x07050304 ;_initBlock_7+0 : ?ICS_Dejavu18_Widths at 0x4174
0x4178	0x02090C07 ;_initBlock_7+4
0x417C	0x08050404 ;_initBlock_7+8
0x4180	0x04040404 ;_initBlock_7+12
0x4184	0x07070707 ;_initBlock_7+16
0x4188	0x07070707 ;_initBlock_7+20
0x418C	0x04040707 ;_initBlock_7+24
0x4190	0x07080808 ;_initBlock_7+28
0x4194	0x0909090D ;_initBlock_7+32
0x4198	0x0A080909 ;_initBlock_7+36
0x419C	0x09060309 ;_initBlock_7+40
0x41A0	0x0A090B07 ;_initBlock_7+44
0x41A4	0x09090A09 ;_initBlock_7+48
0x41A8	0x0D090907 ;_initBlock_7+52
0x41AC	0x04070907 ;_initBlock_7+56
0x41B0	0x07050404 ;_initBlock_7+60
0x41B4	0x07070704 ;_initBlock_7+64
0x41B8	0x07030707 ;_initBlock_7+68
0x41BC	0x07030307 ;_initBlock_7+72
0x41C0	0x07070B03 ;_initBlock_7+76
0x41C4	0x07040707 ;_initBlock_7+80
0x41C8	0x09050704 ;_initBlock_7+84
0x41CC	0x00070707 ;_initBlock_7+88 : ?ICS_firm_buffer at 0x41CF
0x41D0	0x00000000 ;_initBlock_7+92
0x41D4	0x00000000 ;_initBlock_7+96
0x41D8	0x00000000 ;_initBlock_7+100
0x41DC	0x00000000 ;_initBlock_7+104
0x41E0	0x00000000 ;_initBlock_7+108
0x41E4	0x00000000 ;_initBlock_7+112
0x41E8	0x00000000 ;_initBlock_7+116
0x41EC	0x00000000 ;_initBlock_7+120
0x41F0	0x00000000 ;_initBlock_7+124
0x41F4	0x00000000 ;_initBlock_7+128
0x41F8	0x00000000 ;_initBlock_7+132
0x41FC	0x00000000 ;_initBlock_7+136
0x4200	0x00000000 ;_initBlock_7+140
0x4204	0x00000000 ;_initBlock_7+144
0x4208	0x00000000 ;_initBlock_7+148
0x420C	0x00000000 ;_initBlock_7+152
; end of _initBlock_7
;,0 :: _initBlock_8 [66]
; Containing: ?ICS_currRow [1]
;             ?ICS_buffer [65]
0x4210	0x0000000F ;_initBlock_8+0 : ?ICS_currRow at 0x4210 : ?ICS_buffer at 0x4211
0x4214	0x00000000 ;_initBlock_8+4
0x4218	0x00000000 ;_initBlock_8+8
0x421C	0x00000000 ;_initBlock_8+12
0x4220	0x00000000 ;_initBlock_8+16
0x4224	0x00000000 ;_initBlock_8+20
0x4228	0x00000000 ;_initBlock_8+24
0x422C	0x00000000 ;_initBlock_8+28
0x4230	0x00000000 ;_initBlock_8+32
0x4234	0x00000000 ;_initBlock_8+36
0x4238	0x00000000 ;_initBlock_8+40
0x423C	0x00000000 ;_initBlock_8+44
0x4240	0x00000000 ;_initBlock_8+48
0x4244	0x00000000 ;_initBlock_8+52
0x4248	0x00000000 ;_initBlock_8+56
0x424C	0x00000000 ;_initBlock_8+60
0x4250	0x0000 ;_initBlock_8+64
; end of _initBlock_8
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0090      [92]    __Lib_MemManager_MM_CheckBlocks
0x00EC    [1040]    __Lib_MemManager_MM_GetMemAlign
0x04FC     [532]    __Lib_MemManager_MM_Defragment
0x0710      [60]    _memset
0x074C     [112]    _Malloc
0x07BC     [124]    _MM_Init
0x0838     [144]    _inc_row
0x08C8     [112]    _reset_row
0x0938      [24]    _erase_pixel
0x0950     [496]    _GPIO_Config
0x0B40      [28]    ___CC2DB
0x0B5C     [196]    _shift_lett_onto_right
0x0C20     [260]    _shift_lett_onto_left
0x0D24     [236]    matrixrgb_firmware_get_coord_index
0x0E10     [420]    _refresh
0x0FB4     [148]    _display_shift_right
0x1048     [156]    _display_shift_left
0x10E4      [96]    _write_pixel
0x1144     [164]    _write_letter
0x11E8      [48]    _create_frame_buffer
0x1218      [56]    _init_parameters
0x1250      [20]    _GPIO_Digital_Output
0x1264      [84]    _scroll_off_screen_left
0x12B8     [596]    _scroll_text_left
0x150C      [84]    _scroll_off_screen_right
0x1560      [88]    _scroll_off_screen_down
0x15B8     [656]    _scroll_text_right
0x1848      [88]    _scroll_off_screen_up
0x18A0     [216]    _display_shift_up
0x1978     [228]    _display_shift_down
0x1A5C      [56]    _clear_frame_buffer
0x1A94     [716]    _write_text
0x1D60     [204]    _scroll_image_onto_left
0x1E2C     [208]    _scroll_image_onto_right
0x1EFC     [428]    _Free
0x20A8      [68]    _allocate_image
0x20EC     [108]    _write_pixel_img
0x2158      [20]    _GPIO_Pin_Digital_Input
0x216C     [448]    _GPIO_Pin_Config
0x232C     [236]    _system_setup
0x2418      [60]    _PWR_EnableModule
0x2454      [24]    _display_scroll_off_scrn_up_command
0x246C      [80]    _receive_data
0x24BC      [24]    _display_scroll_off_scrn_down_command
0x24D4      [28]    _setup_command
0x24F0     [248]    _write_text_command
0x25E8     [244]    _spi_bus_init
0x26DC       [8]    _clear_screen_command
0x26E4      [24]    _display_scroll_off_scrn_left_command
0x26FC      [24]    _display_scroll_off_scrn_right_command
0x2714      [76]    _erase_pxl_command
0x2760     [176]    _scroll_text_left_command
0x2810     [176]    _scroll_text_right_command
0x28C0     [416]    _scroll_img_right_command
0x2A60     [116]    _write_pxl_command
0x2AD4     [116]    _write_pxl_img_command
0x2B48       [8]    _display_shift_down_command
0x2B50       [8]    _display_shift_right_command
0x2B58       [8]    _display_shift_left_command
0x2B60     [416]    _scroll_img_left_command
0x2D00       [8]    _display_shift_up_command
0x2D08     [216]    _image_load_command
0x2DE0       [8]    ___GenExcept
0x2DE8      [56]    _TimerInterrupt
0x2E20     [484]    _main
0x3004      [16]    __Lib_System_InitialSetUpCLKPMC
0x4254      [20]    _InitStaticLink
0x4268      [20]    _ZeroStaticLink
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0004      [91]    _Dejavu18_Widths
0x005F      [65]    _firm_buffer
0x00A0       [1]    _currRow
0x00A1      [65]    _buffer
0x00E2       [2]    _p_width
0xEB44       [2]    _p_height
0xEB46       [1]    _pan_width
0xEB47       [1]    _pan_height
0xEB48       [4]    _FB
0xEB4C       [4]    matrixrgb_firmware_img
0xEB50       [4]    _shift_reg
0xEB54     [160]    _MM_FreeMemTable
0xEBF4       [1]    _MM_NrFreeBlocksUsed
0xEBF5       [1]    _MM_PossiblyFragmented
0xEBF6       [1]    _MM_Error_
0xEBF8       [4]    ___System_CLOCK_IN_KHZ
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x3014    [2912]    _Dejavu18_Bitmaps
0x3B74     [256]    ?ICSscroll_text_right_text_frame_L0
0x3C74     [256]    ?ICSwrite_text_command_text_L0
0x3D74     [256]    ?ICSwrite_text_text_frame_L0
0x3E74     [256]    ?ICSscroll_text_right_command_text_L0
0x3F74     [256]    ?ICSscroll_text_left_command_text_L0
0x4074     [256]    ?ICSscroll_text_left_text_frame_L0
0x4174      [91]    ?ICS_Dejavu18_Widths
0x41CF      [65]    ?ICS_firm_buffer
0x4210       [1]    ?ICS_currRow
0x4211      [65]    ?ICS_buffer
