;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 7/1/2016 9:52:09 AM
;----------------------------------------------

;Address Opcode 	ASM
____SysVT:
0x0000	0xFFFC2000  	536936444
0x0004	0x2FF90000  	12281
0x0008	0x2E490000  	11849
0x000C	0x2E490000  	11849
0x0010	0x2E490000  	11849
0x0014	0x2E490000  	11849
0x0018	0x2E490000  	11849
0x001C	0x2E490000  	11849
0x0020	0x2E490000  	11849
0x0024	0x2E490000  	11849
0x0028	0x2E490000  	11849
0x002C	0x2E490000  	11849
0x0030	0x2E490000  	11849
0x0034	0x2E490000  	11849
0x0038	0x2E490000  	11849
0x003C	0x2E490000  	11849
0x0040	0x2E490000  	11849
0x0044	0x2E490000  	11849
0x0048	0x2E490000  	11849
0x004C	0x2E490000  	11849
0x0050	0x2E490000  	11849
0x0054	0x2E490000  	11849
0x0058	0x2E490000  	11849
0x005C	0x2E490000  	11849
0x0060	0x2E490000  	11849
0x0064	0x2E490000  	11849
0x0068	0x2E490000  	11849
0x006C	0x2E490000  	11849
0x0070	0x2E490000  	11849
0x0074	0x2E490000  	11849
0x0078	0x2E490000  	11849
0x007C	0x2E490000  	11849
0x0080	0x2E490000  	11849
0x0084	0x2E490000  	11849
0x0088	0x2E490000  	11849
0x008C	0x2E490000  	11849
0x0090	0x2E490000  	11849
0x0094	0x2E490000  	11849
0x0098	0x2E490000  	11849
0x009C	0x2E490000  	11849
0x00A0	0x2E490000  	11849
0x00A4	0x2E490000  	11849
0x00A8	0x2E490000  	11849
0x00AC	0x2E490000  	11849
0x00B0	0x2E510000  	11857
0x00B4	0x2E490000  	11849
0x00B8	0x2E490000  	11849
0x00BC	0x2E490000  	11849
0x00C0	0x2E490000  	11849
0x00C4	0x2E490000  	11849
0x00C8	0x2E490000  	11849
0x00CC	0x2E490000  	11849
0x00D0	0x2E490000  	11849
0x00D4	0x2E490000  	11849
0x00D8	0x2E490000  	11849
0x00DC	0x2E490000  	11849
0x00E0	0x2E490000  	11849
0x00E4	0x2E490000  	11849
0x00E8	0x2E490000  	11849
0x00EC	0x2E490000  	11849
0x00F0	0x2E490000  	11849
0x00F4	0x2E490000  	11849
0x00F8	0x2E490000  	11849
0x00FC	0x2E490000  	11849
0x0100	0x2E490000  	11849
0x0104	0x2E490000  	11849
0x0108	0x2E490000  	11849
0x010C	0x2E490000  	11849
0x0110	0x2E490000  	11849
0x0114	0x2E490000  	11849
0x0118	0x2E490000  	11849
0x011C	0x2E490000  	11849
0x0120	0x2E490000  	11849
0x0124	0x2E490000  	11849
0x0128	0x2E490000  	11849
0x012C	0x2E490000  	11849
0x0130	0x2E490000  	11849
0x0134	0x2E490000  	11849
0x0138	0x2E490000  	11849
0x013C	0x2E490000  	11849
0x0140	0x2E490000  	11849
0x0144	0x2E490000  	11849
0x0148	0x2E490000  	11849
0x014C	0x2E490000  	11849
; end of ____SysVT
_main:
;MatrixRGB_Demo_Project.c, 109 :: 		void main()
0x2FF8	0xB081    SUB	SP, SP, #4
0x2FFA	0xF7FFFF59  BL	11952
0x2FFE	0xF000FD83  BL	15112
0x3002	0xF7FFFF4B  BL	11932
0x3006	0xF000FD31  BL	14956
;MatrixRGB_Demo_Project.c, 112 :: 		uint8_t bonus_level = 0;        /**<    Flag used for Bonus Level after winning on Hard */
0x300A	0x2000    MOVS	R0, #0
0x300C	0xF88D0003  STRB	R0, [SP, #3]
;MatrixRGB_Demo_Project.c, 116 :: 		matrixrgb_set_color( &my_color, 1, 0, 0 );      /**<    Color for text */
0x3010	0xA800    ADD	R0, SP, #0
0x3012	0x2300    MOVS	R3, #0
0x3014	0x2200    MOVS	R2, #0
0x3016	0x2101    MOVS	R1, #1
0x3018	0xF7FFFBA6  BL	_matrixrgb_set_color+0
;MatrixRGB_Demo_Project.c, 117 :: 		system_setup( 100, 2, 2);                       /**<    Sets up ADC, SPI, MatrixRGB, Timer */
0x301C	0x2202    MOVS	R2, #2
0x301E	0x2102    MOVS	R1, #2
0x3020	0x2064    MOVS	R0, #100
0x3022	0xF7FFFAF9  BL	_system_setup+0
;MatrixRGB_Demo_Project.c, 119 :: 		ball_speed = g_ball_speed;                      /**<    Setup initial ball speed */
0x3026	0x484C    LDR	R0, [PC, #304]
0x3028	0x8801    LDRH	R1, [R0, #0]
0x302A	0x484C    LDR	R0, [PC, #304]
0x302C	0x8001    STRH	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 120 :: 		wait_for_choice();                              /**<    Wait for choice from Main Menu */
0x302E	0xF7FFFB5D  BL	_wait_for_choice+0
;MatrixRGB_Demo_Project.c, 121 :: 		matrixrgb_clear_screen();                       /**<    Setting up game functions */
0x3032	0xF7FFFB61  BL	_matrixrgb_clear_screen+0
;MatrixRGB_Demo_Project.c, 122 :: 		setup_gameboard( void );
0x3036	0xF7FFFBF1  BL	_setup_gameboard+0
;MatrixRGB_Demo_Project.c, 123 :: 		setup_player( void );
0x303A	0xF7FFFE89  BL	_setup_player+0
;MatrixRGB_Demo_Project.c, 124 :: 		setup_ball( void );
0x303E	0xF7FFFEBB  BL	_setup_ball+0
;MatrixRGB_Demo_Project.c, 127 :: 		while ( 1 )  //Super Loop
L_main0:
;MatrixRGB_Demo_Project.c, 129 :: 		matrixrgb_refresh();
0x3042	0xF7FFFB97  BL	_matrixrgb_refresh+0
;MatrixRGB_Demo_Project.c, 133 :: 		adc_pos = ADC1_Get_Sample(3);                         /**<  Get ADC value from corresponding channel */
0x3046	0x2003    MOVS	R0, #3
0x3048	0xF7FFFBA4  BL	_ADC1_Get_Sample+0
0x304C	0x4944    LDR	R1, [PC, #272]
0x304E	0x6008    STR	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 135 :: 		if (Button(&GPIOA_IDR, 0, 1, 1))                      /**<  A0 Button press, Pause Game */
0x3050	0x2301    MOVS	R3, #1
0x3052	0x2201    MOVS	R2, #1
0x3054	0x2100    MOVS	R1, #0
0x3056	0x4843    LDR	R0, [PC, #268]
0x3058	0xF7FFFBAA  BL	_Button+0
0x305C	0xB320    CBZ	R0, L_main2
;MatrixRGB_Demo_Project.c, 137 :: 		while ( !Button(&GPIOA_IDR, 0, 1, 0 ) )           /**<  Wait for depress of A0 */
L_main3:
0x305E	0x2300    MOVS	R3, #0
0x3060	0x2201    MOVS	R2, #1
0x3062	0x2100    MOVS	R1, #0
0x3064	0x483F    LDR	R0, [PC, #252]
0x3066	0xF7FFFBA3  BL	_Button+0
0x306A	0xB948    CBNZ	R0, L_main4
;MatrixRGB_Demo_Project.c, 140 :: 		adc_pos = ADC1_Get_Sample(3);                 /**<  If CHEATING defined, allow moving of player */
0x306C	0x2003    MOVS	R0, #3
0x306E	0xF7FFFB91  BL	_ADC1_Get_Sample+0
0x3072	0x493B    LDR	R1, [PC, #236]
0x3074	0x6008    STR	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 141 :: 		move_player();
0x3076	0xF7FFFA71  BL	_move_player+0
;MatrixRGB_Demo_Project.c, 143 :: 		matrixrgb_refresh();                          /**<  Refresh while we wait for depress   */
0x307A	0xF7FFFB7B  BL	_matrixrgb_refresh+0
;MatrixRGB_Demo_Project.c, 144 :: 		}
0x307E	0xE7EE    B	L_main3
L_main4:
;MatrixRGB_Demo_Project.c, 145 :: 		while ( !Button(&GPIOA_IDR, 0, 1, 1) )            /**<  Wait Till pressed again to continue playing  */
L_main5:
0x3080	0x2301    MOVS	R3, #1
0x3082	0x2201    MOVS	R2, #1
0x3084	0x2100    MOVS	R1, #0
0x3086	0x4837    LDR	R0, [PC, #220]
0x3088	0xF7FFFB92  BL	_Button+0
0x308C	0xB910    CBNZ	R0, L_main6
;MatrixRGB_Demo_Project.c, 146 :: 		matrixrgb_refresh();
0x308E	0xF7FFFB71  BL	_matrixrgb_refresh+0
0x3092	0xE7F5    B	L_main5
L_main6:
;MatrixRGB_Demo_Project.c, 148 :: 		while ( !Button(&GPIOA_IDR, 0, 1, 0 ) )           /**<  Wait for depress  */
L_main7:
0x3094	0x2300    MOVS	R3, #0
0x3096	0x2201    MOVS	R2, #1
0x3098	0x2100    MOVS	R1, #0
0x309A	0x4832    LDR	R0, [PC, #200]
0x309C	0xF7FFFB88  BL	_Button+0
0x30A0	0xB910    CBNZ	R0, L_main8
;MatrixRGB_Demo_Project.c, 149 :: 		matrixrgb_refresh();
0x30A2	0xF7FFFB67  BL	_matrixrgb_refresh+0
0x30A6	0xE7F5    B	L_main7
L_main8:
;MatrixRGB_Demo_Project.c, 150 :: 		}
L_main2:
;MatrixRGB_Demo_Project.c, 154 :: 		if ( move_flag )                            /**< Wait for timer flag ( 200us ) to allow movement of player */
0x30A8	0x482F    LDR	R0, [PC, #188]
0x30AA	0x7800    LDRB	R0, [R0, #0]
0x30AC	0xB120    CBZ	R0, L_main9
;MatrixRGB_Demo_Project.c, 156 :: 		move_player();
0x30AE	0xF7FFFA55  BL	_move_player+0
;MatrixRGB_Demo_Project.c, 157 :: 		move_flag = 0;
0x30B2	0x2100    MOVS	R1, #0
0x30B4	0x482C    LDR	R0, [PC, #176]
0x30B6	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 158 :: 		}
L_main9:
;MatrixRGB_Demo_Project.c, 159 :: 		if ( ball_count_flag >= ball_speed )        /**< Wait for the timer to increment "ball_speed" times before moving the ball again */
0x30B8	0x4828    LDR	R0, [PC, #160]
0x30BA	0x8801    LDRH	R1, [R0, #0]
0x30BC	0x482B    LDR	R0, [PC, #172]
0x30BE	0x8800    LDRH	R0, [R0, #0]
0x30C0	0x4288    CMP	R0, R1
0x30C2	0xD304    BCC	L_main10
;MatrixRGB_Demo_Project.c, 161 :: 		move_ball();
0x30C4	0xF7FEFEB0  BL	_move_ball+0
;MatrixRGB_Demo_Project.c, 162 :: 		ball_count_flag = 0;
0x30C8	0x2100    MOVS	R1, #0
0x30CA	0x4828    LDR	R0, [PC, #160]
0x30CC	0x8001    STRH	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 163 :: 		}
L_main10:
;MatrixRGB_Demo_Project.c, 165 :: 		if ( safe == false || playing == false )    /**< If the player has failed, or won the game ( done playing ) */
0x30CE	0x4828    LDR	R0, [PC, #160]
0x30D0	0x7800    LDRB	R0, [R0, #0]
0x30D2	0xB118    CBZ	R0, L__main513
0x30D4	0x4827    LDR	R0, [PC, #156]
0x30D6	0x7800    LDRB	R0, [R0, #0]
0x30D8	0xB100    CBZ	R0, L__main512
0x30DA	0xE038    B	L_main13
L__main513:
L__main512:
;MatrixRGB_Demo_Project.c, 168 :: 		time_s = 0;
0x30DC	0x2100    MOVS	R1, #0
0x30DE	0x4826    LDR	R0, [PC, #152]
0x30E0	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 177 :: 		if ( playing == false && g_ball_speed == 200 )   /**< If you beat Hard Mode */
0x30E2	0x4824    LDR	R0, [PC, #144]
0x30E4	0x7800    LDRB	R0, [R0, #0]
0x30E6	0xB940    CBNZ	R0, L__main515
0x30E8	0x481B    LDR	R0, [PC, #108]
0x30EA	0x8800    LDRH	R0, [R0, #0]
0x30EC	0x28C8    CMP	R0, #200
0x30EE	0xD104    BNE	L__main514
L__main510:
;MatrixRGB_Demo_Project.c, 179 :: 		bonus_level = 1;
0x30F0	0x2001    MOVS	R0, #1
0x30F2	0xF88D0003  STRB	R0, [SP, #3]
;MatrixRGB_Demo_Project.c, 180 :: 		display_bonuslevel();                       /**< Display Bonus Level Screen */
0x30F6	0xF7FEFE31  BL	_display_bonuslevel+0
;MatrixRGB_Demo_Project.c, 177 :: 		if ( playing == false && g_ball_speed == 200 )   /**< If you beat Hard Mode */
L__main515:
L__main514:
;MatrixRGB_Demo_Project.c, 183 :: 		matrixrgb_clear_screen();                       /**< Win or lose, Clear Screen */
0x30FA	0xF7FFFAFD  BL	_matrixrgb_clear_screen+0
;MatrixRGB_Demo_Project.c, 188 :: 		matrixrgb_clear_screen();                       /**< Clear Screen ! */
0x30FE	0xF7FFFAFB  BL	_matrixrgb_clear_screen+0
;MatrixRGB_Demo_Project.c, 189 :: 		if ( !bonus_level )                             /**< Check if HARD level was beat, if so Bonus Level time */
0x3102	0xF89D0003  LDRB	R0, [SP, #3]
0x3106	0xB910    CBNZ	R0, L_main17
;MatrixRGB_Demo_Project.c, 190 :: 		setup_gameboard( void );
0x3108	0xF7FFFB88  BL	_setup_gameboard+0
0x310C	0xE001    B	L_main18
L_main17:
;MatrixRGB_Demo_Project.c, 192 :: 		setup_bonus_level();
0x310E	0xF7FEFEBB  BL	_setup_bonus_level+0
L_main18:
;MatrixRGB_Demo_Project.c, 193 :: 		bonus_level = 0;
0x3112	0x2000    MOVS	R0, #0
0x3114	0xF88D0003  STRB	R0, [SP, #3]
;MatrixRGB_Demo_Project.c, 194 :: 		setup_player( void );                           /**< Setup Player at Default location to start */
0x3118	0xF7FFFE1A  BL	_setup_player+0
;MatrixRGB_Demo_Project.c, 195 :: 		setup_ball( void );                             /**< Setup Ball at random location in random direction */
0x311C	0xF7FFFE4C  BL	_setup_ball+0
;MatrixRGB_Demo_Project.c, 196 :: 		safe = true;                                    /**< Set flags for fail and win back to defaults */
0x3120	0x2101    MOVS	R1, #1
0x3122	0x4813    LDR	R0, [PC, #76]
0x3124	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 197 :: 		playing = true;                                 /**< Ball direction set to up initially */
0x3126	0x2101    MOVS	R1, #1
0x3128	0x4812    LDR	R0, [PC, #72]
0x312A	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 198 :: 		ball_dir_vert = UP;
0x312C	0x2100    MOVS	R1, #0
0x312E	0x4813    LDR	R0, [PC, #76]
0x3130	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 199 :: 		Delay_ms(50);
0x3132	0xF24277BF  MOVW	R7, #10175
0x3136	0xF2C00709  MOVT	R7, #9
L_main19:
0x313A	0x1E7F    SUBS	R7, R7, #1
0x313C	0xD1FD    BNE	L_main19
0x313E	0xBF00    NOP
0x3140	0xBF00    NOP
0x3142	0xBF00    NOP
0x3144	0xBF00    NOP
0x3146	0xBF00    NOP
;MatrixRGB_Demo_Project.c, 200 :: 		time = 0;
0x3148	0x2100    MOVS	R1, #0
0x314A	0x480D    LDR	R0, [PC, #52]
0x314C	0x6001    STR	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 201 :: 		}
L_main13:
;MatrixRGB_Demo_Project.c, 202 :: 		matrixrgb_refresh();                               /**< Refresh every loop */
0x314E	0xF7FFFB11  BL	_matrixrgb_refresh+0
;MatrixRGB_Demo_Project.c, 203 :: 		} /**< Play Game Loop End *****************************/
0x3152	0xE776    B	L_main0
;MatrixRGB_Demo_Project.c, 204 :: 		}
L_end_main:
L__main_end_loop:
0x3154	0xE7FE    B	L__main_end_loop
0x3156	0xBF00    NOP
0x3158	0x00002000  	_g_ball_speed+0
0x315C	0x087C2000  	_ball_speed+0
0x3160	0x09A42000  	_adc_pos+0
0x3164	0x08084001  	GPIOA_IDR+0
0x3168	0x080E2000  	_move_flag+0
0x316C	0x08102000  	_ball_count_flag+0
0x3170	0x080F2000  	_safe+0
0x3174	0x00022000  	_playing+0
0x3178	0x08122000  	_time_s+0
0x317C	0x00032000  	_ball_dir_vert+0
0x3180	0x08142000  	_time+0
; end of _main
___CC2DW:
;__Lib_System_105_107.c, 27 :: 		
0x2718	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 29 :: 		
L_loopDW:
;__Lib_System_105_107.c, 30 :: 		
0x271A	0xF81C9B01  LDRB	R9, [R12], #1
;__Lib_System_105_107.c, 31 :: 		
0x271E	0xF80B9B01  STRB	R9, [R11], #1
;__Lib_System_105_107.c, 32 :: 		
0x2722	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_105_107.c, 33 :: 		
0x2726	0xD1F8    BNE	L_loopDW
;__Lib_System_105_107.c, 35 :: 		
L_end___CC2DW:
0x2728	0xB001    ADD	SP, SP, #4
0x272A	0x4770    BX	LR
; end of ___CC2DW
___FillZeros:
;__Lib_System_105_107.c, 69 :: 		
0x272C	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 71 :: 		
0x272E	0xF04F0900  MOV	R9, #0
;__Lib_System_105_107.c, 72 :: 		
0x2732	0xF04F0C00  MOV	R12, #0
;__Lib_System_105_107.c, 73 :: 		
0x2736	0xEBBD0F0A  CMP	SP, R10, LSL #0
;__Lib_System_105_107.c, 74 :: 		
0x273A	0xDC04    BGT	L_loopFZs
;__Lib_System_105_107.c, 75 :: 		
0x273C	0xEBBD0F0B  CMP	SP, R11, LSL #0
;__Lib_System_105_107.c, 76 :: 		
0x2740	0xDB01    BLT	L_loopFZs
;__Lib_System_105_107.c, 77 :: 		
0x2742	0x46D4    MOV	R12, R10
;__Lib_System_105_107.c, 78 :: 		
0x2744	0x46EA    MOV	R10, SP
;__Lib_System_105_107.c, 79 :: 		
L_loopFZs:
;__Lib_System_105_107.c, 80 :: 		
0x2746	0xF84B9B04  STR	R9, [R11], #4
;__Lib_System_105_107.c, 81 :: 		
0x274A	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_105_107.c, 82 :: 		
0x274E	0xD1FA    BNE	L_loopFZs
;__Lib_System_105_107.c, 83 :: 		
0x2750	0xEBBC0F0A  CMP	R12, R10, LSL #0
;__Lib_System_105_107.c, 84 :: 		
0x2754	0xDD05    BLE	L_norep
;__Lib_System_105_107.c, 85 :: 		
0x2756	0x46E2    MOV	R10, R12
;__Lib_System_105_107.c, 86 :: 		
0x2758	0xF8D9B000  LDR	R11, [R9, #0]
;__Lib_System_105_107.c, 87 :: 		
0x275C	0xF10B0B04  ADD	R11, R11, #4
;__Lib_System_105_107.c, 88 :: 		
0x2760	0xE7F1    B	L_loopFZs
;__Lib_System_105_107.c, 89 :: 		
L_norep:
;__Lib_System_105_107.c, 91 :: 		
L_end___FillZeros:
0x2762	0xB001    ADD	SP, SP, #4
0x2764	0x4770    BX	LR
; end of ___FillZeros
_matrixrgb_set_color:
;matrixrgb_hw.c, 334 :: 		void matrixrgb_set_color( color_t *color, uint8_t red_color, uint8_t green_color, uint8_t blue_color )
; blue_color start address is: 12 (R3)
; green_color start address is: 8 (R2)
; red_color start address is: 4 (R1)
; color start address is: 0 (R0)
; blue_color end address is: 12 (R3)
; green_color end address is: 8 (R2)
; red_color end address is: 4 (R1)
; color end address is: 0 (R0)
; color start address is: 0 (R0)
; red_color start address is: 4 (R1)
; green_color start address is: 8 (R2)
; blue_color start address is: 12 (R3)
;matrixrgb_hw.c, 337 :: 		color->red   = red_color;
0x2768	0x7001    STRB	R1, [R0, #0]
; red_color end address is: 4 (R1)
;matrixrgb_hw.c, 338 :: 		color->green = green_color;
0x276A	0x1C44    ADDS	R4, R0, #1
0x276C	0x7022    STRB	R2, [R4, #0]
; green_color end address is: 8 (R2)
;matrixrgb_hw.c, 339 :: 		color->blue  = blue_color;
0x276E	0x1C84    ADDS	R4, R0, #2
; color end address is: 0 (R0)
0x2770	0x7023    STRB	R3, [R4, #0]
; blue_color end address is: 12 (R3)
;matrixrgb_hw.c, 341 :: 		}
L_end_matrixrgb_set_color:
0x2772	0x4770    BX	LR
; end of _matrixrgb_set_color
_system_setup:
;MatrixRGB_Demo_Project.c, 834 :: 		void system_setup( char brightness, uint8_t width, uint8_t height )
; width start address is: 4 (R1)
; brightness start address is: 0 (R0)
0x2618	0xB082    SUB	SP, SP, #8
0x261A	0xF8CDE000  STR	LR, [SP, #0]
0x261E	0xFA5FFB80  UXTB	R11, R0
0x2622	0xFA5FFC81  UXTB	R12, R1
0x2626	0xF88D2004  STRB	R2, [SP, #4]
; width end address is: 4 (R1)
; brightness end address is: 0 (R0)
; brightness start address is: 44 (R11)
; width start address is: 48 (R12)
;MatrixRGB_Demo_Project.c, 837 :: 		GPIO_Digital_Output( &GPIOD_BASE, _GPIO_PINMASK_13); /**< Set Chip Select pin as output */
0x262A	0xF2420100  MOVW	R1, #8192
0x262E	0x482A    LDR	R0, [PC, #168]
0x2630	0xF7FFFAA2  BL	_GPIO_Digital_Output+0
;MatrixRGB_Demo_Project.c, 838 :: 		GPIO_Digital_Output( &GPIOC_BASE, _GPIO_PINMASK_2 ); /**< Set Reset pin to output */
0x2634	0xF2400104  MOVW	R1, #4
0x2638	0x4828    LDR	R0, [PC, #160]
0x263A	0xF7FFFA9D  BL	_GPIO_Digital_Output+0
;MatrixRGB_Demo_Project.c, 839 :: 		GPIO_Digital_Input( &GPIOD_BASE, _GPIO_PINMASK_10);  /**< Set Ready to input */
0x263E	0xF2404100  MOVW	R1, #1024
0x2642	0x4825    LDR	R0, [PC, #148]
0x2644	0xF7FFF9AA  BL	_GPIO_Digital_Input+0
;MatrixRGB_Demo_Project.c, 840 :: 		GPIO_Digital_Input(&GPIOA_IDR, _GPIO_PINMASK_0);     /**< Set PA0 as digital input ( Menu Button ) */
0x2648	0xF2400101  MOVW	R1, #1
0x264C	0x4824    LDR	R0, [PC, #144]
0x264E	0xF7FFF9A5  BL	_GPIO_Digital_Input+0
;MatrixRGB_Demo_Project.c, 845 :: 		&_GPIO_MODULE_SPI3_PC10_11_12);
0x2652	0x4A24    LDR	R2, [PC, #144]
;MatrixRGB_Demo_Project.c, 844 :: 		_SPI_MSB_FIRST | _SPI_SS_DISABLE | _SPI_SSM_DISABLE | _SPI_SSI_1,
0x2654	0xF2401104  MOVW	R1, #260
;MatrixRGB_Demo_Project.c, 842 :: 		SPI3_Init_Advanced(_SPI_FPCLK_DIV2, _SPI_MASTER | _SPI_8_BIT |              /**< Initialize SPI Communication */
0x2658	0x2000    MOVS	R0, #0
;MatrixRGB_Demo_Project.c, 845 :: 		&_GPIO_MODULE_SPI3_PC10_11_12);
0x265A	0xF7FFF975  BL	_SPI3_Init_Advanced+0
;MatrixRGB_Demo_Project.c, 847 :: 		ADC_Set_Input_Channel(_ADC_CHANNEL_3);               /**< Choose ADC channel */
0x265E	0xF2400008  MOVW	R0, #8
0x2662	0xF7FFF9A7  BL	_ADC_Set_Input_Channel+0
;MatrixRGB_Demo_Project.c, 848 :: 		ADC1_Init();                                         /**< Initialize ADC */
0x2666	0xF7FFFA35  BL	_ADC1_Init+0
;MatrixRGB_Demo_Project.c, 849 :: 		Delay_ms(100);
0x266A	0xF644777F  MOVW	R7, #20351
0x266E	0xF2C00712  MOVT	R7, #18
L_system_setup281:
0x2672	0x1E7F    SUBS	R7, R7, #1
0x2674	0xD1FD    BNE	L_system_setup281
0x2676	0xBF00    NOP
0x2678	0xBF00    NOP
0x267A	0xBF00    NOP
0x267C	0xBF00    NOP
0x267E	0xBF00    NOP
;MatrixRGB_Demo_Project.c, 851 :: 		MATRIXRGB_RST = 0;                                   /**< Reset Slave, ( Toggle it ) */
0x2680	0x2300    MOVS	R3, #0
0x2682	0xB25B    SXTB	R3, R3
0x2684	0x4C18    LDR	R4, [PC, #96]
0x2686	0x6023    STR	R3, [R4, #0]
;MatrixRGB_Demo_Project.c, 852 :: 		MATRIXRGB_RST = 1;
0x2688	0x2301    MOVS	R3, #1
0x268A	0xB25B    SXTB	R3, R3
0x268C	0x6023    STR	R3, [R4, #0]
;MatrixRGB_Demo_Project.c, 853 :: 		Delay_ms(200);
0x268E	0xF64967FF  MOVW	R7, #40703
0x2692	0xF2C00724  MOVT	R7, #36
0x2696	0xBF00    NOP
0x2698	0xBF00    NOP
L_system_setup283:
0x269A	0x1E7F    SUBS	R7, R7, #1
0x269C	0xD1FD    BNE	L_system_setup283
0x269E	0xBF00    NOP
0x26A0	0xBF00    NOP
0x26A2	0xBF00    NOP
;MatrixRGB_Demo_Project.c, 855 :: 		matrixrgb_init( brightness, width, height );         /**< Initialize MatrixRGB Click, with brightness of 100, and width of 1 panel by height of 2 panels */
0x26A4	0xF89D2004  LDRB	R2, [SP, #4]
0x26A8	0xFA5FF18C  UXTB	R1, R12
; width end address is: 48 (R12)
0x26AC	0xFA5FF08B  UXTB	R0, R11
; brightness end address is: 44 (R11)
0x26B0	0xF7FFFA2A  BL	_matrixrgb_init+0
;MatrixRGB_Demo_Project.c, 856 :: 		Delay_ms(200);
0x26B4	0xF64967FF  MOVW	R7, #40703
0x26B8	0xF2C00724  MOVT	R7, #36
0x26BC	0xBF00    NOP
0x26BE	0xBF00    NOP
L_system_setup285:
0x26C0	0x1E7F    SUBS	R7, R7, #1
0x26C2	0xD1FD    BNE	L_system_setup285
0x26C4	0xBF00    NOP
0x26C6	0xBF00    NOP
0x26C8	0xBF00    NOP
;MatrixRGB_Demo_Project.c, 858 :: 		InitTimer2();                                        /**< Initialize Timer 2 at 10 us */
0x26CA	0xF7FFFA63  BL	_InitTimer2+0
;MatrixRGB_Demo_Project.c, 860 :: 		}
L_end_system_setup:
0x26CE	0xF8DDE000  LDR	LR, [SP, #0]
0x26D2	0xB002    ADD	SP, SP, #8
0x26D4	0x4770    BX	LR
0x26D6	0xBF00    NOP
0x26D8	0x14004001  	GPIOD_BASE+0
0x26DC	0x10004001  	GPIOC_BASE+0
0x26E0	0x08084001  	GPIOA_IDR+0
0x26E4	0x39980000  	__GPIO_MODULE_SPI3_PC10_11_12+0
0x26E8	0x01884222  	GPIOC_ODR+0
; end of _system_setup
_GPIO_Digital_Output:
;__Lib_GPIO_32F10x.c, 365 :: 		
; pin_mask start address is: 4 (R1)
; port start address is: 0 (R0)
0x1B78	0xB081    SUB	SP, SP, #4
0x1B7A	0xF8CDE000  STR	LR, [SP, #0]
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; pin_mask start address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 366 :: 		
0x1B7E	0x4A04    LDR	R2, [PC, #16]
0x1B80	0xB289    UXTH	R1, R1
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
0x1B82	0xF7FEFDFF  BL	_GPIO_Config+0
;__Lib_GPIO_32F10x.c, 367 :: 		
L_end_GPIO_Digital_Output:
0x1B86	0xF8DDE000  LDR	LR, [SP, #0]
0x1B8A	0xB001    ADD	SP, SP, #4
0x1B8C	0x4770    BX	LR
0x1B8E	0xBF00    NOP
0x1B90	0x00140008  	#524308
; end of _GPIO_Digital_Output
_GPIO_Config:
;__Lib_GPIO_32F10x.c, 124 :: 		
; config start address is: 8 (R2)
; pin_mask start address is: 4 (R1)
; port start address is: 0 (R0)
0x0784	0xB081    SUB	SP, SP, #4
0x0786	0xF8CDE000  STR	LR, [SP, #0]
0x078A	0xB28C    UXTH	R4, R1
0x078C	0x4615    MOV	R5, R2
; config end address is: 8 (R2)
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; pin_mask start address is: 16 (R4)
; config start address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 129 :: 		
0x078E	0x4B77    LDR	R3, [PC, #476]
0x0790	0xEA000303  AND	R3, R0, R3, LSL #0
; port end address is: 0 (R0)
; port start address is: 24 (R6)
0x0794	0x461E    MOV	R6, R3
;__Lib_GPIO_32F10x.c, 131 :: 		
0x0796	0x4618    MOV	R0, R3
0x0798	0xF7FFFCEC  BL	_GPIO_Clk_Enable+0
;__Lib_GPIO_32F10x.c, 134 :: 		
0x079C	0xF1B40FFF  CMP	R4, #255
0x07A0	0xD10C    BNE	L_GPIO_Config18
;__Lib_GPIO_32F10x.c, 135 :: 		
0x07A2	0x4B73    LDR	R3, [PC, #460]
0x07A4	0x429D    CMP	R5, R3
0x07A6	0xD103    BNE	L_GPIO_Config19
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 136 :: 		
0x07A8	0xF04F3333  MOV	R3, #858993459
0x07AC	0x6033    STR	R3, [R6, #0]
; port end address is: 24 (R6)
;__Lib_GPIO_32F10x.c, 137 :: 		
0x07AE	0xE0D9    B	L_end_GPIO_Config
;__Lib_GPIO_32F10x.c, 138 :: 		
L_GPIO_Config19:
;__Lib_GPIO_32F10x.c, 139 :: 		
; port start address is: 24 (R6)
; config start address is: 20 (R5)
; pin_mask start address is: 16 (R4)
0x07B0	0x2D42    CMP	R5, #66
0x07B2	0xD103    BNE	L_GPIO_Config20
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 140 :: 		
0x07B4	0xF04F3344  MOV	R3, #1145324612
0x07B8	0x6033    STR	R3, [R6, #0]
; port end address is: 24 (R6)
;__Lib_GPIO_32F10x.c, 141 :: 		
0x07BA	0xE0D3    B	L_end_GPIO_Config
;__Lib_GPIO_32F10x.c, 142 :: 		
L_GPIO_Config20:
;__Lib_GPIO_32F10x.c, 143 :: 		
; port start address is: 24 (R6)
; config start address is: 20 (R5)
; pin_mask start address is: 16 (R4)
L_GPIO_Config18:
;__Lib_GPIO_32F10x.c, 145 :: 		
0x07BC	0xF64F73FF  MOVW	R3, #65535
0x07C0	0x429C    CMP	R4, R3
0x07C2	0xD114    BNE	L_GPIO_Config21
;__Lib_GPIO_32F10x.c, 146 :: 		
0x07C4	0x4B6A    LDR	R3, [PC, #424]
0x07C6	0x429D    CMP	R5, R3
0x07C8	0xD107    BNE	L_GPIO_Config22
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 147 :: 		
0x07CA	0xF04F3333  MOV	R3, #858993459
0x07CE	0x6033    STR	R3, [R6, #0]
;__Lib_GPIO_32F10x.c, 148 :: 		
0x07D0	0x1D34    ADDS	R4, R6, #4
; port end address is: 24 (R6)
0x07D2	0xF04F3333  MOV	R3, #858993459
0x07D6	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F10x.c, 149 :: 		
0x07D8	0xE0C4    B	L_end_GPIO_Config
;__Lib_GPIO_32F10x.c, 150 :: 		
L_GPIO_Config22:
;__Lib_GPIO_32F10x.c, 151 :: 		
; port start address is: 24 (R6)
; config start address is: 20 (R5)
; pin_mask start address is: 16 (R4)
0x07DA	0x2D42    CMP	R5, #66
0x07DC	0xD107    BNE	L_GPIO_Config23
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 152 :: 		
0x07DE	0xF04F3344  MOV	R3, #1145324612
0x07E2	0x6033    STR	R3, [R6, #0]
;__Lib_GPIO_32F10x.c, 153 :: 		
0x07E4	0x1D34    ADDS	R4, R6, #4
; port end address is: 24 (R6)
0x07E6	0xF04F3344  MOV	R3, #1145324612
0x07EA	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F10x.c, 154 :: 		
0x07EC	0xE0BA    B	L_end_GPIO_Config
;__Lib_GPIO_32F10x.c, 155 :: 		
L_GPIO_Config23:
;__Lib_GPIO_32F10x.c, 156 :: 		
; port start address is: 24 (R6)
; config start address is: 20 (R5)
; pin_mask start address is: 16 (R4)
L_GPIO_Config21:
;__Lib_GPIO_32F10x.c, 158 :: 		
; currentmode start address is: 4 (R1)
0x07EE	0x2100    MOVS	R1, #0
;__Lib_GPIO_32F10x.c, 159 :: 		
; speed start address is: 0 (R0)
0x07F0	0x2000    MOVS	R0, #0
;__Lib_GPIO_32F10x.c, 161 :: 		
0x07F2	0xF0050301  AND	R3, R5, #1
0x07F6	0xB10B    CBZ	R3, L_GPIO_Config24
;__Lib_GPIO_32F10x.c, 162 :: 		
0x07F8	0x2100    MOVS	R1, #0
0x07FA	0xE01D    B	L_GPIO_Config25
L_GPIO_Config24:
;__Lib_GPIO_32F10x.c, 163 :: 		
0x07FC	0xF0050302  AND	R3, R5, #2
0x0800	0xB133    CBZ	R3, L_GPIO_Config26
; currentmode end address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 164 :: 		
0x0802	0xF40573C0  AND	R3, R5, #384
0x0806	0xB10B    CBZ	R3, L_GPIO_Config27
;__Lib_GPIO_32F10x.c, 165 :: 		
; currentmode start address is: 4 (R1)
0x0808	0x2108    MOVS	R1, #8
; currentmode end address is: 4 (R1)
0x080A	0xE000    B	L_GPIO_Config28
L_GPIO_Config27:
;__Lib_GPIO_32F10x.c, 167 :: 		
; currentmode start address is: 4 (R1)
0x080C	0x2104    MOVS	R1, #4
; currentmode end address is: 4 (R1)
L_GPIO_Config28:
;__Lib_GPIO_32F10x.c, 168 :: 		
; currentmode start address is: 4 (R1)
0x080E	0xE013    B	L_GPIO_Config29
L_GPIO_Config26:
;__Lib_GPIO_32F10x.c, 169 :: 		
0x0810	0xF0050304  AND	R3, R5, #4
0x0814	0xB133    CBZ	R3, L_GPIO_Config30
; currentmode end address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 170 :: 		
0x0816	0xF0050320  AND	R3, R5, #32
0x081A	0xB10B    CBZ	R3, L_GPIO_Config31
;__Lib_GPIO_32F10x.c, 171 :: 		
; currentmode start address is: 4 (R1)
0x081C	0x2104    MOVS	R1, #4
; currentmode end address is: 4 (R1)
0x081E	0xE000    B	L_GPIO_Config32
L_GPIO_Config31:
;__Lib_GPIO_32F10x.c, 173 :: 		
; currentmode start address is: 4 (R1)
0x0820	0x2100    MOVS	R1, #0
; currentmode end address is: 4 (R1)
L_GPIO_Config32:
;__Lib_GPIO_32F10x.c, 174 :: 		
; currentmode start address is: 4 (R1)
0x0822	0xE009    B	L_GPIO_Config33
L_GPIO_Config30:
;__Lib_GPIO_32F10x.c, 175 :: 		
0x0824	0xF0050308  AND	R3, R5, #8
0x0828	0xB133    CBZ	R3, L__GPIO_Config100
; currentmode end address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 176 :: 		
0x082A	0xF0050320  AND	R3, R5, #32
0x082E	0xB10B    CBZ	R3, L_GPIO_Config35
;__Lib_GPIO_32F10x.c, 177 :: 		
; currentmode start address is: 4 (R1)
0x0830	0x210C    MOVS	R1, #12
; currentmode end address is: 4 (R1)
0x0832	0xE000    B	L_GPIO_Config36
L_GPIO_Config35:
;__Lib_GPIO_32F10x.c, 179 :: 		
; currentmode start address is: 4 (R1)
0x0834	0x2108    MOVS	R1, #8
; currentmode end address is: 4 (R1)
L_GPIO_Config36:
;__Lib_GPIO_32F10x.c, 180 :: 		
; currentmode start address is: 4 (R1)
; currentmode end address is: 4 (R1)
0x0836	0xE7FF    B	L_GPIO_Config34
L__GPIO_Config100:
;__Lib_GPIO_32F10x.c, 175 :: 		
;__Lib_GPIO_32F10x.c, 180 :: 		
L_GPIO_Config34:
; currentmode start address is: 4 (R1)
; currentmode end address is: 4 (R1)
L_GPIO_Config33:
; currentmode start address is: 4 (R1)
; currentmode end address is: 4 (R1)
L_GPIO_Config29:
; currentmode start address is: 4 (R1)
; currentmode end address is: 4 (R1)
L_GPIO_Config25:
;__Lib_GPIO_32F10x.c, 182 :: 		
; currentmode start address is: 4 (R1)
0x0838	0x4B4E    LDR	R3, [PC, #312]
0x083A	0xEA050303  AND	R3, R5, R3, LSL #0
0x083E	0xB10B    CBZ	R3, L_GPIO_Config37
;__Lib_GPIO_32F10x.c, 183 :: 		
0x0840	0x2003    MOVS	R0, #3
0x0842	0xE009    B	L_GPIO_Config38
L_GPIO_Config37:
;__Lib_GPIO_32F10x.c, 184 :: 		
0x0844	0xF4057300  AND	R3, R5, #512
0x0848	0xB10B    CBZ	R3, L_GPIO_Config39
;__Lib_GPIO_32F10x.c, 185 :: 		
0x084A	0x2002    MOVS	R0, #2
0x084C	0xE004    B	L_GPIO_Config40
L_GPIO_Config39:
;__Lib_GPIO_32F10x.c, 186 :: 		
0x084E	0xF4056380  AND	R3, R5, #1024
0x0852	0xB10B    CBZ	R3, L__GPIO_Config101
;__Lib_GPIO_32F10x.c, 187 :: 		
0x0854	0x2001    MOVS	R0, #1
; speed end address is: 0 (R0)
0x0856	0xE7FF    B	L_GPIO_Config41
L__GPIO_Config101:
;__Lib_GPIO_32F10x.c, 186 :: 		
;__Lib_GPIO_32F10x.c, 187 :: 		
L_GPIO_Config41:
; speed start address is: 0 (R0)
; speed end address is: 0 (R0)
L_GPIO_Config40:
; speed start address is: 0 (R0)
; speed end address is: 0 (R0)
L_GPIO_Config38:
;__Lib_GPIO_32F10x.c, 189 :: 		
; speed start address is: 0 (R0)
;__Lib_GPIO_32F10x.c, 195 :: 		
0x0858	0xF005030C  AND	R3, R5, #12
0x085C	0xB10B    CBZ	R3, L__GPIO_Config102
;__Lib_GPIO_32F10x.c, 198 :: 		
0x085E	0x4301    ORRS	R1, R0
; speed end address is: 0 (R0)
; currentmode end address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 199 :: 		
0x0860	0xE7FF    B	L_GPIO_Config42
L__GPIO_Config102:
;__Lib_GPIO_32F10x.c, 195 :: 		
;__Lib_GPIO_32F10x.c, 199 :: 		
L_GPIO_Config42:
;__Lib_GPIO_32F10x.c, 201 :: 		
; currentmode start address is: 4 (R1)
0x0862	0xF00403FF  AND	R3, R4, #255
0x0866	0xB29B    UXTH	R3, R3
0x0868	0x2B00    CMP	R3, #0
0x086A	0xD03B    BEQ	L__GPIO_Config104
;__Lib_GPIO_32F10x.c, 202 :: 		
0x086C	0x6837    LDR	R7, [R6, #0]
; tmpreg start address is: 28 (R7)
;__Lib_GPIO_32F10x.c, 204 :: 		
; pinpos start address is: 0 (R0)
0x086E	0x2000    MOVS	R0, #0
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
; currentmode end address is: 4 (R1)
; tmpreg end address is: 28 (R7)
; pinpos end address is: 0 (R0)
; port end address is: 24 (R6)
0x0870	0xFA1FF884  UXTH	R8, R4
0x0874	0x4632    MOV	R2, R6
0x0876	0x462E    MOV	R6, R5
L_GPIO_Config44:
; pinpos start address is: 0 (R0)
; tmpreg start address is: 28 (R7)
; currentmode start address is: 4 (R1)
; port start address is: 8 (R2)
; config start address is: 24 (R6)
; pin_mask start address is: 32 (R8)
0x0878	0x2808    CMP	R0, #8
0x087A	0xD22C    BCS	L_GPIO_Config45
;__Lib_GPIO_32F10x.c, 206 :: 		
0x087C	0xF04F0301  MOV	R3, #1
0x0880	0xFA03F400  LSL	R4, R3, R0
;__Lib_GPIO_32F10x.c, 208 :: 		
0x0884	0xEA080304  AND	R3, R8, R4, LSL #0
;__Lib_GPIO_32F10x.c, 210 :: 		
0x0888	0x42A3    CMP	R3, R4
0x088A	0xD122    BNE	L__GPIO_Config103
;__Lib_GPIO_32F10x.c, 212 :: 		
0x088C	0x0085    LSLS	R5, R0, #2
;__Lib_GPIO_32F10x.c, 214 :: 		
0x088E	0xF04F030F  MOV	R3, #15
0x0892	0x40AB    LSLS	R3, R5
;__Lib_GPIO_32F10x.c, 215 :: 		
0x0894	0x43DB    MVN	R3, R3
0x0896	0xEA070403  AND	R4, R7, R3, LSL #0
; tmpreg end address is: 28 (R7)
;__Lib_GPIO_32F10x.c, 218 :: 		
0x089A	0xFA01F305  LSL	R3, R1, R5
0x089E	0xEA440303  ORR	R3, R4, R3, LSL #0
; tmpreg start address is: 20 (R5)
0x08A2	0x461D    MOV	R5, R3
;__Lib_GPIO_32F10x.c, 221 :: 		
0x08A4	0xF4067381  AND	R3, R6, #258
0x08A8	0xF5B37F81  CMP	R3, #258
0x08AC	0xD105    BNE	L_GPIO_Config48
;__Lib_GPIO_32F10x.c, 223 :: 		
0x08AE	0xF2020414  ADDW	R4, R2, #20
0x08B2	0xF04F0301  MOV	R3, #1
0x08B6	0x4083    LSLS	R3, R0
0x08B8	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F10x.c, 224 :: 		
L_GPIO_Config48:
;__Lib_GPIO_32F10x.c, 226 :: 		
0x08BA	0xF0060382  AND	R3, R6, #130
0x08BE	0x2B82    CMP	R3, #130
0x08C0	0xD105    BNE	L_GPIO_Config49
;__Lib_GPIO_32F10x.c, 228 :: 		
0x08C2	0xF2020410  ADDW	R4, R2, #16
0x08C6	0xF04F0301  MOV	R3, #1
0x08CA	0x4083    LSLS	R3, R0
0x08CC	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F10x.c, 229 :: 		
L_GPIO_Config49:
;__Lib_GPIO_32F10x.c, 230 :: 		
0x08CE	0x462F    MOV	R7, R5
0x08D0	0xE7FF    B	L_GPIO_Config47
; tmpreg end address is: 20 (R5)
L__GPIO_Config103:
;__Lib_GPIO_32F10x.c, 210 :: 		
;__Lib_GPIO_32F10x.c, 230 :: 		
L_GPIO_Config47:
;__Lib_GPIO_32F10x.c, 204 :: 		
; tmpreg start address is: 28 (R7)
0x08D2	0x1C40    ADDS	R0, R0, #1
;__Lib_GPIO_32F10x.c, 231 :: 		
; pinpos end address is: 0 (R0)
0x08D4	0xE7D0    B	L_GPIO_Config44
L_GPIO_Config45:
;__Lib_GPIO_32F10x.c, 232 :: 		
0x08D6	0x6017    STR	R7, [R2, #0]
; currentmode end address is: 4 (R1)
; port end address is: 8 (R2)
; config end address is: 24 (R6)
; pin_mask end address is: 32 (R8)
; tmpreg end address is: 28 (R7)
0x08D8	0xFA1FF088  UXTH	R0, R8
0x08DC	0x460F    MOV	R7, R1
0x08DE	0x4631    MOV	R1, R6
0x08E0	0x4616    MOV	R6, R2
;__Lib_GPIO_32F10x.c, 234 :: 		
0x08E2	0xE002    B	L_GPIO_Config43
L__GPIO_Config104:
;__Lib_GPIO_32F10x.c, 201 :: 		
0x08E4	0x460F    MOV	R7, R1
0x08E6	0x4629    MOV	R1, R5
0x08E8	0xB2A0    UXTH	R0, R4
;__Lib_GPIO_32F10x.c, 234 :: 		
L_GPIO_Config43:
;__Lib_GPIO_32F10x.c, 238 :: 		
; currentmode start address is: 28 (R7)
; port start address is: 24 (R6)
; config start address is: 4 (R1)
; pin_mask start address is: 0 (R0)
0x08EA	0xF1B00FFF  CMP	R0, #255
0x08EE	0xD939    BLS	L_GPIO_Config50
;__Lib_GPIO_32F10x.c, 240 :: 		
0x08F0	0x1D33    ADDS	R3, R6, #4
0x08F2	0xF8D38000  LDR	R8, [R3, #0]
; tmpreg start address is: 32 (R8)
;__Lib_GPIO_32F10x.c, 241 :: 		
; pinpos start address is: 8 (R2)
0x08F6	0x2200    MOVS	R2, #0
; port end address is: 24 (R6)
; tmpreg end address is: 32 (R8)
; pinpos end address is: 8 (R2)
L_GPIO_Config51:
; pinpos start address is: 8 (R2)
; tmpreg start address is: 32 (R8)
; pin_mask start address is: 0 (R0)
; pin_mask end address is: 0 (R0)
; config start address is: 4 (R1)
; config end address is: 4 (R1)
; port start address is: 24 (R6)
; currentmode start address is: 28 (R7)
; currentmode end address is: 28 (R7)
0x08F8	0x2A08    CMP	R2, #8
0x08FA	0xD230    BCS	L_GPIO_Config52
; pin_mask end address is: 0 (R0)
; config end address is: 4 (R1)
; currentmode end address is: 28 (R7)
;__Lib_GPIO_32F10x.c, 243 :: 		
; currentmode start address is: 28 (R7)
; config start address is: 4 (R1)
; pin_mask start address is: 0 (R0)
0x08FC	0xF2020408  ADDW	R4, R2, #8
0x0900	0xF04F0301  MOV	R3, #1
0x0904	0xFA03F404  LSL	R4, R3, R4
;__Lib_GPIO_32F10x.c, 245 :: 		
0x0908	0xEA000304  AND	R3, R0, R4, LSL #0
;__Lib_GPIO_32F10x.c, 246 :: 		
0x090C	0x42A3    CMP	R3, R4
0x090E	0xD124    BNE	L__GPIO_Config105
;__Lib_GPIO_32F10x.c, 248 :: 		
0x0910	0x0095    LSLS	R5, R2, #2
;__Lib_GPIO_32F10x.c, 250 :: 		
0x0912	0xF04F030F  MOV	R3, #15
0x0916	0x40AB    LSLS	R3, R5
;__Lib_GPIO_32F10x.c, 251 :: 		
0x0918	0x43DB    MVN	R3, R3
0x091A	0xEA080803  AND	R8, R8, R3, LSL #0
; tmpreg end address is: 32 (R8)
;__Lib_GPIO_32F10x.c, 254 :: 		
0x091E	0xFA07F305  LSL	R3, R7, R5
0x0922	0xEA480803  ORR	R8, R8, R3, LSL #0
; tmpreg start address is: 32 (R8)
;__Lib_GPIO_32F10x.c, 257 :: 		
0x0926	0xF4017381  AND	R3, R1, #258
0x092A	0xF5B37F81  CMP	R3, #258
0x092E	0xD107    BNE	L_GPIO_Config55
;__Lib_GPIO_32F10x.c, 259 :: 		
0x0930	0xF2060514  ADDW	R5, R6, #20
0x0934	0xF2020408  ADDW	R4, R2, #8
0x0938	0xF04F0301  MOV	R3, #1
0x093C	0x40A3    LSLS	R3, R4
0x093E	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F10x.c, 260 :: 		
L_GPIO_Config55:
;__Lib_GPIO_32F10x.c, 262 :: 		
0x0940	0xF0010382  AND	R3, R1, #130
0x0944	0x2B82    CMP	R3, #130
0x0946	0xD107    BNE	L_GPIO_Config56
;__Lib_GPIO_32F10x.c, 264 :: 		
0x0948	0xF2060510  ADDW	R5, R6, #16
0x094C	0xF2020408  ADDW	R4, R2, #8
0x0950	0xF04F0301  MOV	R3, #1
0x0954	0x40A3    LSLS	R3, R4
0x0956	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F10x.c, 265 :: 		
L_GPIO_Config56:
;__Lib_GPIO_32F10x.c, 266 :: 		
0x0958	0xE7FF    B	L_GPIO_Config54
; tmpreg end address is: 32 (R8)
L__GPIO_Config105:
;__Lib_GPIO_32F10x.c, 246 :: 		
;__Lib_GPIO_32F10x.c, 266 :: 		
L_GPIO_Config54:
;__Lib_GPIO_32F10x.c, 241 :: 		
; tmpreg start address is: 32 (R8)
0x095A	0x1C52    ADDS	R2, R2, #1
;__Lib_GPIO_32F10x.c, 267 :: 		
; pin_mask end address is: 0 (R0)
; config end address is: 4 (R1)
; currentmode end address is: 28 (R7)
; pinpos end address is: 8 (R2)
0x095C	0xE7CC    B	L_GPIO_Config51
L_GPIO_Config52:
;__Lib_GPIO_32F10x.c, 268 :: 		
0x095E	0x1D33    ADDS	R3, R6, #4
; port end address is: 24 (R6)
0x0960	0xF8C38000  STR	R8, [R3, #0]
; tmpreg end address is: 32 (R8)
;__Lib_GPIO_32F10x.c, 269 :: 		
L_GPIO_Config50:
;__Lib_GPIO_32F10x.c, 270 :: 		
L_end_GPIO_Config:
0x0964	0xF8DDE000  LDR	LR, [SP, #0]
0x0968	0xB001    ADD	SP, SP, #4
0x096A	0x4770    BX	LR
0x096C	0xFC00FFFF  	#-1024
0x0970	0x00140008  	#524308
0x0974	0x08000008  	#526336
; end of _GPIO_Config
_GPIO_Clk_Enable:
;__Lib_GPIO_32F10x.c, 83 :: 		
; gpio_port start address is: 0 (R0)
0x0174	0xB081    SUB	SP, SP, #4
; gpio_port end address is: 0 (R0)
; gpio_port start address is: 0 (R0)
;__Lib_GPIO_32F10x.c, 85 :: 		
0x0176	0x4919    LDR	R1, [PC, #100]
0x0178	0xEA000101  AND	R1, R0, R1, LSL #0
; gpio_port end address is: 0 (R0)
; prt start address is: 0 (R0)
0x017C	0x4608    MOV	R0, R1
;__Lib_GPIO_32F10x.c, 86 :: 		
; pos start address is: 8 (R2)
0x017E	0x2200    MOVS	R2, #0
;__Lib_GPIO_32F10x.c, 87 :: 		
0x0180	0xE00E    B	L_GPIO_Clk_Enable0
; prt end address is: 0 (R0)
; pos end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 88 :: 		
L_GPIO_Clk_Enable2:
; pos start address is: 0 (R0)
0x0182	0x2004    MOVS	R0, #4
; pos end address is: 0 (R0)
0x0184	0xE022    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 89 :: 		
L_GPIO_Clk_Enable3:
; pos start address is: 0 (R0)
0x0186	0x2008    MOVS	R0, #8
; pos end address is: 0 (R0)
0x0188	0xE020    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 90 :: 		
L_GPIO_Clk_Enable4:
; pos start address is: 0 (R0)
0x018A	0x2010    MOVS	R0, #16
; pos end address is: 0 (R0)
0x018C	0xE01E    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 91 :: 		
L_GPIO_Clk_Enable5:
; pos start address is: 0 (R0)
0x018E	0x2020    MOVS	R0, #32
; pos end address is: 0 (R0)
0x0190	0xE01C    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 92 :: 		
L_GPIO_Clk_Enable6:
; pos start address is: 0 (R0)
0x0192	0x2040    MOVS	R0, #64
; pos end address is: 0 (R0)
0x0194	0xE01A    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 93 :: 		
L_GPIO_Clk_Enable7:
; pos start address is: 0 (R0)
0x0196	0x2080    MOVS	R0, #128
; pos end address is: 0 (R0)
0x0198	0xE018    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 94 :: 		
L_GPIO_Clk_Enable8:
; pos start address is: 0 (R0)
0x019A	0xF2401000  MOVW	R0, #256
; pos end address is: 0 (R0)
0x019E	0xE015    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 95 :: 		
L_GPIO_Clk_Enable0:
; pos start address is: 8 (R2)
; prt start address is: 0 (R0)
0x01A0	0x490F    LDR	R1, [PC, #60]
0x01A2	0x4288    CMP	R0, R1
0x01A4	0xD0ED    BEQ	L_GPIO_Clk_Enable2
0x01A6	0x490F    LDR	R1, [PC, #60]
0x01A8	0x4288    CMP	R0, R1
0x01AA	0xD0EC    BEQ	L_GPIO_Clk_Enable3
0x01AC	0x490E    LDR	R1, [PC, #56]
0x01AE	0x4288    CMP	R0, R1
0x01B0	0xD0EB    BEQ	L_GPIO_Clk_Enable4
0x01B2	0x490E    LDR	R1, [PC, #56]
0x01B4	0x4288    CMP	R0, R1
0x01B6	0xD0EA    BEQ	L_GPIO_Clk_Enable5
0x01B8	0x490D    LDR	R1, [PC, #52]
0x01BA	0x4288    CMP	R0, R1
0x01BC	0xD0E9    BEQ	L_GPIO_Clk_Enable6
0x01BE	0x490D    LDR	R1, [PC, #52]
0x01C0	0x4288    CMP	R0, R1
0x01C2	0xD0E8    BEQ	L_GPIO_Clk_Enable7
0x01C4	0x490C    LDR	R1, [PC, #48]
0x01C6	0x4288    CMP	R0, R1
0x01C8	0xD0E7    BEQ	L_GPIO_Clk_Enable8
; prt end address is: 0 (R0)
; pos end address is: 8 (R2)
0x01CA	0x4610    MOV	R0, R2
L_GPIO_Clk_Enable1:
;__Lib_GPIO_32F10x.c, 97 :: 		
; pos start address is: 0 (R0)
0x01CC	0x490B    LDR	R1, [PC, #44]
0x01CE	0x6809    LDR	R1, [R1, #0]
0x01D0	0xEA410200  ORR	R2, R1, R0, LSL #0
; pos end address is: 0 (R0)
0x01D4	0x4909    LDR	R1, [PC, #36]
0x01D6	0x600A    STR	R2, [R1, #0]
;__Lib_GPIO_32F10x.c, 98 :: 		
L_end_GPIO_Clk_Enable:
0x01D8	0xB001    ADD	SP, SP, #4
0x01DA	0x4770    BX	LR
0x01DC	0xFC00FFFF  	#-1024
0x01E0	0x08004001  	#1073809408
0x01E4	0x0C004001  	#1073810432
0x01E8	0x10004001  	#1073811456
0x01EC	0x14004001  	#1073812480
0x01F0	0x18004001  	#1073813504
0x01F4	0x1C004001  	#1073814528
0x01F8	0x20004001  	#1073815552
0x01FC	0x10184002  	RCC_APB2ENR+0
; end of _GPIO_Clk_Enable
_GPIO_Digital_Input:
;__Lib_GPIO_32F10x.c, 369 :: 		
; pin_mask start address is: 4 (R1)
; port start address is: 0 (R0)
0x199C	0xB081    SUB	SP, SP, #4
0x199E	0xF8CDE000  STR	LR, [SP, #0]
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; pin_mask start address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 370 :: 		
0x19A2	0xF04F0242  MOV	R2, #66
0x19A6	0xB289    UXTH	R1, R1
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
0x19A8	0xF7FEFEEC  BL	_GPIO_Config+0
;__Lib_GPIO_32F10x.c, 371 :: 		
L_end_GPIO_Digital_Input:
0x19AC	0xF8DDE000  LDR	LR, [SP, #0]
0x19B0	0xB001    ADD	SP, SP, #4
0x19B2	0x4770    BX	LR
; end of _GPIO_Digital_Input
_SPI3_Init_Advanced:
;__Lib_SPI_123.c, 133 :: 		
; module start address is: 8 (R2)
0x1948	0xB083    SUB	SP, SP, #12
0x194A	0xF8CDE000  STR	LR, [SP, #0]
0x194E	0xF88D0004  STRB	R0, [SP, #4]
0x1952	0x9102    STR	R1, [SP, #8]
; module end address is: 8 (R2)
; module start address is: 8 (R2)
;__Lib_SPI_123.c, 134 :: 		
0x1954	0x4C0B    LDR	R4, [PC, #44]
0x1956	0x4B0C    LDR	R3, [PC, #48]
0x1958	0x601C    STR	R4, [R3, #0]
;__Lib_SPI_123.c, 135 :: 		
0x195A	0x4C0C    LDR	R4, [PC, #48]
0x195C	0x4B0C    LDR	R3, [PC, #48]
0x195E	0x601C    STR	R4, [R3, #0]
;__Lib_SPI_123.c, 137 :: 		
0x1960	0x2401    MOVS	R4, #1
0x1962	0xB264    SXTB	R4, R4
0x1964	0x4B0B    LDR	R3, [PC, #44]
0x1966	0x601C    STR	R4, [R3, #0]
;__Lib_SPI_123.c, 138 :: 		
0x1968	0x4610    MOV	R0, R2
; module end address is: 8 (R2)
0x196A	0xF7FEFE83  BL	_GPIO_Alternate_Function_Enable+0
;__Lib_SPI_123.c, 140 :: 		
0x196E	0x9A02    LDR	R2, [SP, #8]
0x1970	0xF89D1004  LDRB	R1, [SP, #4]
0x1974	0x4808    LDR	R0, [PC, #32]
0x1976	0xF7FEFE5B  BL	__Lib_SPI_123_SPIx_Init_Advanced+0
;__Lib_SPI_123.c, 141 :: 		
L_end_SPI3_Init_Advanced:
0x197A	0xF8DDE000  LDR	LR, [SP, #0]
0x197E	0xB003    ADD	SP, SP, #12
0x1980	0x4770    BX	LR
0x1982	0xBF00    NOP
0x1984	0xFFFFFFFF  	_SPI3_Read+0
0x1988	0x09B42000  	_SPI_Rd_Ptr+0
0x198C	0x02F10000  	_SPI3_Write+0
0x1990	0x09AC2000  	_SPI_Wr_Ptr+0
0x1994	0x03BC4242  	RCC_APB1ENR+0
0x1998	0x3C004000  	SPI3_CR1+0
; end of _SPI3_Init_Advanced
_GPIO_Alternate_Function_Enable:
;__Lib_GPIO_32F10x.c, 303 :: 		
; module start address is: 0 (R0)
0x0674	0xB081    SUB	SP, SP, #4
0x0676	0xF8CDE000  STR	LR, [SP, #0]
; module end address is: 0 (R0)
; module start address is: 0 (R0)
;__Lib_GPIO_32F10x.c, 304 :: 		
;__Lib_GPIO_32F10x.c, 305 :: 		
;__Lib_GPIO_32F10x.c, 307 :: 		
0x067A	0x2201    MOVS	R2, #1
0x067C	0xB252    SXTB	R2, R2
0x067E	0x493E    LDR	R1, [PC, #248]
0x0680	0x600A    STR	R2, [R1, #0]
;__Lib_GPIO_32F10x.c, 309 :: 		
0x0682	0xF2000168  ADDW	R1, R0, #104
0x0686	0x680B    LDR	R3, [R1, #0]
0x0688	0xF06F6100  MVN	R1, #134217728
0x068C	0xEA030201  AND	R2, R3, R1, LSL #0
; gpio_remap start address is: 16 (R4)
0x0690	0x4614    MOV	R4, R2
;__Lib_GPIO_32F10x.c, 310 :: 		
0x0692	0xF0036100  AND	R1, R3, #134217728
0x0696	0x0EC9    LSRS	R1, R1, #27
; newstate start address is: 12 (R3)
0x0698	0x460B    MOV	R3, R1
;__Lib_GPIO_32F10x.c, 312 :: 		
0x069A	0xF0024100  AND	R1, R2, #-2147483648
0x069E	0xF1B14F00  CMP	R1, #-2147483648
0x06A2	0xD102    BNE	L_GPIO_Alternate_Function_Enable66
;__Lib_GPIO_32F10x.c, 314 :: 		
0x06A4	0x4935    LDR	R1, [PC, #212]
; tmpreg start address is: 8 (R2)
0x06A6	0x680A    LDR	R2, [R1, #0]
;__Lib_GPIO_32F10x.c, 315 :: 		
; tmpreg end address is: 8 (R2)
0x06A8	0xE001    B	L_GPIO_Alternate_Function_Enable67
L_GPIO_Alternate_Function_Enable66:
;__Lib_GPIO_32F10x.c, 318 :: 		
0x06AA	0x4935    LDR	R1, [PC, #212]
; tmpreg start address is: 8 (R2)
0x06AC	0x680A    LDR	R2, [R1, #0]
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 319 :: 		
L_GPIO_Alternate_Function_Enable67:
;__Lib_GPIO_32F10x.c, 321 :: 		
; tmpreg start address is: 8 (R2)
0x06AE	0xF4042170  AND	R1, R4, #983040
0x06B2	0x0C09    LSRS	R1, R1, #16
; tmpmask start address is: 24 (R6)
0x06B4	0x460E    MOV	R6, R1
;__Lib_GPIO_32F10x.c, 322 :: 		
0x06B6	0xF64F71FF  MOVW	R1, #65535
0x06BA	0xEA040101  AND	R1, R4, R1, LSL #0
; tmp start address is: 20 (R5)
0x06BE	0x460D    MOV	R5, R1
;__Lib_GPIO_32F10x.c, 324 :: 		
0x06C0	0xF4041140  AND	R1, R4, #3145728
0x06C4	0xF5B11F40  CMP	R1, #3145728
0x06C8	0xD10D    BNE	L_GPIO_Alternate_Function_Enable68
; tmpmask end address is: 24 (R6)
;__Lib_GPIO_32F10x.c, 326 :: 		
0x06CA	0xF06F6170  MVN	R1, #251658240
0x06CE	0xEA020101  AND	R1, R2, R1, LSL #0
; tmpreg end address is: 8 (R2)
; tmpreg start address is: 24 (R6)
0x06D2	0x460E    MOV	R6, R1
;__Lib_GPIO_32F10x.c, 327 :: 		
0x06D4	0x492A    LDR	R1, [PC, #168]
0x06D6	0x680A    LDR	R2, [R1, #0]
0x06D8	0xF06F6170  MVN	R1, #251658240
0x06DC	0x400A    ANDS	R2, R1
0x06DE	0x4928    LDR	R1, [PC, #160]
0x06E0	0x600A    STR	R2, [R1, #0]
;__Lib_GPIO_32F10x.c, 328 :: 		
0x06E2	0x4632    MOV	R2, R6
; tmpreg end address is: 24 (R6)
0x06E4	0xE016    B	L_GPIO_Alternate_Function_Enable69
L_GPIO_Alternate_Function_Enable68:
;__Lib_GPIO_32F10x.c, 329 :: 		
; tmpreg start address is: 8 (R2)
; tmpmask start address is: 24 (R6)
0x06E6	0xF4041180  AND	R1, R4, #1048576
0x06EA	0xF5B11F80  CMP	R1, #1048576
0x06EE	0xD109    BNE	L_GPIO_Alternate_Function_Enable70
;__Lib_GPIO_32F10x.c, 331 :: 		
0x06F0	0xF04F0103  MOV	R1, #3
0x06F4	0x40B1    LSLS	R1, R6
; tmpmask end address is: 24 (R6)
;__Lib_GPIO_32F10x.c, 332 :: 		
0x06F6	0x43C9    MVN	R1, R1
0x06F8	0xEA020101  AND	R1, R2, R1, LSL #0
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 333 :: 		
0x06FC	0xF0416170  ORR	R1, R1, #251658240
; tmpreg start address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 334 :: 		
0x0700	0x460A    MOV	R2, R1
; tmpreg end address is: 4 (R1)
0x0702	0xE007    B	L_GPIO_Alternate_Function_Enable71
L_GPIO_Alternate_Function_Enable70:
;__Lib_GPIO_32F10x.c, 337 :: 		
; tmpreg start address is: 8 (R2)
0x0704	0x0D61    LSRS	R1, R4, #21
0x0706	0x0109    LSLS	R1, R1, #4
0x0708	0xFA05F101  LSL	R1, R5, R1
0x070C	0x43C9    MVN	R1, R1
0x070E	0x400A    ANDS	R2, R1
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 338 :: 		
0x0710	0xF0426270  ORR	R2, R2, #251658240
; tmpreg start address is: 8 (R2)
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 339 :: 		
L_GPIO_Alternate_Function_Enable71:
; tmpreg start address is: 8 (R2)
; tmpreg end address is: 8 (R2)
L_GPIO_Alternate_Function_Enable69:
;__Lib_GPIO_32F10x.c, 341 :: 		
; tmpreg start address is: 8 (R2)
0x0714	0xB12B    CBZ	R3, L__GPIO_Alternate_Function_Enable106
; newstate end address is: 12 (R3)
;__Lib_GPIO_32F10x.c, 343 :: 		
0x0716	0x0D61    LSRS	R1, R4, #21
0x0718	0x0109    LSLS	R1, R1, #4
0x071A	0xFA05F101  LSL	R1, R5, R1
; tmp end address is: 20 (R5)
0x071E	0x430A    ORRS	R2, R1
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 344 :: 		
0x0720	0xE7FF    B	L_GPIO_Alternate_Function_Enable72
L__GPIO_Alternate_Function_Enable106:
;__Lib_GPIO_32F10x.c, 341 :: 		
;__Lib_GPIO_32F10x.c, 344 :: 		
L_GPIO_Alternate_Function_Enable72:
;__Lib_GPIO_32F10x.c, 346 :: 		
; tmpreg start address is: 8 (R2)
0x0722	0xF0044100  AND	R1, R4, #-2147483648
; gpio_remap end address is: 16 (R4)
0x0726	0xF1B14F00  CMP	R1, #-2147483648
0x072A	0xD102    BNE	L_GPIO_Alternate_Function_Enable73
;__Lib_GPIO_32F10x.c, 348 :: 		
0x072C	0x4913    LDR	R1, [PC, #76]
0x072E	0x600A    STR	R2, [R1, #0]
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 349 :: 		
0x0730	0xE001    B	L_GPIO_Alternate_Function_Enable74
L_GPIO_Alternate_Function_Enable73:
;__Lib_GPIO_32F10x.c, 352 :: 		
; tmpreg start address is: 8 (R2)
0x0732	0x4913    LDR	R1, [PC, #76]
0x0734	0x600A    STR	R2, [R1, #0]
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 353 :: 		
L_GPIO_Alternate_Function_Enable74:
;__Lib_GPIO_32F10x.c, 356 :: 		
; i start address is: 40 (R10)
0x0736	0xF2400A00  MOVW	R10, #0
; module end address is: 0 (R0)
; i end address is: 40 (R10)
0x073A	0x4681    MOV	R9, R0
;__Lib_GPIO_32F10x.c, 357 :: 		
L_GPIO_Alternate_Function_Enable75:
; i start address is: 40 (R10)
; module start address is: 36 (R9)
0x073C	0xEA4F018A  LSL	R1, R10, #2
0x0740	0xEB090101  ADD	R1, R9, R1, LSL #0
0x0744	0x6809    LDR	R1, [R1, #0]
0x0746	0xF1B13FFF  CMP	R1, #-1
0x074A	0xD010    BEQ	L_GPIO_Alternate_Function_Enable76
;__Lib_GPIO_32F10x.c, 358 :: 		
0x074C	0xF1090134  ADD	R1, R9, #52
0x0750	0xEA4F038A  LSL	R3, R10, #2
0x0754	0x18C9    ADDS	R1, R1, R3
0x0756	0x6809    LDR	R1, [R1, #0]
0x0758	0x460A    MOV	R2, R1
0x075A	0xEB090103  ADD	R1, R9, R3, LSL #0
0x075E	0x6809    LDR	R1, [R1, #0]
0x0760	0x4608    MOV	R0, R1
0x0762	0x4611    MOV	R1, R2
0x0764	0xF7FFFD62  BL	__Lib_GPIO_32F10x_GPIO_Configure_Pin+0
;__Lib_GPIO_32F10x.c, 359 :: 		
0x0768	0xF10A0A01  ADD	R10, R10, #1
;__Lib_GPIO_32F10x.c, 360 :: 		
; module end address is: 36 (R9)
; i end address is: 40 (R10)
0x076C	0xE7E6    B	L_GPIO_Alternate_Function_Enable75
L_GPIO_Alternate_Function_Enable76:
;__Lib_GPIO_32F10x.c, 363 :: 		
L_end_GPIO_Alternate_Function_Enable:
0x076E	0xF8DDE000  LDR	LR, [SP, #0]
0x0772	0xB001    ADD	SP, SP, #4
0x0774	0x4770    BX	LR
0x0776	0xBF00    NOP
0x0778	0x03004242  	RCC_APB2ENRbits+0
0x077C	0x001C4001  	AFIO_MAPR2+0
0x0780	0x00044001  	AFIO_MAPR+0
; end of _GPIO_Alternate_Function_Enable
__Lib_GPIO_32F10x_GPIO_Configure_Pin:
;__Lib_GPIO_32F10x.c, 282 :: 		
; config start address is: 4 (R1)
; af_pin start address is: 0 (R0)
0x022C	0xB083    SUB	SP, SP, #12
0x022E	0xF8CDE000  STR	LR, [SP, #0]
; config end address is: 4 (R1)
; af_pin end address is: 0 (R0)
; af_pin start address is: 0 (R0)
; config start address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 286 :: 		
0x0232	0xF00003FF  AND	R3, R0, #255
; af_pin end address is: 0 (R0)
0x0236	0x091A    LSRS	R2, R3, #4
; port start address is: 0 (R0)
0x0238	0x4610    MOV	R0, R2
;__Lib_GPIO_32F10x.c, 287 :: 		
0x023A	0xF003020F  AND	R2, R3, #15
; pin start address is: 12 (R3)
0x023E	0x4613    MOV	R3, R2
;__Lib_GPIO_32F10x.c, 290 :: 		
0x0240	0xE014    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin57
; port end address is: 0 (R0)
;__Lib_GPIO_32F10x.c, 291 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin59:
0x0242	0x4A19    LDR	R2, [PC, #100]
0x0244	0x9202    STR	R2, [SP, #8]
0x0246	0xE01F    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 292 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin60:
0x0248	0x4A18    LDR	R2, [PC, #96]
0x024A	0x9202    STR	R2, [SP, #8]
0x024C	0xE01C    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 293 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin61:
0x024E	0x4A18    LDR	R2, [PC, #96]
0x0250	0x9202    STR	R2, [SP, #8]
0x0252	0xE019    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 294 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin62:
0x0254	0x4A17    LDR	R2, [PC, #92]
0x0256	0x9202    STR	R2, [SP, #8]
0x0258	0xE016    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 295 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin63:
0x025A	0x4A17    LDR	R2, [PC, #92]
0x025C	0x9202    STR	R2, [SP, #8]
0x025E	0xE013    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 296 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin64:
0x0260	0x4A16    LDR	R2, [PC, #88]
0x0262	0x9202    STR	R2, [SP, #8]
0x0264	0xE010    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 297 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin65:
0x0266	0x4A16    LDR	R2, [PC, #88]
0x0268	0x9202    STR	R2, [SP, #8]
0x026A	0xE00D    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 298 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin57:
; port start address is: 0 (R0)
0x026C	0x2800    CMP	R0, #0
0x026E	0xD0E8    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin59
0x0270	0x2801    CMP	R0, #1
0x0272	0xD0E9    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin60
0x0274	0x2802    CMP	R0, #2
0x0276	0xD0EA    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin61
0x0278	0x2803    CMP	R0, #3
0x027A	0xD0EB    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin62
0x027C	0x2804    CMP	R0, #4
0x027E	0xD0EC    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin63
0x0280	0x2805    CMP	R0, #5
0x0282	0xD0ED    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin64
0x0284	0x2806    CMP	R0, #6
0x0286	0xD0EE    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin65
; port end address is: 0 (R0)
L___Lib_GPIO_32F10x_GPIO_Configure_Pin58:
;__Lib_GPIO_32F10x.c, 300 :: 		
0x0288	0x2201    MOVS	R2, #1
0x028A	0xB212    SXTH	R2, R2
0x028C	0x409A    LSLS	R2, R3
; pin end address is: 12 (R3)
0x028E	0xF8AD2004  STRH	R2, [SP, #4]
; config end address is: 4 (R1)
0x0292	0x9802    LDR	R0, [SP, #8]
0x0294	0x460A    MOV	R2, R1
0x0296	0xF8BD1004  LDRH	R1, [SP, #4]
0x029A	0xF000FA73  BL	_GPIO_Config+0
;__Lib_GPIO_32F10x.c, 301 :: 		
L_end_GPIO_Configure_Pin:
0x029E	0xF8DDE000  LDR	LR, [SP, #0]
0x02A2	0xB003    ADD	SP, SP, #12
0x02A4	0x4770    BX	LR
0x02A6	0xBF00    NOP
0x02A8	0x08004001  	#1073809408
0x02AC	0x0C004001  	#1073810432
0x02B0	0x10004001  	#1073811456
0x02B4	0x14004001  	#1073812480
0x02B8	0x18004001  	#1073813504
0x02BC	0x1C004001  	#1073814528
0x02C0	0x20004001  	#1073815552
; end of __Lib_GPIO_32F10x_GPIO_Configure_Pin
__Lib_SPI_123_SPIx_Init_Advanced:
;__Lib_SPI_123.c, 53 :: 		
; config start address is: 8 (R2)
; clock_divider start address is: 4 (R1)
; base start address is: 0 (R0)
0x0630	0xB081    SUB	SP, SP, #4
; config end address is: 8 (R2)
; clock_divider end address is: 4 (R1)
; base end address is: 0 (R0)
; base start address is: 0 (R0)
; clock_divider start address is: 4 (R1)
; config start address is: 8 (R2)
;__Lib_SPI_123.c, 56 :: 		
0x0632	0x2300    MOVS	R3, #0
0x0634	0x6003    STR	R3, [R0, #0]
;__Lib_SPI_123.c, 58 :: 		
0x0636	0x00CB    LSLS	R3, R1, #3
0x0638	0xB29B    UXTH	R3, R3
; clock_divider end address is: 4 (R1)
0x063A	0xEA420303  ORR	R3, R2, R3, LSL #0
;__Lib_SPI_123.c, 60 :: 		
0x063E	0x6804    LDR	R4, [R0, #0]
0x0640	0xB29B    UXTH	R3, R3
0x0642	0xEA440303  ORR	R3, R4, R3, LSL #0
0x0646	0x6003    STR	R3, [R0, #0]
;__Lib_SPI_123.c, 61 :: 		
0x0648	0x1D05    ADDS	R5, R0, #4
0x064A	0x1413    ASRS	R3, R2, #16
; config end address is: 8 (R2)
0x064C	0x461C    MOV	R4, R3
0x064E	0x682B    LDR	R3, [R5, #0]
0x0650	0xF3640382  BFI	R3, R4, #2, #1
0x0654	0x602B    STR	R3, [R5, #0]
;__Lib_SPI_123.c, 63 :: 		
0x0656	0xF200051C  ADDW	R5, R0, #28
0x065A	0x2400    MOVS	R4, #0
0x065C	0x682B    LDR	R3, [R5, #0]
0x065E	0xF36423CB  BFI	R3, R4, #11, #1
0x0662	0x602B    STR	R3, [R5, #0]
;__Lib_SPI_123.c, 64 :: 		
0x0664	0x2401    MOVS	R4, #1
0x0666	0x6803    LDR	R3, [R0, #0]
0x0668	0xF3641386  BFI	R3, R4, #6, #1
0x066C	0x6003    STR	R3, [R0, #0]
; base end address is: 0 (R0)
;__Lib_SPI_123.c, 65 :: 		
L_end_SPIx_Init_Advanced:
0x066E	0xB001    ADD	SP, SP, #4
0x0670	0x4770    BX	LR
; end of __Lib_SPI_123_SPIx_Init_Advanced
_ADC_Set_Input_Channel:
;__Lib_ADC_12_32F10x_16ch.c, 41 :: 		
; input_mask start address is: 0 (R0)
0x19B4	0xB081    SUB	SP, SP, #4
0x19B6	0xF8CDE000  STR	LR, [SP, #0]
0x19BA	0xFA1FF980  UXTH	R9, R0
; input_mask end address is: 0 (R0)
; input_mask start address is: 36 (R9)
;__Lib_ADC_12_32F10x_16ch.c, 42 :: 		
0x19BE	0xF3C90100  UBFX	R1, R9, #0, #1
0x19C2	0xB121    CBZ	R1, L_ADC_Set_Input_Channel0
;__Lib_ADC_12_32F10x_16ch.c, 43 :: 		
0x19C4	0xF2400101  MOVW	R1, #1
0x19C8	0x483F    LDR	R0, [PC, #252]
0x19CA	0xF7FEFFD5  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel0:
;__Lib_ADC_12_32F10x_16ch.c, 44 :: 		
0x19CE	0xF3C90140  UBFX	R1, R9, #1, #1
0x19D2	0xB121    CBZ	R1, L_ADC_Set_Input_Channel1
;__Lib_ADC_12_32F10x_16ch.c, 45 :: 		
0x19D4	0xF2400102  MOVW	R1, #2
0x19D8	0x483B    LDR	R0, [PC, #236]
0x19DA	0xF7FEFFCD  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel1:
;__Lib_ADC_12_32F10x_16ch.c, 46 :: 		
0x19DE	0xF3C90180  UBFX	R1, R9, #2, #1
0x19E2	0xB121    CBZ	R1, L_ADC_Set_Input_Channel2
;__Lib_ADC_12_32F10x_16ch.c, 47 :: 		
0x19E4	0xF2400104  MOVW	R1, #4
0x19E8	0x4837    LDR	R0, [PC, #220]
0x19EA	0xF7FEFFC5  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel2:
;__Lib_ADC_12_32F10x_16ch.c, 48 :: 		
0x19EE	0xF3C901C0  UBFX	R1, R9, #3, #1
0x19F2	0xB121    CBZ	R1, L_ADC_Set_Input_Channel3
;__Lib_ADC_12_32F10x_16ch.c, 49 :: 		
0x19F4	0xF2400108  MOVW	R1, #8
0x19F8	0x4833    LDR	R0, [PC, #204]
0x19FA	0xF7FEFFBD  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel3:
;__Lib_ADC_12_32F10x_16ch.c, 50 :: 		
0x19FE	0xF3C91100  UBFX	R1, R9, #4, #1
0x1A02	0xB121    CBZ	R1, L_ADC_Set_Input_Channel4
;__Lib_ADC_12_32F10x_16ch.c, 51 :: 		
0x1A04	0xF2400110  MOVW	R1, #16
0x1A08	0x482F    LDR	R0, [PC, #188]
0x1A0A	0xF7FEFFB5  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel4:
;__Lib_ADC_12_32F10x_16ch.c, 52 :: 		
0x1A0E	0xF3C91140  UBFX	R1, R9, #5, #1
0x1A12	0xB121    CBZ	R1, L_ADC_Set_Input_Channel5
;__Lib_ADC_12_32F10x_16ch.c, 53 :: 		
0x1A14	0xF2400120  MOVW	R1, #32
0x1A18	0x482B    LDR	R0, [PC, #172]
0x1A1A	0xF7FEFFAD  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel5:
;__Lib_ADC_12_32F10x_16ch.c, 54 :: 		
0x1A1E	0xF3C91180  UBFX	R1, R9, #6, #1
0x1A22	0xB121    CBZ	R1, L_ADC_Set_Input_Channel6
;__Lib_ADC_12_32F10x_16ch.c, 55 :: 		
0x1A24	0xF2400140  MOVW	R1, #64
0x1A28	0x4827    LDR	R0, [PC, #156]
0x1A2A	0xF7FEFFA5  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel6:
;__Lib_ADC_12_32F10x_16ch.c, 56 :: 		
0x1A2E	0xF3C911C0  UBFX	R1, R9, #7, #1
0x1A32	0xB121    CBZ	R1, L_ADC_Set_Input_Channel7
;__Lib_ADC_12_32F10x_16ch.c, 57 :: 		
0x1A34	0xF2400180  MOVW	R1, #128
0x1A38	0x4823    LDR	R0, [PC, #140]
0x1A3A	0xF7FEFF9D  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel7:
;__Lib_ADC_12_32F10x_16ch.c, 58 :: 		
0x1A3E	0xF3C92100  UBFX	R1, R9, #8, #1
0x1A42	0xB121    CBZ	R1, L_ADC_Set_Input_Channel8
;__Lib_ADC_12_32F10x_16ch.c, 59 :: 		
0x1A44	0xF2400101  MOVW	R1, #1
0x1A48	0x4820    LDR	R0, [PC, #128]
0x1A4A	0xF7FEFF95  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel8:
;__Lib_ADC_12_32F10x_16ch.c, 60 :: 		
0x1A4E	0xF3C92140  UBFX	R1, R9, #9, #1
0x1A52	0xB121    CBZ	R1, L_ADC_Set_Input_Channel9
;__Lib_ADC_12_32F10x_16ch.c, 61 :: 		
0x1A54	0xF2400102  MOVW	R1, #2
0x1A58	0x481C    LDR	R0, [PC, #112]
0x1A5A	0xF7FEFF8D  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel9:
;__Lib_ADC_12_32F10x_16ch.c, 62 :: 		
0x1A5E	0xF3C92180  UBFX	R1, R9, #10, #1
0x1A62	0xB121    CBZ	R1, L_ADC_Set_Input_Channel10
;__Lib_ADC_12_32F10x_16ch.c, 63 :: 		
0x1A64	0xF2400101  MOVW	R1, #1
0x1A68	0x4819    LDR	R0, [PC, #100]
0x1A6A	0xF7FEFF85  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel10:
;__Lib_ADC_12_32F10x_16ch.c, 64 :: 		
0x1A6E	0xF3C921C0  UBFX	R1, R9, #11, #1
0x1A72	0xB121    CBZ	R1, L_ADC_Set_Input_Channel11
;__Lib_ADC_12_32F10x_16ch.c, 65 :: 		
0x1A74	0xF2400102  MOVW	R1, #2
0x1A78	0x4815    LDR	R0, [PC, #84]
0x1A7A	0xF7FEFF7D  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel11:
;__Lib_ADC_12_32F10x_16ch.c, 66 :: 		
0x1A7E	0xF3C93100  UBFX	R1, R9, #12, #1
0x1A82	0xB121    CBZ	R1, L_ADC_Set_Input_Channel12
;__Lib_ADC_12_32F10x_16ch.c, 67 :: 		
0x1A84	0xF2400104  MOVW	R1, #4
0x1A88	0x4811    LDR	R0, [PC, #68]
0x1A8A	0xF7FEFF75  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel12:
;__Lib_ADC_12_32F10x_16ch.c, 68 :: 		
0x1A8E	0xF3C93140  UBFX	R1, R9, #13, #1
0x1A92	0xB121    CBZ	R1, L_ADC_Set_Input_Channel13
;__Lib_ADC_12_32F10x_16ch.c, 69 :: 		
0x1A94	0xF2400108  MOVW	R1, #8
0x1A98	0x480D    LDR	R0, [PC, #52]
0x1A9A	0xF7FEFF6D  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel13:
;__Lib_ADC_12_32F10x_16ch.c, 70 :: 		
0x1A9E	0xF3C93180  UBFX	R1, R9, #14, #1
0x1AA2	0xB121    CBZ	R1, L_ADC_Set_Input_Channel14
;__Lib_ADC_12_32F10x_16ch.c, 71 :: 		
0x1AA4	0xF2400110  MOVW	R1, #16
0x1AA8	0x4809    LDR	R0, [PC, #36]
0x1AAA	0xF7FEFF65  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel14:
;__Lib_ADC_12_32F10x_16ch.c, 72 :: 		
0x1AAE	0xF3C931C0  UBFX	R1, R9, #15, #1
; input_mask end address is: 36 (R9)
0x1AB2	0xB121    CBZ	R1, L_ADC_Set_Input_Channel15
;__Lib_ADC_12_32F10x_16ch.c, 73 :: 		
0x1AB4	0xF2400120  MOVW	R1, #32
0x1AB8	0x4805    LDR	R0, [PC, #20]
0x1ABA	0xF7FEFF5D  BL	_GPIO_Analog_Input+0
L_ADC_Set_Input_Channel15:
;__Lib_ADC_12_32F10x_16ch.c, 74 :: 		
L_end_ADC_Set_Input_Channel:
0x1ABE	0xF8DDE000  LDR	LR, [SP, #0]
0x1AC2	0xB001    ADD	SP, SP, #4
0x1AC4	0x4770    BX	LR
0x1AC6	0xBF00    NOP
0x1AC8	0x08004001  	GPIOA_BASE+0
0x1ACC	0x0C004001  	GPIOB_BASE+0
0x1AD0	0x10004001  	GPIOC_BASE+0
; end of _ADC_Set_Input_Channel
_GPIO_Analog_Input:
;__Lib_GPIO_32F10x.c, 373 :: 		
; pin_mask start address is: 4 (R1)
; port start address is: 0 (R0)
0x0978	0xB081    SUB	SP, SP, #4
0x097A	0xF8CDE000  STR	LR, [SP, #0]
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; pin_mask start address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 374 :: 		
0x097E	0xF04F0201  MOV	R2, #1
0x0982	0xB289    UXTH	R1, R1
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
0x0984	0xF7FFFEFE  BL	_GPIO_Config+0
;__Lib_GPIO_32F10x.c, 375 :: 		
L_end_GPIO_Analog_Input:
0x0988	0xF8DDE000  LDR	LR, [SP, #0]
0x098C	0xB001    ADD	SP, SP, #4
0x098E	0x4770    BX	LR
; end of _GPIO_Analog_Input
_ADC1_Init:
;__Lib_ADC_12_32F10x_16ch.c, 146 :: 		
0x1AD4	0xB081    SUB	SP, SP, #4
0x1AD6	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_ADC_12_32F10x_16ch.c, 147 :: 		
0x1ADA	0x4907    LDR	R1, [PC, #28]
0x1ADC	0x4807    LDR	R0, [PC, #28]
0x1ADE	0x6001    STR	R1, [R0, #0]
;__Lib_ADC_12_32F10x_16ch.c, 149 :: 		
0x1AE0	0x2101    MOVS	R1, #1
0x1AE2	0xB249    SXTB	R1, R1
0x1AE4	0x4806    LDR	R0, [PC, #24]
0x1AE6	0x6001    STR	R1, [R0, #0]
;__Lib_ADC_12_32F10x_16ch.c, 151 :: 		
0x1AE8	0x4806    LDR	R0, [PC, #24]
0x1AEA	0xF7FEFC37  BL	__Lib_ADC_12_32F10x_16ch_ADCx_Init+0
;__Lib_ADC_12_32F10x_16ch.c, 184 :: 		
L_end_ADC1_Init:
0x1AEE	0xF8DDE000  LDR	LR, [SP, #0]
0x1AF2	0xB001    ADD	SP, SP, #4
0x1AF4	0x4770    BX	LR
0x1AF6	0xBF00    NOP
0x1AF8	0x27950000  	_ADC1_Get_Sample+0
0x1AFC	0x09B82000  	_ADC_Get_Sample_Ptr+0
0x1B00	0x03244242  	RCC_APB2ENRbits+0
0x1B04	0x24004001  	ADC1_SR+0
; end of _ADC1_Init
__Lib_ADC_12_32F10x_16ch_ADCx_Init:
;__Lib_ADC_12_32F10x_16ch.c, 76 :: 		
; base start address is: 0 (R0)
0x035C	0xB081    SUB	SP, SP, #4
; base end address is: 0 (R0)
; base start address is: 0 (R0)
;__Lib_ADC_12_32F10x_16ch.c, 80 :: 		
0x035E	0x1D03    ADDS	R3, R0, #4
0x0360	0x681A    LDR	R2, [R3, #0]
0x0362	0x4946    LDR	R1, [PC, #280]
0x0364	0xEA020101  AND	R1, R2, R1, LSL #0
0x0368	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 82 :: 		
0x036A	0xF2000308  ADDW	R3, R0, #8
0x036E	0x681A    LDR	R2, [R3, #0]
0x0370	0x4943    LDR	R1, [PC, #268]
0x0372	0xEA020101  AND	R1, R2, R1, LSL #0
0x0376	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 84 :: 		
0x0378	0x1D03    ADDS	R3, R0, #4
0x037A	0x2200    MOVS	R2, #0
0x037C	0x6819    LDR	R1, [R3, #0]
0x037E	0xF3624110  BFI	R1, R2, #16, #1
0x0382	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 85 :: 		
0x0384	0x1D03    ADDS	R3, R0, #4
0x0386	0x2200    MOVS	R2, #0
0x0388	0x6819    LDR	R1, [R3, #0]
0x038A	0xF3624151  BFI	R1, R2, #17, #1
0x038E	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 86 :: 		
0x0390	0x1D03    ADDS	R3, R0, #4
0x0392	0x2200    MOVS	R2, #0
0x0394	0x6819    LDR	R1, [R3, #0]
0x0396	0xF3624192  BFI	R1, R2, #18, #1
0x039A	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 87 :: 		
0x039C	0x1D03    ADDS	R3, R0, #4
0x039E	0x2200    MOVS	R2, #0
0x03A0	0x6819    LDR	R1, [R3, #0]
0x03A2	0xF36241D3  BFI	R1, R2, #19, #1
0x03A6	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 89 :: 		
0x03A8	0x1D03    ADDS	R3, R0, #4
0x03AA	0x2200    MOVS	R2, #0
0x03AC	0x6819    LDR	R1, [R3, #0]
0x03AE	0xF3622108  BFI	R1, R2, #8, #1
0x03B2	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 92 :: 		
0x03B4	0xF2000308  ADDW	R3, R0, #8
0x03B8	0x2200    MOVS	R2, #0
0x03BA	0x6819    LDR	R1, [R3, #0]
0x03BC	0xF3620141  BFI	R1, R2, #1, #1
0x03C0	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 94 :: 		
0x03C2	0xF2000308  ADDW	R3, R0, #8
0x03C6	0x2200    MOVS	R2, #0
0x03C8	0x6819    LDR	R1, [R3, #0]
0x03CA	0xF36221CB  BFI	R1, R2, #11, #1
0x03CE	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 96 :: 		
0x03D0	0xF2000308  ADDW	R3, R0, #8
0x03D4	0x2201    MOVS	R2, #1
0x03D6	0x6819    LDR	R1, [R3, #0]
0x03D8	0xF3624151  BFI	R1, R2, #17, #1
0x03DC	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 97 :: 		
0x03DE	0xF2000308  ADDW	R3, R0, #8
0x03E2	0x2201    MOVS	R2, #1
0x03E4	0x6819    LDR	R1, [R3, #0]
0x03E6	0xF3624192  BFI	R1, R2, #18, #1
0x03EA	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 98 :: 		
0x03EC	0xF2000308  ADDW	R3, R0, #8
0x03F0	0x2201    MOVS	R2, #1
0x03F2	0x6819    LDR	R1, [R3, #0]
0x03F4	0xF36241D3  BFI	R1, R2, #19, #1
0x03F8	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 101 :: 		
0x03FA	0xF200032C  ADDW	R3, R0, #44
0x03FE	0x2200    MOVS	R2, #0
0x0400	0x6819    LDR	R1, [R3, #0]
0x0402	0xF3625114  BFI	R1, R2, #20, #1
0x0406	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 102 :: 		
0x0408	0xF200032C  ADDW	R3, R0, #44
0x040C	0x2200    MOVS	R2, #0
0x040E	0x6819    LDR	R1, [R3, #0]
0x0410	0xF3625155  BFI	R1, R2, #21, #1
0x0414	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 103 :: 		
0x0416	0xF200032C  ADDW	R3, R0, #44
0x041A	0x2200    MOVS	R2, #0
0x041C	0x6819    LDR	R1, [R3, #0]
0x041E	0xF3625196  BFI	R1, R2, #22, #1
0x0422	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 104 :: 		
0x0424	0xF200032C  ADDW	R3, R0, #44
0x0428	0x2200    MOVS	R2, #0
0x042A	0x6819    LDR	R1, [R3, #0]
0x042C	0xF36251D7  BFI	R1, R2, #23, #1
0x0430	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 110 :: 		
0x0432	0xF2000308  ADDW	R3, R0, #8
0x0436	0x2201    MOVS	R2, #1
0x0438	0x6819    LDR	R1, [R3, #0]
0x043A	0xF3620100  BFI	R1, R2, #0, #1
0x043E	0x6019    STR	R1, [R3, #0]
;__Lib_ADC_12_32F10x_16ch.c, 113 :: 		
0x0440	0xF2000308  ADDW	R3, R0, #8
0x0444	0x2201    MOVS	R2, #1
0x0446	0x6819    LDR	R1, [R3, #0]
0x0448	0xF36201C3  BFI	R1, R2, #3, #1
0x044C	0x6019    STR	R1, [R3, #0]
; base end address is: 0 (R0)
;__Lib_ADC_12_32F10x_16ch.c, 114 :: 		
L___Lib_ADC_12_32F10x_16ch_ADCx_Init16:
; base start address is: 0 (R0)
0x044E	0xF2000108  ADDW	R1, R0, #8
0x0452	0x680A    LDR	R2, [R1, #0]
0x0454	0xF3C201C0  UBFX	R1, R2, #3, #1
0x0458	0xB101    CBZ	R1, L___Lib_ADC_12_32F10x_16ch_ADCx_Init17
0x045A	0xE7F8    B	L___Lib_ADC_12_32F10x_16ch_ADCx_Init16
L___Lib_ADC_12_32F10x_16ch_ADCx_Init17:
;__Lib_ADC_12_32F10x_16ch.c, 117 :: 		
0x045C	0xF2000308  ADDW	R3, R0, #8
0x0460	0x2201    MOVS	R2, #1
0x0462	0x6819    LDR	R1, [R3, #0]
0x0464	0xF3620182  BFI	R1, R2, #2, #1
0x0468	0x6019    STR	R1, [R3, #0]
; base end address is: 0 (R0)
;__Lib_ADC_12_32F10x_16ch.c, 118 :: 		
L___Lib_ADC_12_32F10x_16ch_ADCx_Init18:
; base start address is: 0 (R0)
0x046A	0xF2000108  ADDW	R1, R0, #8
0x046E	0x680A    LDR	R2, [R1, #0]
0x0470	0xF3C20180  UBFX	R1, R2, #2, #1
0x0474	0xB101    CBZ	R1, L___Lib_ADC_12_32F10x_16ch_ADCx_Init19
; base end address is: 0 (R0)
0x0476	0xE7F8    B	L___Lib_ADC_12_32F10x_16ch_ADCx_Init18
L___Lib_ADC_12_32F10x_16ch_ADCx_Init19:
;__Lib_ADC_12_32F10x_16ch.c, 120 :: 		
L_end_ADCx_Init:
0x0478	0xB001    ADD	SP, SP, #4
0x047A	0x4770    BX	LR
0x047C	0xFEFFFFF0  	#-983297
0x0480	0xF7FDFFF1  	#-919555
; end of __Lib_ADC_12_32F10x_16ch_ADCx_Init
_matrixrgb_init:
;matrixrgb_hw.c, 75 :: 		void matrixrgb_init( char level, uint8_t width, uint8_t height )
0x1B08	0xB084    SUB	SP, SP, #16
0x1B0A	0xF8CDE000  STR	LR, [SP, #0]
0x1B0E	0xF88D0004  STRB	R0, [SP, #4]
0x1B12	0xF88D1008  STRB	R1, [SP, #8]
0x1B16	0xF88D200C  STRB	R2, [SP, #12]
;matrixrgb_hw.c, 77 :: 		matrixrgb_hal_init();
0x1B1A	0xF7FEFC05  BL	_matrixrgb_hal_init+0
;matrixrgb_hw.c, 78 :: 		Delay_ms(300);
0x1B1E	0xF64E677F  MOVW	R7, #61055
0x1B22	0xF2C00736  MOVT	R7, #54
0x1B26	0xBF00    NOP
0x1B28	0xBF00    NOP
L_matrixrgb_init0:
0x1B2A	0x1E7F    SUBS	R7, R7, #1
0x1B2C	0xD1FD    BNE	L_matrixrgb_init0
0x1B2E	0xBF00    NOP
0x1B30	0xBF00    NOP
0x1B32	0xBF00    NOP
;matrixrgb_hw.c, 80 :: 		spi_buffer[0] = SETUP_CMD;
0x1B34	0x2401    MOVS	R4, #1
0x1B36	0x4B0D    LDR	R3, [PC, #52]
0x1B38	0x701C    STRB	R4, [R3, #0]
;matrixrgb_hw.c, 81 :: 		matrixrgb_hal_write( &spi_buffer, 1 );
0x1B3A	0x2101    MOVS	R1, #1
0x1B3C	0x480B    LDR	R0, [PC, #44]
0x1B3E	0xF7FEFD4D  BL	_matrixrgb_hal_write+0
;matrixrgb_hw.c, 82 :: 		spi_buffer[0] = level;
0x1B42	0xF89D4004  LDRB	R4, [SP, #4]
0x1B46	0x4B09    LDR	R3, [PC, #36]
0x1B48	0x701C    STRB	R4, [R3, #0]
;matrixrgb_hw.c, 83 :: 		spi_buffer[1] = width;
0x1B4A	0xF89D4008  LDRB	R4, [SP, #8]
0x1B4E	0x4B08    LDR	R3, [PC, #32]
0x1B50	0x701C    STRB	R4, [R3, #0]
;matrixrgb_hw.c, 84 :: 		spi_buffer[2] = height;
0x1B52	0xF89D400C  LDRB	R4, [SP, #12]
0x1B56	0x4B07    LDR	R3, [PC, #28]
0x1B58	0x701C    STRB	R4, [R3, #0]
;matrixrgb_hw.c, 85 :: 		matrixrgb_hal_write( &spi_buffer, 3 );
0x1B5A	0x2103    MOVS	R1, #3
0x1B5C	0x4803    LDR	R0, [PC, #12]
0x1B5E	0xF7FEFD3D  BL	_matrixrgb_hal_write+0
;matrixrgb_hw.c, 87 :: 		}
L_end_matrixrgb_init:
0x1B62	0xF8DDE000  LDR	LR, [SP, #0]
0x1B66	0xB004    ADD	SP, SP, #16
0x1B68	0x4770    BX	LR
0x1B6A	0xBF00    NOP
0x1B6C	0x08182000  	matrixrgb_hw_spi_buffer+0
0x1B70	0x08192000  	matrixrgb_hw_spi_buffer+1
0x1B74	0x081A2000  	matrixrgb_hw_spi_buffer+2
; end of _matrixrgb_init
_matrixrgb_hal_init:
;matrixrgb_hal.c, 90 :: 		void matrixrgb_hal_init()
0x0328	0xB081    SUB	SP, SP, #4
0x032A	0xF8CDE000  STR	LR, [SP, #0]
;matrixrgb_hal.c, 97 :: 		write_spi_p             = SPI_Wr_Ptr;
0x032E	0x4807    LDR	R0, [PC, #28]
0x0330	0x6801    LDR	R1, [R0, #0]
0x0332	0x4807    LDR	R0, [PC, #28]
0x0334	0x6001    STR	R1, [R0, #0]
;matrixrgb_hal.c, 98 :: 		read_spi_p              = SPI_Rd_Ptr;
0x0336	0x4807    LDR	R0, [PC, #28]
0x0338	0x6801    LDR	R1, [R0, #0]
0x033A	0x4807    LDR	R0, [PC, #28]
0x033C	0x6001    STR	R1, [R0, #0]
;matrixrgb_hal.c, 111 :: 		matrixrgb_hal_cs_high();
0x033E	0xF7FFFF6D  BL	_matrixrgb_hal_cs_high+0
;matrixrgb_hal.c, 113 :: 		}
L_end_matrixrgb_hal_init:
0x0342	0xF8DDE000  LDR	LR, [SP, #0]
0x0346	0xB001    ADD	SP, SP, #4
0x0348	0x4770    BX	LR
0x034A	0xBF00    NOP
0x034C	0x09AC2000  	_SPI_Wr_Ptr+0
0x0350	0x09A82000  	matrixrgb_hal_write_spi_p+0
0x0354	0x09B42000  	_SPI_Rd_Ptr+0
0x0358	0x09B02000  	matrixrgb_hal_read_spi_p+0
; end of _matrixrgb_hal_init
_matrixrgb_hal_cs_high:
;matrixrgb_hal.c, 80 :: 		void matrixrgb_hal_cs_high()
;matrixrgb_hal.c, 82 :: 		MATRIXRGB_CS = 1;
0x021C	0x2101    MOVS	R1, #1
0x021E	0xB249    SXTB	R1, R1
0x0220	0x4801    LDR	R0, [PC, #4]
0x0222	0x6001    STR	R1, [R0, #0]
;matrixrgb_hal.c, 83 :: 		}
L_end_matrixrgb_hal_cs_high:
0x0224	0x4770    BX	LR
0x0226	0xBF00    NOP
0x0228	0x81B44222  	MATRIXRGB_CS+0
; end of _matrixrgb_hal_cs_high
_matrixrgb_hal_write:
;matrixrgb_hal.c, 116 :: 		uint16_t count )
0x05DC	0xB083    SUB	SP, SP, #12
0x05DE	0xF8CDE000  STR	LR, [SP, #0]
0x05E2	0x9001    STR	R0, [SP, #4]
0x05E4	0xF8AD1008  STRH	R1, [SP, #8]
;matrixrgb_hal.c, 119 :: 		while( MATRIXRGB_READY != 1 )
L_matrixrgb_hal_write0:
0x05E8	0x4B0F    LDR	R3, [PC, #60]
0x05EA	0x681A    LDR	R2, [R3, #0]
0x05EC	0xB902    CBNZ	R2, L_matrixrgb_hal_write1
;matrixrgb_hal.c, 122 :: 		}  //Wait till slave is ready
0x05EE	0xE7FB    B	L_matrixrgb_hal_write0
L_matrixrgb_hal_write1:
;matrixrgb_hal.c, 124 :: 		while( count-- )
L_matrixrgb_hal_write2:
0x05F0	0xF8BD3008  LDRH	R3, [SP, #8]
0x05F4	0xF8BD2008  LDRH	R2, [SP, #8]
0x05F8	0x1E52    SUBS	R2, R2, #1
0x05FA	0xF8AD2008  STRH	R2, [SP, #8]
0x05FE	0xB173    CBZ	R3, L_matrixrgb_hal_write3
;matrixrgb_hal.c, 126 :: 		matrixrgb_hal_cs_low();
0x0600	0xF7FFFE6E  BL	_matrixrgb_hal_cs_low+0
;matrixrgb_hal.c, 127 :: 		write_spi_p( *( buffer++ ) );
0x0604	0x9A01    LDR	R2, [SP, #4]
0x0606	0x7812    LDRB	R2, [R2, #0]
0x0608	0xB2D4    UXTB	R4, R2
0x060A	0xB2A0    UXTH	R0, R4
0x060C	0x4C07    LDR	R4, [PC, #28]
0x060E	0x6824    LDR	R4, [R4, #0]
0x0610	0x47A0    BLX	R4
0x0612	0x9A01    LDR	R2, [SP, #4]
0x0614	0x1C52    ADDS	R2, R2, #1
0x0616	0x9201    STR	R2, [SP, #4]
;matrixrgb_hal.c, 128 :: 		matrixrgb_hal_cs_high();
0x0618	0xF7FFFE00  BL	_matrixrgb_hal_cs_high+0
;matrixrgb_hal.c, 129 :: 		}
0x061C	0xE7E8    B	L_matrixrgb_hal_write2
L_matrixrgb_hal_write3:
;matrixrgb_hal.c, 131 :: 		}
L_end_matrixrgb_hal_write:
0x061E	0xF8DDE000  LDR	LR, [SP, #0]
0x0622	0xB003    ADD	SP, SP, #12
0x0624	0x4770    BX	LR
0x0626	0xBF00    NOP
0x0628	0x81284222  	MATRIXRGB_READY+0
0x062C	0x09A82000  	matrixrgb_hal_write_spi_p+0
; end of _matrixrgb_hal_write
_SPI1_Write:
;__Lib_SPI_123.c, 78 :: 		
; data_out start address is: 0 (R0)
0x02C4	0xB081    SUB	SP, SP, #4
0x02C6	0xF8CDE000  STR	LR, [SP, #0]
; data_out end address is: 0 (R0)
; data_out start address is: 0 (R0)
;__Lib_SPI_123.c, 79 :: 		
0x02CA	0xB281    UXTH	R1, R0
; data_out end address is: 0 (R0)
0x02CC	0x4803    LDR	R0, [PC, #12]
0x02CE	0xF7FFFF3F  BL	__Lib_SPI_123_SPIx_Read+0
;__Lib_SPI_123.c, 80 :: 		
L_end_SPI1_Write:
0x02D2	0xF8DDE000  LDR	LR, [SP, #0]
0x02D6	0xB001    ADD	SP, SP, #4
0x02D8	0x4770    BX	LR
0x02DA	0xBF00    NOP
0x02DC	0x30004001  	SPI1_CR1+0
; end of _SPI1_Write
__Lib_SPI_123_SPIx_Read:
;__Lib_SPI_123.c, 67 :: 		
; data_out start address is: 4 (R1)
; base start address is: 0 (R0)
0x0150	0xB081    SUB	SP, SP, #4
; data_out end address is: 4 (R1)
; base end address is: 0 (R0)
; base start address is: 0 (R0)
; data_out start address is: 4 (R1)
;__Lib_SPI_123.c, 68 :: 		
0x0152	0xF200020C  ADDW	R2, R0, #12
0x0156	0x6011    STR	R1, [R2, #0]
; data_out end address is: 4 (R1)
; base end address is: 0 (R0)
;__Lib_SPI_123.c, 69 :: 		
L___Lib_SPI_123_SPIx_Read0:
; base start address is: 0 (R0)
0x0158	0xF2000208  ADDW	R2, R0, #8
0x015C	0x6813    LDR	R3, [R2, #0]
0x015E	0xF3C30200  UBFX	R2, R3, #0, #1
0x0162	0xB902    CBNZ	R2, L___Lib_SPI_123_SPIx_Read1
;__Lib_SPI_123.c, 70 :: 		
0x0164	0xE7F8    B	L___Lib_SPI_123_SPIx_Read0
L___Lib_SPI_123_SPIx_Read1:
;__Lib_SPI_123.c, 71 :: 		
0x0166	0xF200020C  ADDW	R2, R0, #12
; base end address is: 0 (R0)
0x016A	0x6812    LDR	R2, [R2, #0]
0x016C	0xB290    UXTH	R0, R2
;__Lib_SPI_123.c, 72 :: 		
L_end_SPIx_Read:
0x016E	0xB001    ADD	SP, SP, #4
0x0170	0x4770    BX	LR
; end of __Lib_SPI_123_SPIx_Read
_SPI2_Write:
;__Lib_SPI_123.c, 103 :: 		
; data_out start address is: 0 (R0)
0x0200	0xB081    SUB	SP, SP, #4
0x0202	0xF8CDE000  STR	LR, [SP, #0]
; data_out end address is: 0 (R0)
; data_out start address is: 0 (R0)
;__Lib_SPI_123.c, 104 :: 		
0x0206	0xB281    UXTH	R1, R0
; data_out end address is: 0 (R0)
0x0208	0x4803    LDR	R0, [PC, #12]
0x020A	0xF7FFFFA1  BL	__Lib_SPI_123_SPIx_Read+0
;__Lib_SPI_123.c, 105 :: 		
L_end_SPI2_Write:
0x020E	0xF8DDE000  LDR	LR, [SP, #0]
0x0212	0xB001    ADD	SP, SP, #4
0x0214	0x4770    BX	LR
0x0216	0xBF00    NOP
0x0218	0x38004000  	SPI2_CR1+0
; end of _SPI2_Write
_SPI3_Write:
;__Lib_SPI_123.c, 129 :: 		
; data_out start address is: 0 (R0)
0x02F0	0xB081    SUB	SP, SP, #4
0x02F2	0xF8CDE000  STR	LR, [SP, #0]
; data_out end address is: 0 (R0)
; data_out start address is: 0 (R0)
;__Lib_SPI_123.c, 130 :: 		
0x02F6	0xB281    UXTH	R1, R0
; data_out end address is: 0 (R0)
0x02F8	0x4803    LDR	R0, [PC, #12]
0x02FA	0xF7FFFF29  BL	__Lib_SPI_123_SPIx_Read+0
;__Lib_SPI_123.c, 131 :: 		
L_end_SPI3_Write:
0x02FE	0xF8DDE000  LDR	LR, [SP, #0]
0x0302	0xB001    ADD	SP, SP, #4
0x0304	0x4770    BX	LR
0x0306	0xBF00    NOP
0x0308	0x3C004000  	SPI3_CR1+0
; end of _SPI3_Write
_matrixrgb_hal_cs_low:
;matrixrgb_hal.c, 85 :: 		void matrixrgb_hal_cs_low()
;matrixrgb_hal.c, 87 :: 		MATRIXRGB_CS = 0;
0x02E0	0x2100    MOVS	R1, #0
0x02E2	0xB249    SXTB	R1, R1
0x02E4	0x4801    LDR	R0, [PC, #4]
0x02E6	0x6001    STR	R1, [R0, #0]
;matrixrgb_hal.c, 88 :: 		}
L_end_matrixrgb_hal_cs_low:
0x02E8	0x4770    BX	LR
0x02EA	0xBF00    NOP
0x02EC	0x81B44222  	MATRIXRGB_CS+0
; end of _matrixrgb_hal_cs_low
_InitTimer2:
;MatrixRGB_Demo_Project.c, 863 :: 		void InitTimer2() {
0x1B94	0xB081    SUB	SP, SP, #4
0x1B96	0xF8CDE000  STR	LR, [SP, #0]
;MatrixRGB_Demo_Project.c, 864 :: 		RCC_APB1ENR.TIM2EN = 1;
0x1B9A	0x2101    MOVS	R1, #1
0x1B9C	0xB249    SXTB	R1, R1
0x1B9E	0x480D    LDR	R0, [PC, #52]
0x1BA0	0x6001    STR	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 865 :: 		TIM2_CR1.CEN = 0;
0x1BA2	0x2100    MOVS	R1, #0
0x1BA4	0xB249    SXTB	R1, R1
0x1BA6	0x480C    LDR	R0, [PC, #48]
0x1BA8	0x6001    STR	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 866 :: 		TIM2_PSC = 0;
0x1BAA	0x2100    MOVS	R1, #0
0x1BAC	0x480B    LDR	R0, [PC, #44]
0x1BAE	0x6001    STR	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 867 :: 		TIM2_ARR = 7199;
0x1BB0	0xF641411F  MOVW	R1, #7199
0x1BB4	0x480A    LDR	R0, [PC, #40]
0x1BB6	0x6001    STR	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 868 :: 		NVIC_IntEnable(IVT_INT_TIM2);
0x1BB8	0xF240002C  MOVW	R0, #44
0x1BBC	0xF7FEFC9E  BL	_NVIC_IntEnable+0
;MatrixRGB_Demo_Project.c, 869 :: 		TIM2_DIER.UIE = 1;
0x1BC0	0x2101    MOVS	R1, #1
0x1BC2	0xB249    SXTB	R1, R1
0x1BC4	0x4807    LDR	R0, [PC, #28]
0x1BC6	0x6001    STR	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 870 :: 		TIM2_CR1.CEN = 1;
0x1BC8	0x4803    LDR	R0, [PC, #12]
0x1BCA	0x6001    STR	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 871 :: 		}
L_end_InitTimer2:
0x1BCC	0xF8DDE000  LDR	LR, [SP, #0]
0x1BD0	0xB001    ADD	SP, SP, #4
0x1BD2	0x4770    BX	LR
0x1BD4	0x03804242  	RCC_APB1ENR+0
0x1BD8	0x00004200  	TIM2_CR1+0
0x1BDC	0x00284000  	TIM2_PSC+0
0x1BE0	0x002C4000  	TIM2_ARR+0
0x1BE4	0x01804200  	TIM2_DIER+0
; end of _InitTimer2
_NVIC_IntEnable:
;__Lib_System_105_107.c, 155 :: 		
; ivt start address is: 0 (R0)
0x04FC	0xB081    SUB	SP, SP, #4
; ivt end address is: 0 (R0)
; ivt start address is: 0 (R0)
;__Lib_System_105_107.c, 167 :: 		
0x04FE	0x2804    CMP	R0, #4
0x0500	0xD106    BNE	L_NVIC_IntEnable6
; ivt end address is: 0 (R0)
;__Lib_System_105_107.c, 172 :: 		
0x0502	0x4919    LDR	R1, [PC, #100]
0x0504	0x6809    LDR	R1, [R1, #0]
0x0506	0xF4413280  ORR	R2, R1, #65536
0x050A	0x4917    LDR	R1, [PC, #92]
0x050C	0x600A    STR	R2, [R1, #0]
;__Lib_System_105_107.c, 173 :: 		
0x050E	0xE028    B	L_NVIC_IntEnable7
L_NVIC_IntEnable6:
;__Lib_System_105_107.c, 174 :: 		
; ivt start address is: 0 (R0)
0x0510	0x2805    CMP	R0, #5
0x0512	0xD106    BNE	L_NVIC_IntEnable8
; ivt end address is: 0 (R0)
;__Lib_System_105_107.c, 179 :: 		
0x0514	0x4914    LDR	R1, [PC, #80]
0x0516	0x6809    LDR	R1, [R1, #0]
0x0518	0xF4413200  ORR	R2, R1, #131072
0x051C	0x4912    LDR	R1, [PC, #72]
0x051E	0x600A    STR	R2, [R1, #0]
;__Lib_System_105_107.c, 180 :: 		
0x0520	0xE01F    B	L_NVIC_IntEnable9
L_NVIC_IntEnable8:
;__Lib_System_105_107.c, 181 :: 		
; ivt start address is: 0 (R0)
0x0522	0x2806    CMP	R0, #6
0x0524	0xD106    BNE	L_NVIC_IntEnable10
; ivt end address is: 0 (R0)
;__Lib_System_105_107.c, 186 :: 		
0x0526	0x4910    LDR	R1, [PC, #64]
0x0528	0x6809    LDR	R1, [R1, #0]
0x052A	0xF4412280  ORR	R2, R1, #262144
0x052E	0x490E    LDR	R1, [PC, #56]
0x0530	0x600A    STR	R2, [R1, #0]
;__Lib_System_105_107.c, 187 :: 		
0x0532	0xE016    B	L_NVIC_IntEnable11
L_NVIC_IntEnable10:
;__Lib_System_105_107.c, 188 :: 		
; ivt start address is: 0 (R0)
0x0534	0x280F    CMP	R0, #15
0x0536	0xD106    BNE	L_NVIC_IntEnable12
; ivt end address is: 0 (R0)
;__Lib_System_105_107.c, 193 :: 		
0x0538	0x490C    LDR	R1, [PC, #48]
0x053A	0x6809    LDR	R1, [R1, #0]
0x053C	0xF0410202  ORR	R2, R1, #2
0x0540	0x490A    LDR	R1, [PC, #40]
0x0542	0x600A    STR	R2, [R1, #0]
;__Lib_System_105_107.c, 194 :: 		
0x0544	0xE00D    B	L_NVIC_IntEnable13
L_NVIC_IntEnable12:
;__Lib_System_105_107.c, 195 :: 		
; ivt start address is: 0 (R0)
0x0546	0x2810    CMP	R0, #16
0x0548	0xD30B    BCC	L_NVIC_IntEnable14
;__Lib_System_105_107.c, 200 :: 		
0x054A	0xF2A00410  SUBW	R4, R0, #16
; ivt end address is: 0 (R0)
0x054E	0x0961    LSRS	R1, R4, #5
0x0550	0x008A    LSLS	R2, R1, #2
0x0552	0x4907    LDR	R1, [PC, #28]
0x0554	0x188B    ADDS	R3, R1, R2
;__Lib_System_105_107.c, 201 :: 		
0x0556	0xF004021F  AND	R2, R4, #31
0x055A	0xF04F0101  MOV	R1, #1
0x055E	0x4091    LSLS	R1, R2
0x0560	0x6019    STR	R1, [R3, #0]
;__Lib_System_105_107.c, 202 :: 		
L_NVIC_IntEnable14:
L_NVIC_IntEnable13:
L_NVIC_IntEnable11:
L_NVIC_IntEnable9:
L_NVIC_IntEnable7:
;__Lib_System_105_107.c, 203 :: 		
L_end_NVIC_IntEnable:
0x0562	0xB001    ADD	SP, SP, #4
0x0564	0x4770    BX	LR
0x0566	0xBF00    NOP
0x0568	0xED24E000  	SCB_SHCRS+0
0x056C	0xE010E000  	STK_CTRL+0
0x0570	0xE100E000  	NVIC_ISER0+0
; end of _NVIC_IntEnable
_wait_for_choice:
;MatrixRGB_Demo_Project.c, 298 :: 		void wait_for_choice( void )
;MatrixRGB_Demo_Project.c, 300 :: 		bool waiting = true;
;MatrixRGB_Demo_Project.c, 321 :: 		g_ball_speed = 1;                                           /**< If AUTOPLAY is defined, ball speed is set to 2 */
0x26EC	0x2101    MOVS	R1, #1
0x26EE	0x4801    LDR	R0, [PC, #4]
0x26F0	0x8001    STRH	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 323 :: 		}
L_end_wait_for_choice:
0x26F2	0x4770    BX	LR
0x26F4	0x00002000  	_g_ball_speed+0
; end of _wait_for_choice
_matrixrgb_clear_screen:
;matrixrgb_hw.c, 327 :: 		void matrixrgb_clear_screen( void )
0x26F8	0xB081    SUB	SP, SP, #4
0x26FA	0xF8CDE000  STR	LR, [SP, #0]
;matrixrgb_hw.c, 329 :: 		spi_buffer[0] = CLR_SCRN_CMD;
0x26FE	0x2113    MOVS	R1, #19
0x2700	0x4804    LDR	R0, [PC, #16]
0x2702	0x7001    STRB	R1, [R0, #0]
;matrixrgb_hw.c, 330 :: 		matrixrgb_hal_write( &spi_buffer, 1 );
0x2704	0x2101    MOVS	R1, #1
0x2706	0x4803    LDR	R0, [PC, #12]
0x2708	0xF7FDFF68  BL	_matrixrgb_hal_write+0
;matrixrgb_hw.c, 332 :: 		}
L_end_matrixrgb_clear_screen:
0x270C	0xF8DDE000  LDR	LR, [SP, #0]
0x2710	0xB001    ADD	SP, SP, #4
0x2712	0x4770    BX	LR
0x2714	0x08182000  	matrixrgb_hw_spi_buffer+0
; end of _matrixrgb_clear_screen
_setup_gameboard:
;MatrixRGB_Demo_Project.c, 737 :: 		void setup_gameboard( void )
0x281C	0xB083    SUB	SP, SP, #12
0x281E	0xF8CDE000  STR	LR, [SP, #0]
;MatrixRGB_Demo_Project.c, 742 :: 		matrixrgb_set_color( &brick_color, 0, 0, 1 );          /**< Draws entire game board, setting up array of bricks and setting all to active */
0x2822	0xA802    ADD	R0, SP, #8
0x2824	0x2301    MOVS	R3, #1
0x2826	0x2200    MOVS	R2, #0
0x2828	0x2100    MOVS	R1, #0
0x282A	0xF7FFFF9D  BL	_matrixrgb_set_color+0
;MatrixRGB_Demo_Project.c, 743 :: 		for ( i = 0 + offset, j = 0; i <= 28 + offset; i += 4, j++ )
0x282E	0x48DB    LDR	R0, [PC, #876]
0x2830	0x7800    LDRB	R0, [R0, #0]
; i start address is: 16 (R4)
0x2832	0xB2C4    UXTB	R4, R0
; j start address is: 20 (R5)
0x2834	0x2500    MOVS	R5, #0
; i end address is: 16 (R4)
; j end address is: 20 (R5)
L_setup_gameboard236:
; j start address is: 20 (R5)
; i start address is: 16 (R4)
0x2836	0x48D9    LDR	R0, [PC, #868]
0x2838	0x7800    LDRB	R0, [R0, #0]
0x283A	0x301C    ADDS	R0, #28
0x283C	0xB200    SXTH	R0, R0
0x283E	0x4284    CMP	R4, R0
0x2840	0xDC5A    BGT	L_setup_gameboard237
;MatrixRGB_Demo_Project.c, 745 :: 		bricks[j].color  = brick_color;
0x2842	0x2006    MOVS	R0, #6
0x2844	0xFB00F105  MUL	R1, R0, R5
0x2848	0x48D5    LDR	R0, [PC, #852]
0x284A	0x1840    ADDS	R0, R0, R1
0x284C	0xF04F0303  MOV	R3, #3
0x2850	0x4602    MOV	R2, R0
0x2852	0xA902    ADD	R1, SP, #8
0x2854	0xE7FF    B	L_setup_gameboard239
L__setup_gameboard348:
L_setup_gameboard239:
; i start address is: 16 (R4)
; i end address is: 16 (R4)
; j start address is: 20 (R5)
; j end address is: 20 (R5)
0x2856	0x7808    LDRB	R0, [R1, #0]
0x2858	0x7010    STRB	R0, [R2, #0]
0x285A	0x1E5B    SUBS	R3, R3, #1
0x285C	0x1C49    ADDS	R1, R1, #1
0x285E	0x1C52    ADDS	R2, R2, #1
0x2860	0x2B00    CMP	R3, #0
0x2862	0xD1F8    BNE	L__setup_gameboard348
; i end address is: 16 (R4)
; j end address is: 20 (R5)
;MatrixRGB_Demo_Project.c, 746 :: 		bricks[j].col          = i;
; j start address is: 20 (R5)
; i start address is: 16 (R4)
0x2864	0x2006    MOVS	R0, #6
0x2866	0xFB00F105  MUL	R1, R0, R5
0x286A	0x48CD    LDR	R0, [PC, #820]
0x286C	0x1840    ADDS	R0, R0, R1
0x286E	0x1D00    ADDS	R0, R0, #4
0x2870	0x7004    STRB	R4, [R0, #0]
;MatrixRGB_Demo_Project.c, 747 :: 		bricks[j].row          = 0;
0x2872	0x2006    MOVS	R0, #6
0x2874	0xFB00F105  MUL	R1, R0, R5
0x2878	0x48C9    LDR	R0, [PC, #804]
0x287A	0x1840    ADDS	R0, R0, R1
0x287C	0x1CC1    ADDS	R1, R0, #3
0x287E	0x2000    MOVS	R0, #0
0x2880	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 748 :: 		bricks[j].active = true;
0x2882	0x2006    MOVS	R0, #6
0x2884	0xFB00F105  MUL	R1, R0, R5
0x2888	0x48C5    LDR	R0, [PC, #788]
0x288A	0x1840    ADDS	R0, R0, R1
0x288C	0x1D41    ADDS	R1, R0, #5
0x288E	0x2001    MOVS	R0, #1
0x2890	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 749 :: 		for ( k = i; k < ( i + 4 ); k++ )
; k start address is: 8 (R2)
0x2892	0xB2E2    UXTB	R2, R4
; k end address is: 8 (R2)
; i end address is: 16 (R4)
; j end address is: 20 (R5)
0x2894	0xB2E3    UXTB	R3, R4
0x2896	0xB2E9    UXTB	R1, R5
L_setup_gameboard240:
; k start address is: 8 (R2)
; j start address is: 4 (R1)
; i start address is: 12 (R3)
0x2898	0x1D18    ADDS	R0, R3, #4
0x289A	0xB200    SXTH	R0, R0
0x289C	0x4282    CMP	R2, R0
0x289E	0xDA26    BGE	L_setup_gameboard241
;MatrixRGB_Demo_Project.c, 751 :: 		matrixrgb_write_pixel( 0, k, 1, 0, 0 );
0x28A0	0x2000    MOVS	R0, #0
0x28A2	0xF88D3004  STRB	R3, [SP, #4]
0x28A6	0xF88D1005  STRB	R1, [SP, #5]
0x28AA	0xF88D2006  STRB	R2, [SP, #6]
0x28AE	0xB401    PUSH	(R0)
0x28B0	0x2300    MOVS	R3, #0
0x28B2	0xB2D1    UXTB	R1, R2
0x28B4	0x2201    MOVS	R2, #1
0x28B6	0x2000    MOVS	R0, #0
0x28B8	0xB200    SXTH	R0, R0
0x28BA	0xF7FEFF49  BL	_matrixrgb_write_pixel+0
0x28BE	0xB001    ADD	SP, SP, #4
0x28C0	0xF89D2006  LDRB	R2, [SP, #6]
;MatrixRGB_Demo_Project.c, 752 :: 		matrixrgb_write_pixel( 1, k, 1, 0, 0 );
0x28C4	0x2000    MOVS	R0, #0
0x28C6	0xF88D2006  STRB	R2, [SP, #6]
0x28CA	0xB401    PUSH	(R0)
0x28CC	0x2300    MOVS	R3, #0
0x28CE	0xB2D1    UXTB	R1, R2
0x28D0	0x2201    MOVS	R2, #1
0x28D2	0x2001    MOVS	R0, #1
0x28D4	0xB200    SXTH	R0, R0
0x28D6	0xF7FEFF3B  BL	_matrixrgb_write_pixel+0
0x28DA	0xB001    ADD	SP, SP, #4
0x28DC	0xF89D2006  LDRB	R2, [SP, #6]
0x28E0	0xF89D1005  LDRB	R1, [SP, #5]
0x28E4	0xF89D3004  LDRB	R3, [SP, #4]
;MatrixRGB_Demo_Project.c, 749 :: 		for ( k = i; k < ( i + 4 ); k++ )
0x28E8	0x1C52    ADDS	R2, R2, #1
0x28EA	0xB2D2    UXTB	R2, R2
;MatrixRGB_Demo_Project.c, 753 :: 		}
; k end address is: 8 (R2)
0x28EC	0xE7D4    B	L_setup_gameboard240
L_setup_gameboard241:
;MatrixRGB_Demo_Project.c, 743 :: 		for ( i = 0 + offset, j = 0; i <= 28 + offset; i += 4, j++ )
0x28EE	0x1D18    ADDS	R0, R3, #4
; i end address is: 12 (R3)
; i start address is: 16 (R4)
0x28F0	0xB2C4    UXTB	R4, R0
0x28F2	0x1C48    ADDS	R0, R1, #1
; j end address is: 4 (R1)
; j start address is: 20 (R5)
0x28F4	0xB2C5    UXTB	R5, R0
;MatrixRGB_Demo_Project.c, 754 :: 		}
; i end address is: 16 (R4)
0x28F6	0xE79E    B	L_setup_gameboard236
L_setup_gameboard237:
;MatrixRGB_Demo_Project.c, 755 :: 		matrixrgb_set_color( &brick_color, 0, 1, 0 );
0x28F8	0xA802    ADD	R0, SP, #8
0x28FA	0xF88D5004  STRB	R5, [SP, #4]
0x28FE	0x2300    MOVS	R3, #0
0x2900	0x2201    MOVS	R2, #1
0x2902	0x2100    MOVS	R1, #0
0x2904	0xF7FFFF30  BL	_matrixrgb_set_color+0
0x2908	0xF89D5004  LDRB	R5, [SP, #4]
;MatrixRGB_Demo_Project.c, 756 :: 		for ( i = 0 + offset; i <= 28 + offset; i += 4, j++ )
0x290C	0x48A3    LDR	R0, [PC, #652]
0x290E	0x7800    LDRB	R0, [R0, #0]
; i start address is: 4 (R1)
0x2910	0xB2C1    UXTB	R1, R0
; j end address is: 20 (R5)
; i end address is: 4 (R1)
0x2912	0xB2EC    UXTB	R4, R5
0x2914	0xB2CD    UXTB	R5, R1
L_setup_gameboard243:
; i start address is: 20 (R5)
; j start address is: 16 (R4)
0x2916	0x48A1    LDR	R0, [PC, #644]
0x2918	0x7800    LDRB	R0, [R0, #0]
0x291A	0x301C    ADDS	R0, #28
0x291C	0xB200    SXTH	R0, R0
0x291E	0x4285    CMP	R5, R0
0x2920	0xDC58    BGT	L_setup_gameboard244
;MatrixRGB_Demo_Project.c, 758 :: 		bricks[j].color  = brick_color;
0x2922	0x2006    MOVS	R0, #6
0x2924	0xFB00F104  MUL	R1, R0, R4
0x2928	0x489D    LDR	R0, [PC, #628]
0x292A	0x1840    ADDS	R0, R0, R1
0x292C	0xF04F0303  MOV	R3, #3
0x2930	0x4602    MOV	R2, R0
0x2932	0xA902    ADD	R1, SP, #8
0x2934	0xE7FF    B	L_setup_gameboard246
L__setup_gameboard349:
L_setup_gameboard246:
; j start address is: 16 (R4)
; j end address is: 16 (R4)
; i start address is: 20 (R5)
; i end address is: 20 (R5)
0x2936	0x7808    LDRB	R0, [R1, #0]
0x2938	0x7010    STRB	R0, [R2, #0]
0x293A	0x1E5B    SUBS	R3, R3, #1
0x293C	0x1C49    ADDS	R1, R1, #1
0x293E	0x1C52    ADDS	R2, R2, #1
0x2940	0x2B00    CMP	R3, #0
0x2942	0xD1F8    BNE	L__setup_gameboard349
; i end address is: 20 (R5)
; j end address is: 16 (R4)
;MatrixRGB_Demo_Project.c, 759 :: 		bricks[j].col          = i;
; j start address is: 16 (R4)
; i start address is: 20 (R5)
0x2944	0x2006    MOVS	R0, #6
0x2946	0xFB00F104  MUL	R1, R0, R4
0x294A	0x4895    LDR	R0, [PC, #596]
0x294C	0x1840    ADDS	R0, R0, R1
0x294E	0x1D00    ADDS	R0, R0, #4
0x2950	0x7005    STRB	R5, [R0, #0]
;MatrixRGB_Demo_Project.c, 760 :: 		bricks[j].row          = 2;
0x2952	0x2006    MOVS	R0, #6
0x2954	0xFB00F104  MUL	R1, R0, R4
0x2958	0x4891    LDR	R0, [PC, #580]
0x295A	0x1840    ADDS	R0, R0, R1
0x295C	0x1CC1    ADDS	R1, R0, #3
0x295E	0x2002    MOVS	R0, #2
0x2960	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 761 :: 		bricks[j].active = true;
0x2962	0x2006    MOVS	R0, #6
0x2964	0xFB00F104  MUL	R1, R0, R4
0x2968	0x488D    LDR	R0, [PC, #564]
0x296A	0x1840    ADDS	R0, R0, R1
0x296C	0x1D41    ADDS	R1, R0, #5
0x296E	0x2001    MOVS	R0, #1
0x2970	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 762 :: 		for ( k = i; k < ( i + 4 ); k++ )
; k start address is: 4 (R1)
0x2972	0xB2E9    UXTB	R1, R5
; k end address is: 4 (R1)
; i end address is: 20 (R5)
; j end address is: 16 (R4)
0x2974	0xB2E3    UXTB	R3, R4
0x2976	0xB2EA    UXTB	R2, R5
L_setup_gameboard247:
; k start address is: 4 (R1)
; i start address is: 8 (R2)
; j start address is: 12 (R3)
0x2978	0x1D10    ADDS	R0, R2, #4
0x297A	0xB200    SXTH	R0, R0
0x297C	0x4281    CMP	R1, R0
0x297E	0xDA24    BGE	L_setup_gameboard248
;MatrixRGB_Demo_Project.c, 764 :: 		matrixrgb_write_pixel( 2, k, 0, 1, 0 );
0x2980	0x2000    MOVS	R0, #0
0x2982	0xF88D3004  STRB	R3, [SP, #4]
0x2986	0xF88D2005  STRB	R2, [SP, #5]
0x298A	0xF88D1006  STRB	R1, [SP, #6]
0x298E	0xB401    PUSH	(R0)
0x2990	0x2301    MOVS	R3, #1
0x2992	0x2200    MOVS	R2, #0
0x2994	0x2002    MOVS	R0, #2
0x2996	0xB200    SXTH	R0, R0
0x2998	0xF7FEFEDA  BL	_matrixrgb_write_pixel+0
0x299C	0xB001    ADD	SP, SP, #4
0x299E	0xF89D1006  LDRB	R1, [SP, #6]
;MatrixRGB_Demo_Project.c, 765 :: 		matrixrgb_write_pixel( 3, k, 0, 1, 0 );
0x29A2	0x2000    MOVS	R0, #0
0x29A4	0xF88D1006  STRB	R1, [SP, #6]
0x29A8	0xB401    PUSH	(R0)
0x29AA	0x2301    MOVS	R3, #1
0x29AC	0x2200    MOVS	R2, #0
0x29AE	0x2003    MOVS	R0, #3
0x29B0	0xB200    SXTH	R0, R0
0x29B2	0xF7FEFECD  BL	_matrixrgb_write_pixel+0
0x29B6	0xB001    ADD	SP, SP, #4
0x29B8	0xF89D1006  LDRB	R1, [SP, #6]
0x29BC	0xF89D2005  LDRB	R2, [SP, #5]
0x29C0	0xF89D3004  LDRB	R3, [SP, #4]
;MatrixRGB_Demo_Project.c, 762 :: 		for ( k = i; k < ( i + 4 ); k++ )
0x29C4	0x1C49    ADDS	R1, R1, #1
0x29C6	0xB2C9    UXTB	R1, R1
;MatrixRGB_Demo_Project.c, 766 :: 		}
; k end address is: 4 (R1)
0x29C8	0xE7D6    B	L_setup_gameboard247
L_setup_gameboard248:
;MatrixRGB_Demo_Project.c, 756 :: 		for ( i = 0 + offset; i <= 28 + offset; i += 4, j++ )
0x29CA	0x1D10    ADDS	R0, R2, #4
; i end address is: 8 (R2)
; i start address is: 20 (R5)
0x29CC	0xB2C5    UXTB	R5, R0
0x29CE	0x1C5C    ADDS	R4, R3, #1
0x29D0	0xB2E4    UXTB	R4, R4
; j end address is: 12 (R3)
; j start address is: 16 (R4)
;MatrixRGB_Demo_Project.c, 767 :: 		}
; i end address is: 20 (R5)
0x29D2	0xE7A0    B	L_setup_gameboard243
L_setup_gameboard244:
;MatrixRGB_Demo_Project.c, 768 :: 		matrixrgb_set_color( &brick_color, 1, 0, 0 );
0x29D4	0xA802    ADD	R0, SP, #8
0x29D6	0xF88D4004  STRB	R4, [SP, #4]
0x29DA	0x2300    MOVS	R3, #0
0x29DC	0x2200    MOVS	R2, #0
0x29DE	0x2101    MOVS	R1, #1
0x29E0	0xF7FFFEC2  BL	_matrixrgb_set_color+0
0x29E4	0xF89D4004  LDRB	R4, [SP, #4]
;MatrixRGB_Demo_Project.c, 769 :: 		for ( i = 0 + offset; i <= 28 + offset; i += 4, j++ )
0x29E8	0x486C    LDR	R0, [PC, #432]
0x29EA	0x7800    LDRB	R0, [R0, #0]
; i start address is: 20 (R5)
0x29EC	0xB2C5    UXTB	R5, R0
; i end address is: 20 (R5)
; j end address is: 16 (R4)
L_setup_gameboard250:
; i start address is: 20 (R5)
; j start address is: 16 (R4)
0x29EE	0x486B    LDR	R0, [PC, #428]
0x29F0	0x7800    LDRB	R0, [R0, #0]
0x29F2	0x301C    ADDS	R0, #28
0x29F4	0xB200    SXTH	R0, R0
0x29F6	0x4285    CMP	R5, R0
0x29F8	0xDC58    BGT	L_setup_gameboard251
;MatrixRGB_Demo_Project.c, 771 :: 		bricks[j].color  = brick_color;
0x29FA	0x2006    MOVS	R0, #6
0x29FC	0xFB00F104  MUL	R1, R0, R4
0x2A00	0x4867    LDR	R0, [PC, #412]
0x2A02	0x1840    ADDS	R0, R0, R1
0x2A04	0xF04F0303  MOV	R3, #3
0x2A08	0x4602    MOV	R2, R0
0x2A0A	0xA902    ADD	R1, SP, #8
0x2A0C	0xE7FF    B	L_setup_gameboard253
L__setup_gameboard350:
L_setup_gameboard253:
; j start address is: 16 (R4)
; j end address is: 16 (R4)
; i start address is: 20 (R5)
; i end address is: 20 (R5)
0x2A0E	0x7808    LDRB	R0, [R1, #0]
0x2A10	0x7010    STRB	R0, [R2, #0]
0x2A12	0x1E5B    SUBS	R3, R3, #1
0x2A14	0x1C49    ADDS	R1, R1, #1
0x2A16	0x1C52    ADDS	R2, R2, #1
0x2A18	0x2B00    CMP	R3, #0
0x2A1A	0xD1F8    BNE	L__setup_gameboard350
; i end address is: 20 (R5)
; j end address is: 16 (R4)
;MatrixRGB_Demo_Project.c, 772 :: 		bricks[j].col          = i;
; j start address is: 16 (R4)
; i start address is: 20 (R5)
0x2A1C	0x2006    MOVS	R0, #6
0x2A1E	0xFB00F104  MUL	R1, R0, R4
0x2A22	0x485F    LDR	R0, [PC, #380]
0x2A24	0x1840    ADDS	R0, R0, R1
0x2A26	0x1D00    ADDS	R0, R0, #4
0x2A28	0x7005    STRB	R5, [R0, #0]
;MatrixRGB_Demo_Project.c, 773 :: 		bricks[j].row          = 4;
0x2A2A	0x2006    MOVS	R0, #6
0x2A2C	0xFB00F104  MUL	R1, R0, R4
0x2A30	0x485B    LDR	R0, [PC, #364]
0x2A32	0x1840    ADDS	R0, R0, R1
0x2A34	0x1CC1    ADDS	R1, R0, #3
0x2A36	0x2004    MOVS	R0, #4
0x2A38	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 774 :: 		bricks[j].active = true;
0x2A3A	0x2006    MOVS	R0, #6
0x2A3C	0xFB00F104  MUL	R1, R0, R4
0x2A40	0x4857    LDR	R0, [PC, #348]
0x2A42	0x1840    ADDS	R0, R0, R1
0x2A44	0x1D41    ADDS	R1, R0, #5
0x2A46	0x2001    MOVS	R0, #1
0x2A48	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 775 :: 		for ( k = i; k < ( i + 4 ); k++ )
; k start address is: 4 (R1)
0x2A4A	0xB2E9    UXTB	R1, R5
; k end address is: 4 (R1)
; i end address is: 20 (R5)
; j end address is: 16 (R4)
0x2A4C	0xB2E3    UXTB	R3, R4
0x2A4E	0xB2EA    UXTB	R2, R5
L_setup_gameboard254:
; k start address is: 4 (R1)
; i start address is: 8 (R2)
; j start address is: 12 (R3)
0x2A50	0x1D10    ADDS	R0, R2, #4
0x2A52	0xB200    SXTH	R0, R0
0x2A54	0x4281    CMP	R1, R0
0x2A56	0xDA24    BGE	L_setup_gameboard255
;MatrixRGB_Demo_Project.c, 777 :: 		matrixrgb_write_pixel( 4, k, 0, 0, 1 );
0x2A58	0x2001    MOVS	R0, #1
0x2A5A	0xF88D3004  STRB	R3, [SP, #4]
0x2A5E	0xF88D2005  STRB	R2, [SP, #5]
0x2A62	0xF88D1006  STRB	R1, [SP, #6]
0x2A66	0xB401    PUSH	(R0)
0x2A68	0x2300    MOVS	R3, #0
0x2A6A	0x2200    MOVS	R2, #0
0x2A6C	0x2004    MOVS	R0, #4
0x2A6E	0xB200    SXTH	R0, R0
0x2A70	0xF7FEFE6E  BL	_matrixrgb_write_pixel+0
0x2A74	0xB001    ADD	SP, SP, #4
0x2A76	0xF89D1006  LDRB	R1, [SP, #6]
;MatrixRGB_Demo_Project.c, 778 :: 		matrixrgb_write_pixel( 5, k, 0, 0, 1 );
0x2A7A	0x2001    MOVS	R0, #1
0x2A7C	0xF88D1006  STRB	R1, [SP, #6]
0x2A80	0xB401    PUSH	(R0)
0x2A82	0x2300    MOVS	R3, #0
0x2A84	0x2200    MOVS	R2, #0
0x2A86	0x2005    MOVS	R0, #5
0x2A88	0xB200    SXTH	R0, R0
0x2A8A	0xF7FEFE61  BL	_matrixrgb_write_pixel+0
0x2A8E	0xB001    ADD	SP, SP, #4
0x2A90	0xF89D1006  LDRB	R1, [SP, #6]
0x2A94	0xF89D2005  LDRB	R2, [SP, #5]
0x2A98	0xF89D3004  LDRB	R3, [SP, #4]
;MatrixRGB_Demo_Project.c, 775 :: 		for ( k = i; k < ( i + 4 ); k++ )
0x2A9C	0x1C49    ADDS	R1, R1, #1
0x2A9E	0xB2C9    UXTB	R1, R1
;MatrixRGB_Demo_Project.c, 779 :: 		}
; k end address is: 4 (R1)
0x2AA0	0xE7D6    B	L_setup_gameboard254
L_setup_gameboard255:
;MatrixRGB_Demo_Project.c, 769 :: 		for ( i = 0 + offset; i <= 28 + offset; i += 4, j++ )
0x2AA2	0x1D10    ADDS	R0, R2, #4
; i end address is: 8 (R2)
; i start address is: 20 (R5)
0x2AA4	0xB2C5    UXTB	R5, R0
0x2AA6	0x1C5C    ADDS	R4, R3, #1
0x2AA8	0xB2E4    UXTB	R4, R4
; j end address is: 12 (R3)
; j start address is: 16 (R4)
;MatrixRGB_Demo_Project.c, 780 :: 		}
; i end address is: 20 (R5)
0x2AAA	0xE7A0    B	L_setup_gameboard250
L_setup_gameboard251:
;MatrixRGB_Demo_Project.c, 781 :: 		matrixrgb_set_color( &brick_color, 0, 0, 1 );
0x2AAC	0xA802    ADD	R0, SP, #8
0x2AAE	0xF88D4004  STRB	R4, [SP, #4]
0x2AB2	0x2301    MOVS	R3, #1
0x2AB4	0x2200    MOVS	R2, #0
0x2AB6	0x2100    MOVS	R1, #0
0x2AB8	0xF7FFFE56  BL	_matrixrgb_set_color+0
0x2ABC	0xF89D4004  LDRB	R4, [SP, #4]
;MatrixRGB_Demo_Project.c, 782 :: 		for ( i = 0 + offset; i <= 28 + offset; i += 4, j++ )
0x2AC0	0x4836    LDR	R0, [PC, #216]
0x2AC2	0x7800    LDRB	R0, [R0, #0]
; i start address is: 20 (R5)
0x2AC4	0xB2C5    UXTB	R5, R0
; i end address is: 20 (R5)
; j end address is: 16 (R4)
L_setup_gameboard257:
; i start address is: 20 (R5)
; j start address is: 16 (R4)
0x2AC6	0x4835    LDR	R0, [PC, #212]
0x2AC8	0x7800    LDRB	R0, [R0, #0]
0x2ACA	0x301C    ADDS	R0, #28
0x2ACC	0xB200    SXTH	R0, R0
0x2ACE	0x4285    CMP	R5, R0
0x2AD0	0xDC58    BGT	L_setup_gameboard258
;MatrixRGB_Demo_Project.c, 784 :: 		bricks[j].color  = brick_color;
0x2AD2	0x2006    MOVS	R0, #6
0x2AD4	0xFB00F104  MUL	R1, R0, R4
0x2AD8	0x4831    LDR	R0, [PC, #196]
0x2ADA	0x1840    ADDS	R0, R0, R1
0x2ADC	0xF04F0303  MOV	R3, #3
0x2AE0	0x4602    MOV	R2, R0
0x2AE2	0xA902    ADD	R1, SP, #8
0x2AE4	0xE7FF    B	L_setup_gameboard260
L__setup_gameboard351:
L_setup_gameboard260:
; j start address is: 16 (R4)
; j end address is: 16 (R4)
; i start address is: 20 (R5)
; i end address is: 20 (R5)
0x2AE6	0x7808    LDRB	R0, [R1, #0]
0x2AE8	0x7010    STRB	R0, [R2, #0]
0x2AEA	0x1E5B    SUBS	R3, R3, #1
0x2AEC	0x1C49    ADDS	R1, R1, #1
0x2AEE	0x1C52    ADDS	R2, R2, #1
0x2AF0	0x2B00    CMP	R3, #0
0x2AF2	0xD1F8    BNE	L__setup_gameboard351
; i end address is: 20 (R5)
; j end address is: 16 (R4)
;MatrixRGB_Demo_Project.c, 785 :: 		bricks[j].col          = i;
; j start address is: 16 (R4)
; i start address is: 20 (R5)
0x2AF4	0x2006    MOVS	R0, #6
0x2AF6	0xFB00F104  MUL	R1, R0, R4
0x2AFA	0x4829    LDR	R0, [PC, #164]
0x2AFC	0x1840    ADDS	R0, R0, R1
0x2AFE	0x1D00    ADDS	R0, R0, #4
0x2B00	0x7005    STRB	R5, [R0, #0]
;MatrixRGB_Demo_Project.c, 786 :: 		bricks[j].row          = 6;
0x2B02	0x2006    MOVS	R0, #6
0x2B04	0xFB00F104  MUL	R1, R0, R4
0x2B08	0x4825    LDR	R0, [PC, #148]
0x2B0A	0x1840    ADDS	R0, R0, R1
0x2B0C	0x1CC1    ADDS	R1, R0, #3
0x2B0E	0x2006    MOVS	R0, #6
0x2B10	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 787 :: 		bricks[j].active = true;
0x2B12	0x2006    MOVS	R0, #6
0x2B14	0xFB00F104  MUL	R1, R0, R4
0x2B18	0x4821    LDR	R0, [PC, #132]
0x2B1A	0x1840    ADDS	R0, R0, R1
0x2B1C	0x1D41    ADDS	R1, R0, #5
0x2B1E	0x2001    MOVS	R0, #1
0x2B20	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 788 :: 		for ( k = i; k < ( i + 4 ); k++ )
; k start address is: 4 (R1)
0x2B22	0xB2E9    UXTB	R1, R5
; k end address is: 4 (R1)
; i end address is: 20 (R5)
; j end address is: 16 (R4)
0x2B24	0xB2E3    UXTB	R3, R4
0x2B26	0xB2EA    UXTB	R2, R5
L_setup_gameboard261:
; k start address is: 4 (R1)
; i start address is: 8 (R2)
; j start address is: 12 (R3)
0x2B28	0x1D10    ADDS	R0, R2, #4
0x2B2A	0xB200    SXTH	R0, R0
0x2B2C	0x4281    CMP	R1, R0
0x2B2E	0xDA24    BGE	L_setup_gameboard262
;MatrixRGB_Demo_Project.c, 790 :: 		matrixrgb_write_pixel( 6, k, 1, 0, 0 );
0x2B30	0x2000    MOVS	R0, #0
0x2B32	0xF88D3004  STRB	R3, [SP, #4]
0x2B36	0xF88D2005  STRB	R2, [SP, #5]
0x2B3A	0xF88D1006  STRB	R1, [SP, #6]
0x2B3E	0xB401    PUSH	(R0)
0x2B40	0x2300    MOVS	R3, #0
0x2B42	0x2201    MOVS	R2, #1
0x2B44	0x2006    MOVS	R0, #6
0x2B46	0xB200    SXTH	R0, R0
0x2B48	0xF7FEFE02  BL	_matrixrgb_write_pixel+0
0x2B4C	0xB001    ADD	SP, SP, #4
0x2B4E	0xF89D1006  LDRB	R1, [SP, #6]
;MatrixRGB_Demo_Project.c, 791 :: 		matrixrgb_write_pixel( 7, k, 1, 0, 0 );
0x2B52	0x2000    MOVS	R0, #0
0x2B54	0xF88D1006  STRB	R1, [SP, #6]
0x2B58	0xB401    PUSH	(R0)
0x2B5A	0x2300    MOVS	R3, #0
0x2B5C	0x2201    MOVS	R2, #1
0x2B5E	0x2007    MOVS	R0, #7
0x2B60	0xB200    SXTH	R0, R0
0x2B62	0xF7FEFDF5  BL	_matrixrgb_write_pixel+0
0x2B66	0xB001    ADD	SP, SP, #4
0x2B68	0xF89D1006  LDRB	R1, [SP, #6]
0x2B6C	0xF89D2005  LDRB	R2, [SP, #5]
0x2B70	0xF89D3004  LDRB	R3, [SP, #4]
;MatrixRGB_Demo_Project.c, 788 :: 		for ( k = i; k < ( i + 4 ); k++ )
0x2B74	0x1C49    ADDS	R1, R1, #1
0x2B76	0xB2C9    UXTB	R1, R1
;MatrixRGB_Demo_Project.c, 792 :: 		}
; k end address is: 4 (R1)
0x2B78	0xE7D6    B	L_setup_gameboard261
L_setup_gameboard262:
;MatrixRGB_Demo_Project.c, 782 :: 		for ( i = 0 + offset; i <= 28 + offset; i += 4, j++ )
0x2B7A	0x1D10    ADDS	R0, R2, #4
; i end address is: 8 (R2)
; i start address is: 20 (R5)
0x2B7C	0xB2C5    UXTB	R5, R0
0x2B7E	0x1C5C    ADDS	R4, R3, #1
0x2B80	0xB2E4    UXTB	R4, R4
; j end address is: 12 (R3)
; j start address is: 16 (R4)
;MatrixRGB_Demo_Project.c, 793 :: 		}
; i end address is: 20 (R5)
0x2B82	0xE7A0    B	L_setup_gameboard257
L_setup_gameboard258:
;MatrixRGB_Demo_Project.c, 794 :: 		matrixrgb_set_color( &brick_color, 0, 1, 0 );
0x2B84	0xA802    ADD	R0, SP, #8
0x2B86	0xF88D4004  STRB	R4, [SP, #4]
0x2B8A	0x2300    MOVS	R3, #0
0x2B8C	0x2201    MOVS	R2, #1
0x2B8E	0x2100    MOVS	R1, #0
0x2B90	0xF7FFFDEA  BL	_matrixrgb_set_color+0
0x2B94	0xF89D4004  LDRB	R4, [SP, #4]
;MatrixRGB_Demo_Project.c, 795 :: 		for ( i = 0 + offset; i <= 28 + offset; i += 4, j++ )
0x2B98	0xF000B804  B	#8
0x2B9C	0x00052000  	_offset+0
0x2BA0	0x08802000  	_bricks+0
0x2BA4	0x4868    LDR	R0, [PC, #416]
0x2BA6	0x7800    LDRB	R0, [R0, #0]
; i start address is: 20 (R5)
0x2BA8	0xB2C5    UXTB	R5, R0
; i end address is: 20 (R5)
; j end address is: 16 (R4)
L_setup_gameboard264:
; i start address is: 20 (R5)
; j start address is: 16 (R4)
0x2BAA	0x4867    LDR	R0, [PC, #412]
0x2BAC	0x7800    LDRB	R0, [R0, #0]
0x2BAE	0x301C    ADDS	R0, #28
0x2BB0	0xB200    SXTH	R0, R0
0x2BB2	0x4285    CMP	R5, R0
0x2BB4	0xDC58    BGT	L_setup_gameboard265
;MatrixRGB_Demo_Project.c, 797 :: 		bricks[j].color  = brick_color;
0x2BB6	0x2006    MOVS	R0, #6
0x2BB8	0xFB00F104  MUL	R1, R0, R4
0x2BBC	0x4863    LDR	R0, [PC, #396]
0x2BBE	0x1840    ADDS	R0, R0, R1
0x2BC0	0xF04F0303  MOV	R3, #3
0x2BC4	0x4602    MOV	R2, R0
0x2BC6	0xA902    ADD	R1, SP, #8
0x2BC8	0xE7FF    B	L_setup_gameboard267
L__setup_gameboard352:
L_setup_gameboard267:
; j start address is: 16 (R4)
; j end address is: 16 (R4)
; i start address is: 20 (R5)
; i end address is: 20 (R5)
0x2BCA	0x7808    LDRB	R0, [R1, #0]
0x2BCC	0x7010    STRB	R0, [R2, #0]
0x2BCE	0x1E5B    SUBS	R3, R3, #1
0x2BD0	0x1C49    ADDS	R1, R1, #1
0x2BD2	0x1C52    ADDS	R2, R2, #1
0x2BD4	0x2B00    CMP	R3, #0
0x2BD6	0xD1F8    BNE	L__setup_gameboard352
; i end address is: 20 (R5)
; j end address is: 16 (R4)
;MatrixRGB_Demo_Project.c, 798 :: 		bricks[j].col          = i;
; j start address is: 16 (R4)
; i start address is: 20 (R5)
0x2BD8	0x2006    MOVS	R0, #6
0x2BDA	0xFB00F104  MUL	R1, R0, R4
0x2BDE	0x485B    LDR	R0, [PC, #364]
0x2BE0	0x1840    ADDS	R0, R0, R1
0x2BE2	0x1D00    ADDS	R0, R0, #4
0x2BE4	0x7005    STRB	R5, [R0, #0]
;MatrixRGB_Demo_Project.c, 799 :: 		bricks[j].row          = 8;
0x2BE6	0x2006    MOVS	R0, #6
0x2BE8	0xFB00F104  MUL	R1, R0, R4
0x2BEC	0x4857    LDR	R0, [PC, #348]
0x2BEE	0x1840    ADDS	R0, R0, R1
0x2BF0	0x1CC1    ADDS	R1, R0, #3
0x2BF2	0x2008    MOVS	R0, #8
0x2BF4	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 800 :: 		bricks[j].active = true;
0x2BF6	0x2006    MOVS	R0, #6
0x2BF8	0xFB00F104  MUL	R1, R0, R4
0x2BFC	0x4853    LDR	R0, [PC, #332]
0x2BFE	0x1840    ADDS	R0, R0, R1
0x2C00	0x1D41    ADDS	R1, R0, #5
0x2C02	0x2001    MOVS	R0, #1
0x2C04	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 801 :: 		for ( k = i; k < ( i + 4 ); k++ )
; k start address is: 4 (R1)
0x2C06	0xB2E9    UXTB	R1, R5
; k end address is: 4 (R1)
; i end address is: 20 (R5)
; j end address is: 16 (R4)
0x2C08	0xB2E3    UXTB	R3, R4
0x2C0A	0xB2EA    UXTB	R2, R5
L_setup_gameboard268:
; k start address is: 4 (R1)
; i start address is: 8 (R2)
; j start address is: 12 (R3)
0x2C0C	0x1D10    ADDS	R0, R2, #4
0x2C0E	0xB200    SXTH	R0, R0
0x2C10	0x4281    CMP	R1, R0
0x2C12	0xDA24    BGE	L_setup_gameboard269
;MatrixRGB_Demo_Project.c, 803 :: 		matrixrgb_write_pixel( 8, k, 0, 1, 0 );
0x2C14	0x2000    MOVS	R0, #0
0x2C16	0xF88D3004  STRB	R3, [SP, #4]
0x2C1A	0xF88D2005  STRB	R2, [SP, #5]
0x2C1E	0xF88D1006  STRB	R1, [SP, #6]
0x2C22	0xB401    PUSH	(R0)
0x2C24	0x2301    MOVS	R3, #1
0x2C26	0x2200    MOVS	R2, #0
0x2C28	0x2008    MOVS	R0, #8
0x2C2A	0xB200    SXTH	R0, R0
0x2C2C	0xF7FEFD90  BL	_matrixrgb_write_pixel+0
0x2C30	0xB001    ADD	SP, SP, #4
0x2C32	0xF89D1006  LDRB	R1, [SP, #6]
;MatrixRGB_Demo_Project.c, 804 :: 		matrixrgb_write_pixel( 9, k, 0, 1, 0 );
0x2C36	0x2000    MOVS	R0, #0
0x2C38	0xF88D1006  STRB	R1, [SP, #6]
0x2C3C	0xB401    PUSH	(R0)
0x2C3E	0x2301    MOVS	R3, #1
0x2C40	0x2200    MOVS	R2, #0
0x2C42	0x2009    MOVS	R0, #9
0x2C44	0xB200    SXTH	R0, R0
0x2C46	0xF7FEFD83  BL	_matrixrgb_write_pixel+0
0x2C4A	0xB001    ADD	SP, SP, #4
0x2C4C	0xF89D1006  LDRB	R1, [SP, #6]
0x2C50	0xF89D2005  LDRB	R2, [SP, #5]
0x2C54	0xF89D3004  LDRB	R3, [SP, #4]
;MatrixRGB_Demo_Project.c, 801 :: 		for ( k = i; k < ( i + 4 ); k++ )
0x2C58	0x1C49    ADDS	R1, R1, #1
0x2C5A	0xB2C9    UXTB	R1, R1
;MatrixRGB_Demo_Project.c, 805 :: 		}
; k end address is: 4 (R1)
0x2C5C	0xE7D6    B	L_setup_gameboard268
L_setup_gameboard269:
;MatrixRGB_Demo_Project.c, 795 :: 		for ( i = 0 + offset; i <= 28 + offset; i += 4, j++ )
0x2C5E	0x1D10    ADDS	R0, R2, #4
; i end address is: 8 (R2)
; i start address is: 20 (R5)
0x2C60	0xB2C5    UXTB	R5, R0
0x2C62	0x1C5C    ADDS	R4, R3, #1
0x2C64	0xB2E4    UXTB	R4, R4
; j end address is: 12 (R3)
; j start address is: 16 (R4)
;MatrixRGB_Demo_Project.c, 806 :: 		}
; i end address is: 20 (R5)
0x2C66	0xE7A0    B	L_setup_gameboard264
L_setup_gameboard265:
;MatrixRGB_Demo_Project.c, 807 :: 		matrixrgb_set_color( &brick_color, 1, 0, 0 );
0x2C68	0xA802    ADD	R0, SP, #8
0x2C6A	0xF88D4004  STRB	R4, [SP, #4]
0x2C6E	0x2300    MOVS	R3, #0
0x2C70	0x2200    MOVS	R2, #0
0x2C72	0x2101    MOVS	R1, #1
0x2C74	0xF7FFFD78  BL	_matrixrgb_set_color+0
0x2C78	0xF89D4004  LDRB	R4, [SP, #4]
;MatrixRGB_Demo_Project.c, 808 :: 		for ( i = 0 + offset; i <= 28 + offset; i += 4, j++ )
0x2C7C	0x4832    LDR	R0, [PC, #200]
0x2C7E	0x7800    LDRB	R0, [R0, #0]
; i start address is: 20 (R5)
0x2C80	0xB2C5    UXTB	R5, R0
; i end address is: 20 (R5)
; j end address is: 16 (R4)
L_setup_gameboard271:
; i start address is: 20 (R5)
; j start address is: 16 (R4)
0x2C82	0x4831    LDR	R0, [PC, #196]
0x2C84	0x7800    LDRB	R0, [R0, #0]
0x2C86	0x301C    ADDS	R0, #28
0x2C88	0xB200    SXTH	R0, R0
0x2C8A	0x4285    CMP	R5, R0
0x2C8C	0xDC58    BGT	L_setup_gameboard272
;MatrixRGB_Demo_Project.c, 810 :: 		bricks[j].color  = brick_color;
0x2C8E	0x2006    MOVS	R0, #6
0x2C90	0xFB00F104  MUL	R1, R0, R4
0x2C94	0x482D    LDR	R0, [PC, #180]
0x2C96	0x1840    ADDS	R0, R0, R1
0x2C98	0xF04F0303  MOV	R3, #3
0x2C9C	0x4602    MOV	R2, R0
0x2C9E	0xA902    ADD	R1, SP, #8
0x2CA0	0xE7FF    B	L_setup_gameboard274
L__setup_gameboard353:
L_setup_gameboard274:
; j start address is: 16 (R4)
; j end address is: 16 (R4)
; i start address is: 20 (R5)
; i end address is: 20 (R5)
0x2CA2	0x7808    LDRB	R0, [R1, #0]
0x2CA4	0x7010    STRB	R0, [R2, #0]
0x2CA6	0x1E5B    SUBS	R3, R3, #1
0x2CA8	0x1C49    ADDS	R1, R1, #1
0x2CAA	0x1C52    ADDS	R2, R2, #1
0x2CAC	0x2B00    CMP	R3, #0
0x2CAE	0xD1F8    BNE	L__setup_gameboard353
; i end address is: 20 (R5)
; j end address is: 16 (R4)
;MatrixRGB_Demo_Project.c, 811 :: 		bricks[j].col          = i;
; j start address is: 16 (R4)
; i start address is: 20 (R5)
0x2CB0	0x2006    MOVS	R0, #6
0x2CB2	0xFB00F104  MUL	R1, R0, R4
0x2CB6	0x4825    LDR	R0, [PC, #148]
0x2CB8	0x1840    ADDS	R0, R0, R1
0x2CBA	0x1D00    ADDS	R0, R0, #4
0x2CBC	0x7005    STRB	R5, [R0, #0]
;MatrixRGB_Demo_Project.c, 812 :: 		bricks[j].row          = 10;
0x2CBE	0x2006    MOVS	R0, #6
0x2CC0	0xFB00F104  MUL	R1, R0, R4
0x2CC4	0x4821    LDR	R0, [PC, #132]
0x2CC6	0x1840    ADDS	R0, R0, R1
0x2CC8	0x1CC1    ADDS	R1, R0, #3
0x2CCA	0x200A    MOVS	R0, #10
0x2CCC	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 813 :: 		bricks[j].active = true;
0x2CCE	0x2006    MOVS	R0, #6
0x2CD0	0xFB00F104  MUL	R1, R0, R4
0x2CD4	0x481D    LDR	R0, [PC, #116]
0x2CD6	0x1840    ADDS	R0, R0, R1
0x2CD8	0x1D41    ADDS	R1, R0, #5
0x2CDA	0x2001    MOVS	R0, #1
0x2CDC	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 814 :: 		for ( k = i; k < ( i + 4 ); k++ )
; k start address is: 4 (R1)
0x2CDE	0xB2E9    UXTB	R1, R5
; k end address is: 4 (R1)
; i end address is: 20 (R5)
; j end address is: 16 (R4)
0x2CE0	0xB2E3    UXTB	R3, R4
0x2CE2	0xB2EA    UXTB	R2, R5
L_setup_gameboard275:
; k start address is: 4 (R1)
; i start address is: 8 (R2)
; j start address is: 12 (R3)
0x2CE4	0x1D10    ADDS	R0, R2, #4
0x2CE6	0xB200    SXTH	R0, R0
0x2CE8	0x4281    CMP	R1, R0
0x2CEA	0xDA24    BGE	L_setup_gameboard276
;MatrixRGB_Demo_Project.c, 816 :: 		matrixrgb_write_pixel( 10, k, 0, 0, 1 );
0x2CEC	0x2001    MOVS	R0, #1
0x2CEE	0xF88D3004  STRB	R3, [SP, #4]
0x2CF2	0xF88D2005  STRB	R2, [SP, #5]
0x2CF6	0xF88D1006  STRB	R1, [SP, #6]
0x2CFA	0xB401    PUSH	(R0)
0x2CFC	0x2300    MOVS	R3, #0
0x2CFE	0x2200    MOVS	R2, #0
0x2D00	0x200A    MOVS	R0, #10
0x2D02	0xB200    SXTH	R0, R0
0x2D04	0xF7FEFD24  BL	_matrixrgb_write_pixel+0
0x2D08	0xB001    ADD	SP, SP, #4
0x2D0A	0xF89D1006  LDRB	R1, [SP, #6]
;MatrixRGB_Demo_Project.c, 817 :: 		matrixrgb_write_pixel( 11, k, 0, 0, 1 );
0x2D0E	0x2001    MOVS	R0, #1
0x2D10	0xF88D1006  STRB	R1, [SP, #6]
0x2D14	0xB401    PUSH	(R0)
0x2D16	0x2300    MOVS	R3, #0
0x2D18	0x2200    MOVS	R2, #0
0x2D1A	0x200B    MOVS	R0, #11
0x2D1C	0xB200    SXTH	R0, R0
0x2D1E	0xF7FEFD17  BL	_matrixrgb_write_pixel+0
0x2D22	0xB001    ADD	SP, SP, #4
0x2D24	0xF89D1006  LDRB	R1, [SP, #6]
0x2D28	0xF89D2005  LDRB	R2, [SP, #5]
0x2D2C	0xF89D3004  LDRB	R3, [SP, #4]
;MatrixRGB_Demo_Project.c, 814 :: 		for ( k = i; k < ( i + 4 ); k++ )
0x2D30	0x1C49    ADDS	R1, R1, #1
0x2D32	0xB2C9    UXTB	R1, R1
;MatrixRGB_Demo_Project.c, 818 :: 		}
; k end address is: 4 (R1)
0x2D34	0xE7D6    B	L_setup_gameboard275
L_setup_gameboard276:
;MatrixRGB_Demo_Project.c, 808 :: 		for ( i = 0 + offset; i <= 28 + offset; i += 4, j++ )
0x2D36	0x1D10    ADDS	R0, R2, #4
; i end address is: 8 (R2)
; i start address is: 20 (R5)
0x2D38	0xB2C5    UXTB	R5, R0
0x2D3A	0x1C58    ADDS	R0, R3, #1
; j end address is: 12 (R3)
; j start address is: 16 (R4)
0x2D3C	0xB2C4    UXTB	R4, R0
;MatrixRGB_Demo_Project.c, 819 :: 		}
; i end address is: 20 (R5)
; j end address is: 16 (R4)
0x2D3E	0xE7A0    B	L_setup_gameboard271
L_setup_gameboard272:
;MatrixRGB_Demo_Project.c, 821 :: 		}
L_end_setup_gameboard:
0x2D40	0xF8DDE000  LDR	LR, [SP, #0]
0x2D44	0xB003    ADD	SP, SP, #12
0x2D46	0x4770    BX	LR
0x2D48	0x00052000  	_offset+0
0x2D4C	0x08802000  	_bricks+0
; end of _setup_gameboard
_matrixrgb_write_pixel:
;matrixrgb_hw.c, 224 :: 		void matrixrgb_write_pixel( int row, int column, char red, char green, char blue )
0x1750	0xB085    SUB	SP, SP, #20
0x1752	0xF8CDE000  STR	LR, [SP, #0]
0x1756	0xF8AD0004  STRH	R0, [SP, #4]
0x175A	0xF8AD1008  STRH	R1, [SP, #8]
0x175E	0xF88D200C  STRB	R2, [SP, #12]
0x1762	0xF88D3010  STRB	R3, [SP, #16]
0x1766	0xF89D4014  LDRB	R4, [SP, #20]
0x176A	0xF88D4014  STRB	R4, [SP, #20]
;matrixrgb_hw.c, 226 :: 		spi_buffer[0] = WRITE_PXL_CMD;
0x176E	0x2505    MOVS	R5, #5
0x1770	0x4C10    LDR	R4, [PC, #64]
0x1772	0x7025    STRB	R5, [R4, #0]
;matrixrgb_hw.c, 227 :: 		matrixrgb_hal_write( &spi_buffer, 1 );
0x1774	0x2101    MOVS	R1, #1
0x1776	0x480F    LDR	R0, [PC, #60]
0x1778	0xF7FEFF30  BL	_matrixrgb_hal_write+0
;matrixrgb_hw.c, 228 :: 		spi_buffer[0] = row;
0x177C	0xF9BD5004  LDRSH	R5, [SP, #4]
0x1780	0x4C0C    LDR	R4, [PC, #48]
0x1782	0x7025    STRB	R5, [R4, #0]
;matrixrgb_hw.c, 229 :: 		spi_buffer[1] = column;
0x1784	0xF9BD5008  LDRSH	R5, [SP, #8]
0x1788	0x4C0B    LDR	R4, [PC, #44]
0x178A	0x7025    STRB	R5, [R4, #0]
;matrixrgb_hw.c, 230 :: 		spi_buffer[2] = red;
0x178C	0xF89D500C  LDRB	R5, [SP, #12]
0x1790	0x4C0A    LDR	R4, [PC, #40]
0x1792	0x7025    STRB	R5, [R4, #0]
;matrixrgb_hw.c, 231 :: 		spi_buffer[3] = green;
0x1794	0xF89D5010  LDRB	R5, [SP, #16]
0x1798	0x4C09    LDR	R4, [PC, #36]
0x179A	0x7025    STRB	R5, [R4, #0]
;matrixrgb_hw.c, 232 :: 		spi_buffer[4] = blue;
0x179C	0xF89D5014  LDRB	R5, [SP, #20]
0x17A0	0x4C08    LDR	R4, [PC, #32]
0x17A2	0x7025    STRB	R5, [R4, #0]
;matrixrgb_hw.c, 233 :: 		matrixrgb_hal_write( &spi_buffer, 5 );
0x17A4	0x2105    MOVS	R1, #5
0x17A6	0x4803    LDR	R0, [PC, #12]
0x17A8	0xF7FEFF18  BL	_matrixrgb_hal_write+0
;matrixrgb_hw.c, 235 :: 		}
L_end_matrixrgb_write_pixel:
0x17AC	0xF8DDE000  LDR	LR, [SP, #0]
0x17B0	0xB005    ADD	SP, SP, #20
0x17B2	0x4770    BX	LR
0x17B4	0x08182000  	matrixrgb_hw_spi_buffer+0
0x17B8	0x08192000  	matrixrgb_hw_spi_buffer+1
0x17BC	0x081A2000  	matrixrgb_hw_spi_buffer+2
0x17C0	0x081B2000  	matrixrgb_hw_spi_buffer+3
0x17C4	0x081C2000  	matrixrgb_hw_spi_buffer+4
; end of _matrixrgb_write_pixel
_setup_player:
;MatrixRGB_Demo_Project.c, 823 :: 		void setup_player( void )
0x2D50	0xB082    SUB	SP, SP, #8
0x2D52	0xF8CDE000  STR	LR, [SP, #0]
;MatrixRGB_Demo_Project.c, 827 :: 		player_curr_pos.row = 31;           /**< Player always start at default location */
0x2D56	0x211F    MOVS	R1, #31
0x2D58	0x4813    LDR	R0, [PC, #76]
0x2D5A	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 828 :: 		player_curr_pos.col = 12 + offset;
0x2D5C	0x4813    LDR	R0, [PC, #76]
0x2D5E	0x7800    LDRB	R0, [R0, #0]
0x2D60	0xF200010C  ADDW	R1, R0, #12
0x2D64	0x4812    LDR	R0, [PC, #72]
0x2D66	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 829 :: 		for ( i = 12 + offset; i < 18 + offset; i++ )       /**< Draw player */
; i start address is: 8 (R2)
0x2D68	0xB2CA    UXTB	R2, R1
; i end address is: 8 (R2)
L_setup_player278:
; i start address is: 8 (R2)
0x2D6A	0x4810    LDR	R0, [PC, #64]
0x2D6C	0x7800    LDRB	R0, [R0, #0]
0x2D6E	0x3012    ADDS	R0, #18
0x2D70	0xB200    SXTH	R0, R0
0x2D72	0x4282    CMP	R2, R0
0x2D74	0xDA10    BGE	L_setup_player279
;MatrixRGB_Demo_Project.c, 830 :: 		matrixrgb_write_pixel( player_curr_pos.row, i, 1, 0, 0 );
0x2D76	0x2100    MOVS	R1, #0
0x2D78	0x480B    LDR	R0, [PC, #44]
0x2D7A	0x7800    LDRB	R0, [R0, #0]
0x2D7C	0xF88D2004  STRB	R2, [SP, #4]
0x2D80	0xB402    PUSH	(R1)
0x2D82	0x2300    MOVS	R3, #0
0x2D84	0xB2D1    UXTB	R1, R2
0x2D86	0x2201    MOVS	R2, #1
0x2D88	0xF7FEFCE2  BL	_matrixrgb_write_pixel+0
0x2D8C	0xB001    ADD	SP, SP, #4
0x2D8E	0xF89D2004  LDRB	R2, [SP, #4]
;MatrixRGB_Demo_Project.c, 829 :: 		for ( i = 12 + offset; i < 18 + offset; i++ )       /**< Draw player */
0x2D92	0x1C52    ADDS	R2, R2, #1
0x2D94	0xB2D2    UXTB	R2, R2
;MatrixRGB_Demo_Project.c, 830 :: 		matrixrgb_write_pixel( player_curr_pos.row, i, 1, 0, 0 );
; i end address is: 8 (R2)
0x2D96	0xE7E8    B	L_setup_player278
L_setup_player279:
;MatrixRGB_Demo_Project.c, 831 :: 		player_surface = MIDDLE_SURFACE;    /**< Start with default vector */
0x2D98	0x2101    MOVS	R1, #1
0x2D9A	0x4806    LDR	R0, [PC, #24]
0x2D9C	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 832 :: 		}
L_end_setup_player:
0x2D9E	0xF8DDE000  LDR	LR, [SP, #0]
0x2DA2	0xB002    ADD	SP, SP, #8
0x2DA4	0x4770    BX	LR
0x2DA6	0xBF00    NOP
0x2DA8	0x09A22000  	_player_curr_pos+0
0x2DAC	0x00052000  	_offset+0
0x2DB0	0x09A32000  	_player_curr_pos+1
0x2DB4	0x08132000  	_player_surface+0
; end of _setup_player
_setup_ball:
;MatrixRGB_Demo_Project.c, 722 :: 		void setup_ball( void )
0x2DB8	0xB081    SUB	SP, SP, #4
0x2DBA	0xF8CDE000  STR	LR, [SP, #0]
;MatrixRGB_Demo_Project.c, 726 :: 		srand( rand_num );
0x2DBE	0x481D    LDR	R0, [PC, #116]
0x2DC0	0x8800    LDRH	R0, [R0, #0]
0x2DC2	0xF7FDFDE5  BL	_srand+0
;MatrixRGB_Demo_Project.c, 727 :: 		random_row = ( rand() % 13 ) + 12;          /**< Sets up ball to spawn at random spot: Range 12 - 24  */
0x2DC6	0xF7FEFD7B  BL	_rand+0
0x2DCA	0x220D    MOVS	R2, #13
0x2DCC	0xB212    SXTH	R2, R2
0x2DCE	0xFB90F1F2  SDIV	R1, R0, R2
0x2DD2	0xFB020111  MLS	R1, R2, R1, R0
0x2DD6	0xB209    SXTH	R1, R1
0x2DD8	0xF201000C  ADDW	R0, R1, #12
; random_row start address is: 16 (R4)
0x2DDC	0xB2C4    UXTB	R4, R0
;MatrixRGB_Demo_Project.c, 728 :: 		random_col = ( rand() % 32 ) + offset;      /**< Sets up ball to spawn at random spot: Range 0 - 31   */
0x2DDE	0xF7FEFD6F  BL	_rand+0
0x2DE2	0x2220    MOVS	R2, #32
0x2DE4	0xB212    SXTH	R2, R2
0x2DE6	0xFB90F1F2  SDIV	R1, R0, R2
0x2DEA	0xFB020111  MLS	R1, R2, R1, R0
0x2DEE	0xB209    SXTH	R1, R1
0x2DF0	0x4811    LDR	R0, [PC, #68]
0x2DF2	0x7800    LDRB	R0, [R0, #0]
0x2DF4	0x1808    ADDS	R0, R1, R0
; random_col start address is: 20 (R5)
0x2DF6	0xB2C5    UXTB	R5, R0
;MatrixRGB_Demo_Project.c, 729 :: 		random_direction = rand() % 2;              /**< Sets up ball to spawn in random direction */
0x2DF8	0xF7FEFD62  BL	_rand+0
0x2DFC	0x2202    MOVS	R2, #2
0x2DFE	0xB212    SXTH	R2, R2
0x2E00	0xFB90F1F2  SDIV	R1, R0, R2
0x2E04	0xFB020111  MLS	R1, R2, R1, R0
;MatrixRGB_Demo_Project.c, 731 :: 		ball_dir_horiz = random_direction;
0x2E08	0xB2C9    UXTB	R1, R1
0x2E0A	0x480C    LDR	R0, [PC, #48]
0x2E0C	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 732 :: 		ball_curr_pos.row = random_row;
0x2E0E	0x4B0C    LDR	R3, [PC, #48]
0x2E10	0x701C    STRB	R4, [R3, #0]
; random_row end address is: 16 (R4)
;MatrixRGB_Demo_Project.c, 733 :: 		ball_curr_pos.col = random_col;
0x2E12	0x480C    LDR	R0, [PC, #48]
0x2E14	0x7005    STRB	R5, [R0, #0]
;MatrixRGB_Demo_Project.c, 734 :: 		matrixrgb_write_pixel( ball_curr_pos.row, ball_curr_pos.col, 1, 1, 1 );  /**< Draw ball at random location */
0x2E16	0x2201    MOVS	R2, #1
0x2E18	0xB2E9    UXTB	R1, R5
; random_col end address is: 20 (R5)
0x2E1A	0x4618    MOV	R0, R3
0x2E1C	0x7800    LDRB	R0, [R0, #0]
0x2E1E	0xB404    PUSH	(R2)
0x2E20	0x2301    MOVS	R3, #1
0x2E22	0x2201    MOVS	R2, #1
0x2E24	0xF7FEFC94  BL	_matrixrgb_write_pixel+0
0x2E28	0xB001    ADD	SP, SP, #4
;MatrixRGB_Demo_Project.c, 735 :: 		}
L_end_setup_ball:
0x2E2A	0xF8DDE000  LDR	LR, [SP, #0]
0x2E2E	0xB001    ADD	SP, SP, #4
0x2E30	0x4770    BX	LR
0x2E32	0xBF00    NOP
0x2E34	0x00062000  	_rand_num+0
0x2E38	0x00052000  	_offset+0
0x2E3C	0x00042000  	_ball_dir_horiz+0
0x2E40	0x087E2000  	_ball_curr_pos+0
0x2E44	0x087F2000  	_ball_curr_pos+1
; end of _setup_ball
_srand:
;__Lib_CStdlib.c, 301 :: 		
; x start address is: 0 (R0)
0x0990	0xB081    SUB	SP, SP, #4
; x end address is: 0 (R0)
; x start address is: 0 (R0)
;__Lib_CStdlib.c, 302 :: 		
0x0992	0x4904    LDR	R1, [PC, #16]
0x0994	0x6008    STR	R0, [R1, #0]
; x end address is: 0 (R0)
;__Lib_CStdlib.c, 303 :: 		
0x0996	0x2201    MOVS	R2, #1
0x0998	0xB212    SXTH	R2, R2
0x099A	0x4903    LDR	R1, [PC, #12]
0x099C	0x800A    STRH	R2, [R1, #0]
;__Lib_CStdlib.c, 304 :: 		
L_end_srand:
0x099E	0xB001    ADD	SP, SP, #4
0x09A0	0x4770    BX	LR
0x09A2	0xBF00    NOP
0x09A4	0x09C02000  	__Lib_CStdlib_randx+0
0x09A8	0x09BC2000  	__Lib_CStdlib_randf+0
; end of _srand
_rand:
;__Lib_CStdlib.c, 307 :: 		
0x18C0	0xB081    SUB	SP, SP, #4
0x18C2	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_CStdlib.c, 308 :: 		
0x18C6	0x480C    LDR	R0, [PC, #48]
0x18C8	0xF9B00000  LDRSH	R0, [R0, #0]
0x18CC	0xB910    CBNZ	R0, L_rand75
;__Lib_CStdlib.c, 309 :: 		
0x18CE	0x2001    MOVS	R0, #1
0x18D0	0xF7FFF85E  BL	_srand+0
L_rand75:
;__Lib_CStdlib.c, 310 :: 		
0x18D4	0x4A09    LDR	R2, [PC, #36]
0x18D6	0x6811    LDR	R1, [R2, #0]
0x18D8	0x4809    LDR	R0, [PC, #36]
0x18DA	0x4341    MULS	R1, R0, R1
0x18DC	0xF2430039  MOVW	R0, #12345
0x18E0	0x1808    ADDS	R0, R1, R0
0x18E2	0x1401    ASRS	R1, R0, #16
0x18E4	0xF64770FF  MOVW	R0, #32767
0x18E8	0xEA010000  AND	R0, R1, R0, LSL #0
0x18EC	0x6010    STR	R0, [R2, #0]
;__Lib_CStdlib.c, 311 :: 		
0x18EE	0xB200    SXTH	R0, R0
;__Lib_CStdlib.c, 312 :: 		
L_end_rand:
0x18F0	0xF8DDE000  LDR	LR, [SP, #0]
0x18F4	0xB001    ADD	SP, SP, #4
0x18F6	0x4770    BX	LR
0x18F8	0x09BC2000  	__Lib_CStdlib_randf+0
0x18FC	0x09C02000  	__Lib_CStdlib_randx+0
0x1900	0x4E6D41C6  	#1103515245
; end of _rand
_matrixrgb_refresh:
;matrixrgb_hw.c, 320 :: 		void matrixrgb_refresh( void )
0x2774	0xB081    SUB	SP, SP, #4
0x2776	0xF8CDE000  STR	LR, [SP, #0]
;matrixrgb_hw.c, 322 :: 		spi_buffer[0] = REFRESH_CMD;
0x277A	0x2112    MOVS	R1, #18
0x277C	0x4804    LDR	R0, [PC, #16]
0x277E	0x7001    STRB	R1, [R0, #0]
;matrixrgb_hw.c, 323 :: 		matrixrgb_hal_write( &spi_buffer, 1 );
0x2780	0x2101    MOVS	R1, #1
0x2782	0x4803    LDR	R0, [PC, #12]
0x2784	0xF7FDFF2A  BL	_matrixrgb_hal_write+0
;matrixrgb_hw.c, 325 :: 		}
L_end_matrixrgb_refresh:
0x2788	0xF8DDE000  LDR	LR, [SP, #0]
0x278C	0xB001    ADD	SP, SP, #4
0x278E	0x4770    BX	LR
0x2790	0x08182000  	matrixrgb_hw_spi_buffer+0
; end of _matrixrgb_refresh
_ADC1_Get_Sample:
;__Lib_ADC_12_32F10x_16ch.c, 136 :: 		
; channel start address is: 0 (R0)
0x2794	0xB081    SUB	SP, SP, #4
0x2796	0xF8CDE000  STR	LR, [SP, #0]
; channel end address is: 0 (R0)
; channel start address is: 0 (R0)
;__Lib_ADC_12_32F10x_16ch.c, 137 :: 		
0x279A	0xB281    UXTH	R1, R0
; channel end address is: 0 (R0)
0x279C	0x4803    LDR	R0, [PC, #12]
0x279E	0xF7FFF843  BL	__Lib_ADC_12_32F10x_16ch_ADCx_Get_Sample+0
;__Lib_ADC_12_32F10x_16ch.c, 144 :: 		
L_end_ADC1_Get_Sample:
0x27A2	0xF8DDE000  LDR	LR, [SP, #0]
0x27A6	0xB001    ADD	SP, SP, #4
0x27A8	0x4770    BX	LR
0x27AA	0xBF00    NOP
0x27AC	0x24004001  	ADC1_SR+0
; end of _ADC1_Get_Sample
__Lib_ADC_12_32F10x_16ch_ADCx_Get_Sample:
;__Lib_ADC_12_32F10x_16ch.c, 122 :: 		
; channel start address is: 4 (R1)
; base start address is: 0 (R0)
0x1828	0xB081    SUB	SP, SP, #4
0x182A	0xF8CDE000  STR	LR, [SP, #0]
; channel end address is: 4 (R1)
; base end address is: 0 (R0)
; base start address is: 0 (R0)
; channel start address is: 4 (R1)
;__Lib_ADC_12_32F10x_16ch.c, 123 :: 		
0x182E	0xF2000434  ADDW	R4, R0, #52
0x1832	0x090A    LSRS	R2, R1, #4
0x1834	0xB292    UXTH	R2, R2
0x1836	0xB293    UXTH	R3, R2
0x1838	0x6822    LDR	R2, [R4, #0]
0x183A	0xF3631204  BFI	R2, R3, #4, #1
0x183E	0x6022    STR	R2, [R4, #0]
;__Lib_ADC_12_32F10x_16ch.c, 124 :: 		
0x1840	0xF2000434  ADDW	R4, R0, #52
0x1844	0x08CA    LSRS	R2, R1, #3
0x1846	0xB292    UXTH	R2, R2
0x1848	0xB293    UXTH	R3, R2
0x184A	0x6822    LDR	R2, [R4, #0]
0x184C	0xF36302C3  BFI	R2, R3, #3, #1
0x1850	0x6022    STR	R2, [R4, #0]
;__Lib_ADC_12_32F10x_16ch.c, 125 :: 		
0x1852	0xF2000434  ADDW	R4, R0, #52
0x1856	0x088A    LSRS	R2, R1, #2
0x1858	0xB292    UXTH	R2, R2
0x185A	0xB293    UXTH	R3, R2
0x185C	0x6822    LDR	R2, [R4, #0]
0x185E	0xF3630282  BFI	R2, R3, #2, #1
0x1862	0x6022    STR	R2, [R4, #0]
;__Lib_ADC_12_32F10x_16ch.c, 126 :: 		
0x1864	0xF2000434  ADDW	R4, R0, #52
0x1868	0x084A    LSRS	R2, R1, #1
0x186A	0xB292    UXTH	R2, R2
0x186C	0xB293    UXTH	R3, R2
0x186E	0x6822    LDR	R2, [R4, #0]
0x1870	0xF3630241  BFI	R2, R3, #1, #1
0x1874	0x6022    STR	R2, [R4, #0]
;__Lib_ADC_12_32F10x_16ch.c, 127 :: 		
0x1876	0xF2000434  ADDW	R4, R0, #52
0x187A	0xB28B    UXTH	R3, R1
; channel end address is: 4 (R1)
0x187C	0x6822    LDR	R2, [R4, #0]
0x187E	0xF3630200  BFI	R2, R3, #0, #1
0x1882	0x6022    STR	R2, [R4, #0]
;__Lib_ADC_12_32F10x_16ch.c, 128 :: 		
0x1884	0xF2000408  ADDW	R4, R0, #8
0x1888	0x2301    MOVS	R3, #1
0x188A	0x6822    LDR	R2, [R4, #0]
0x188C	0xF3630200  BFI	R2, R3, #0, #1
0x1890	0x6022    STR	R2, [R4, #0]
;__Lib_ADC_12_32F10x_16ch.c, 129 :: 		
0x1892	0xF2000408  ADDW	R4, R0, #8
0x1896	0x2301    MOVS	R3, #1
0x1898	0x6822    LDR	R2, [R4, #0]
0x189A	0xF3635296  BFI	R2, R3, #22, #1
0x189E	0x6022    STR	R2, [R4, #0]
;__Lib_ADC_12_32F10x_16ch.c, 130 :: 		
0x18A0	0xF7FEFD36  BL	_Delay_1us+0
; base end address is: 0 (R0)
;__Lib_ADC_12_32F10x_16ch.c, 131 :: 		
L___Lib_ADC_12_32F10x_16ch_ADCx_Get_Sample20:
; base start address is: 0 (R0)
0x18A4	0x6803    LDR	R3, [R0, #0]
0x18A6	0xF3C30240  UBFX	R2, R3, #1, #1
0x18AA	0xB902    CBNZ	R2, L___Lib_ADC_12_32F10x_16ch_ADCx_Get_Sample21
0x18AC	0xE7FA    B	L___Lib_ADC_12_32F10x_16ch_ADCx_Get_Sample20
L___Lib_ADC_12_32F10x_16ch_ADCx_Get_Sample21:
;__Lib_ADC_12_32F10x_16ch.c, 132 :: 		
0x18AE	0xF200024C  ADDW	R2, R0, #76
; base end address is: 0 (R0)
0x18B2	0x6812    LDR	R2, [R2, #0]
0x18B4	0xB290    UXTH	R0, R2
;__Lib_ADC_12_32F10x_16ch.c, 133 :: 		
L_end_ADCx_Get_Sample:
0x18B6	0xF8DDE000  LDR	LR, [SP, #0]
0x18BA	0xB001    ADD	SP, SP, #4
0x18BC	0x4770    BX	LR
; end of __Lib_ADC_12_32F10x_16ch_ADCx_Get_Sample
_Delay_1us:
;__Lib_Delays.c, 13 :: 		void Delay_1us() {
;__Lib_Delays.c, 14 :: 		Delay_us(1);
0x0310	0xF240070B  MOVW	R7, #11
0x0314	0xF2C00700  MOVT	R7, #0
L_Delay_1us0:
0x0318	0x1E7F    SUBS	R7, R7, #1
0x031A	0xD1FD    BNE	L_Delay_1us0
0x031C	0xBF00    NOP
0x031E	0xBF00    NOP
0x0320	0xBF00    NOP
0x0322	0xBF00    NOP
0x0324	0xBF00    NOP
;__Lib_Delays.c, 15 :: 		}
L_end_Delay_1us:
0x0326	0x4770    BX	LR
; end of _Delay_1us
_Button:
;__Lib_Button.c, 6 :: 		
; active_state start address is: 12 (R3)
; time_ms start address is: 8 (R2)
; pin start address is: 4 (R1)
; port start address is: 0 (R0)
0x27B0	0xB082    SUB	SP, SP, #8
0x27B2	0xF8CDE000  STR	LR, [SP, #0]
0x27B6	0x460D    MOV	R5, R1
0x27B8	0x4611    MOV	R1, R2
; active_state end address is: 12 (R3)
; time_ms end address is: 8 (R2)
; pin end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; pin start address is: 20 (R5)
; time_ms start address is: 4 (R1)
; active_state start address is: 12 (R3)
;__Lib_Button.c, 8 :: 		
; rslt start address is: 8 (R2)
0x27BA	0xF04F0200  MOV	R2, #0
;__Lib_Button.c, 11 :: 		
0x27BE	0x2401    MOVS	R4, #1
0x27C0	0xB224    SXTH	R4, R4
0x27C2	0x40AC    LSLS	R4, R5
0x27C4	0xB224    SXTH	R4, R4
; pin end address is: 20 (R5)
; pMask start address is: 20 (R5)
0x27C6	0xB225    SXTH	R5, R4
;__Lib_Button.c, 13 :: 		
0x27C8	0x6804    LDR	R4, [R0, #0]
0x27CA	0x402C    ANDS	R4, R5
0x27CC	0x2C00    CMP	R4, #0
0x27CE	0xF2400400  MOVW	R4, #0
0x27D2	0xD100    BNE	L__Button7
0x27D4	0x2401    MOVS	R4, #1
L__Button7:
0x27D6	0xB2E4    UXTB	R4, R4
0x27D8	0x405C    EORS	R4, R3
0x27DA	0xB1C4    CBZ	R4, L__Button5
; time_ms end address is: 4 (R1)
; pMask end address is: 20 (R5)
; rslt end address is: 8 (R2)
; active_state end address is: 12 (R3)
; port end address is: 0 (R0)
0x27DC	0x9501    STR	R5, [SP, #4]
0x27DE	0x460D    MOV	R5, R1
0x27E0	0x9901    LDR	R1, [SP, #4]
;__Lib_Button.c, 15 :: 		
L_Button1:
; pMask start address is: 4 (R1)
; rslt start address is: 8 (R2)
; active_state start address is: 12 (R3)
; time_ms start address is: 20 (R5)
; port start address is: 0 (R0)
0x27E2	0x2D00    CMP	R5, #0
0x27E4	0xD905    BLS	L_Button2
;__Lib_Button.c, 16 :: 		
0x27E6	0xF7FFF813  BL	_Delay_500us+0
;__Lib_Button.c, 17 :: 		
0x27EA	0xF7FFF811  BL	_Delay_500us+0
;__Lib_Button.c, 18 :: 		
0x27EE	0x1E6D    SUBS	R5, R5, #1
;__Lib_Button.c, 19 :: 		
; time_ms end address is: 20 (R5)
0x27F0	0xE7F7    B	L_Button1
L_Button2:
;__Lib_Button.c, 21 :: 		
0x27F2	0x6804    LDR	R4, [R0, #0]
; port end address is: 0 (R0)
0x27F4	0x400C    ANDS	R4, R1
; pMask end address is: 4 (R1)
0x27F6	0x2C00    CMP	R4, #0
0x27F8	0xF2400400  MOVW	R4, #0
0x27FC	0xD100    BNE	L__Button8
0x27FE	0x2401    MOVS	R4, #1
L__Button8:
0x2800	0xB2E4    UXTB	R4, R4
0x2802	0x405C    EORS	R4, R3
; active_state end address is: 12 (R3)
0x2804	0xB10C    CBZ	R4, L__Button4
; rslt end address is: 8 (R2)
;__Lib_Button.c, 22 :: 		
; rslt start address is: 0 (R0)
0x2806	0x20FF    MOVS	R0, #255
; rslt end address is: 0 (R0)
0x2808	0xE000    B	L_Button3
L__Button4:
;__Lib_Button.c, 21 :: 		
0x280A	0x4610    MOV	R0, R2
;__Lib_Button.c, 22 :: 		
L_Button3:
;__Lib_Button.c, 23 :: 		
; rslt start address is: 0 (R0)
; rslt end address is: 0 (R0)
0x280C	0xE000    B	L_Button0
L__Button5:
;__Lib_Button.c, 13 :: 		
0x280E	0x4610    MOV	R0, R2
;__Lib_Button.c, 23 :: 		
L_Button0:
;__Lib_Button.c, 25 :: 		
; rslt start address is: 0 (R0)
0x2810	0xB280    UXTH	R0, R0
; rslt end address is: 0 (R0)
;__Lib_Button.c, 26 :: 		
L_end_Button:
0x2812	0xF8DDE000  LDR	LR, [SP, #0]
0x2816	0xB002    ADD	SP, SP, #8
0x2818	0x4770    BX	LR
; end of _Button
_Delay_500us:
;__Lib_Delays.c, 33 :: 		void Delay_500us() {
;__Lib_Delays.c, 34 :: 		Delay_us(498);
0x1810	0xF2417757  MOVW	R7, #5975
0x1814	0xF2C00700  MOVT	R7, #0
L_Delay_500us10:
0x1818	0x1E7F    SUBS	R7, R7, #1
0x181A	0xD1FD    BNE	L_Delay_500us10
0x181C	0xBF00    NOP
0x181E	0xBF00    NOP
0x1820	0xBF00    NOP
0x1822	0xBF00    NOP
0x1824	0xBF00    NOP
;__Lib_Delays.c, 35 :: 		}
L_end_Delay_500us:
0x1826	0x4770    BX	LR
; end of _Delay_500us
_move_player:
;MatrixRGB_Demo_Project.c, 679 :: 		void move_player( void )
0x255C	0xB082    SUB	SP, SP, #8
0x255E	0xF8CDE000  STR	LR, [SP, #0]
;MatrixRGB_Demo_Project.c, 684 :: 		for ( i = player_curr_pos.col; i < ( player_curr_pos.col + 6 ); i++ )    /**< First erase and then write */
0x2562	0x4829    LDR	R0, [PC, #164]
; i start address is: 4 (R1)
0x2564	0x7801    LDRB	R1, [R0, #0]
; i end address is: 4 (R1)
L_move_player225:
; i start address is: 4 (R1)
0x2566	0x4828    LDR	R0, [PC, #160]
0x2568	0x7800    LDRB	R0, [R0, #0]
0x256A	0x1D80    ADDS	R0, R0, #6
0x256C	0xB200    SXTH	R0, R0
0x256E	0x4281    CMP	R1, R0
0x2570	0xDA0A    BGE	L_move_player226
;MatrixRGB_Demo_Project.c, 685 :: 		matrixrgb_erase_pixel( player_curr_pos.row, i );
0x2572	0x4826    LDR	R0, [PC, #152]
0x2574	0x7800    LDRB	R0, [R0, #0]
0x2576	0xF88D1004  STRB	R1, [SP, #4]
0x257A	0xF7FFF925  BL	_matrixrgb_erase_pixel+0
0x257E	0xF89D1004  LDRB	R1, [SP, #4]
;MatrixRGB_Demo_Project.c, 684 :: 		for ( i = player_curr_pos.col; i < ( player_curr_pos.col + 6 ); i++ )    /**< First erase and then write */
0x2582	0x1C49    ADDS	R1, R1, #1
0x2584	0xB2C9    UXTB	R1, R1
;MatrixRGB_Demo_Project.c, 685 :: 		matrixrgb_erase_pixel( player_curr_pos.row, i );
; i end address is: 4 (R1)
0x2586	0xE7EE    B	L_move_player225
L_move_player226:
;MatrixRGB_Demo_Project.c, 689 :: 		if ( ball_curr_pos.col < ( 3 + offset ) )
0x2588	0x4821    LDR	R0, [PC, #132]
0x258A	0x7800    LDRB	R0, [R0, #0]
0x258C	0x1CC1    ADDS	R1, R0, #3
0x258E	0xB209    SXTH	R1, R1
0x2590	0x4820    LDR	R0, [PC, #128]
0x2592	0x7800    LDRB	R0, [R0, #0]
0x2594	0x4288    CMP	R0, R1
0x2596	0xDA04    BGE	L_move_player228
;MatrixRGB_Demo_Project.c, 690 :: 		player_curr_pos.col = 0 + offset;
0x2598	0x481D    LDR	R0, [PC, #116]
0x259A	0x7801    LDRB	R1, [R0, #0]
0x259C	0x481A    LDR	R0, [PC, #104]
0x259E	0x7001    STRB	R1, [R0, #0]
0x25A0	0xE014    B	L_move_player229
L_move_player228:
;MatrixRGB_Demo_Project.c, 691 :: 		else if ( ball_curr_pos.col >= ( 29 + offset ) )
0x25A2	0x481B    LDR	R0, [PC, #108]
0x25A4	0x7800    LDRB	R0, [R0, #0]
0x25A6	0xF200011D  ADDW	R1, R0, #29
0x25AA	0xB209    SXTH	R1, R1
0x25AC	0x4819    LDR	R0, [PC, #100]
0x25AE	0x7800    LDRB	R0, [R0, #0]
0x25B0	0x4288    CMP	R0, R1
0x25B2	0xDB06    BLT	L_move_player230
;MatrixRGB_Demo_Project.c, 692 :: 		player_curr_pos.col = 26 + offset;
0x25B4	0x4816    LDR	R0, [PC, #88]
0x25B6	0x7800    LDRB	R0, [R0, #0]
0x25B8	0xF200011A  ADDW	R1, R0, #26
0x25BC	0x4812    LDR	R0, [PC, #72]
0x25BE	0x7001    STRB	R1, [R0, #0]
0x25C0	0xE004    B	L_move_player231
L_move_player230:
;MatrixRGB_Demo_Project.c, 694 :: 		player_curr_pos.col = ball_curr_pos.col - 3;    /**< "-3" to place it always in the middle so vector is almost always 1 */
0x25C2	0x4814    LDR	R0, [PC, #80]
0x25C4	0x7800    LDRB	R0, [R0, #0]
0x25C6	0x1EC1    SUBS	R1, R0, #3
0x25C8	0x480F    LDR	R0, [PC, #60]
0x25CA	0x7001    STRB	R1, [R0, #0]
L_move_player231:
L_move_player229:
;MatrixRGB_Demo_Project.c, 699 :: 		for ( i = player_curr_pos.col; i < ( player_curr_pos.col + 6 ); i++ )    /**< Draw character in new position */
0x25CC	0x480E    LDR	R0, [PC, #56]
; i start address is: 8 (R2)
0x25CE	0x7802    LDRB	R2, [R0, #0]
; i end address is: 8 (R2)
L_move_player232:
; i start address is: 8 (R2)
0x25D0	0x480D    LDR	R0, [PC, #52]
0x25D2	0x7800    LDRB	R0, [R0, #0]
0x25D4	0x1D80    ADDS	R0, R0, #6
0x25D6	0xB200    SXTH	R0, R0
0x25D8	0x4282    CMP	R2, R0
0x25DA	0xDA10    BGE	L_move_player233
;MatrixRGB_Demo_Project.c, 700 :: 		matrixrgb_write_pixel( player_curr_pos.row, i, 1, 0, 0 );
0x25DC	0x2100    MOVS	R1, #0
0x25DE	0x480B    LDR	R0, [PC, #44]
0x25E0	0x7800    LDRB	R0, [R0, #0]
0x25E2	0xF88D2004  STRB	R2, [SP, #4]
0x25E6	0xB402    PUSH	(R1)
0x25E8	0x2300    MOVS	R3, #0
0x25EA	0xB2D1    UXTB	R1, R2
0x25EC	0x2201    MOVS	R2, #1
0x25EE	0xF7FFF8AF  BL	_matrixrgb_write_pixel+0
0x25F2	0xB001    ADD	SP, SP, #4
0x25F4	0xF89D2004  LDRB	R2, [SP, #4]
;MatrixRGB_Demo_Project.c, 699 :: 		for ( i = player_curr_pos.col; i < ( player_curr_pos.col + 6 ); i++ )    /**< Draw character in new position */
0x25F8	0x1C52    ADDS	R2, R2, #1
0x25FA	0xB2D2    UXTB	R2, R2
;MatrixRGB_Demo_Project.c, 700 :: 		matrixrgb_write_pixel( player_curr_pos.row, i, 1, 0, 0 );
; i end address is: 8 (R2)
0x25FC	0xE7E8    B	L_move_player232
L_move_player233:
;MatrixRGB_Demo_Project.c, 702 :: 		}
L_end_move_player:
0x25FE	0xF8DDE000  LDR	LR, [SP, #0]
0x2602	0xB002    ADD	SP, SP, #8
0x2604	0x4770    BX	LR
0x2606	0xBF00    NOP
0x2608	0x09A32000  	_player_curr_pos+1
0x260C	0x09A22000  	_player_curr_pos+0
0x2610	0x00052000  	_offset+0
0x2614	0x087F2000  	_ball_curr_pos+1
; end of _move_player
_matrixrgb_erase_pixel:
;matrixrgb_hw.c, 250 :: 		void matrixrgb_erase_pixel( int row, int column )
0x17C8	0xB083    SUB	SP, SP, #12
0x17CA	0xF8CDE000  STR	LR, [SP, #0]
0x17CE	0xF8AD0004  STRH	R0, [SP, #4]
0x17D2	0xF8AD1008  STRH	R1, [SP, #8]
;matrixrgb_hw.c, 252 :: 		spi_buffer[0] = ERASE_PXL_CMD;
0x17D6	0x2307    MOVS	R3, #7
0x17D8	0x4A0A    LDR	R2, [PC, #40]
0x17DA	0x7013    STRB	R3, [R2, #0]
;matrixrgb_hw.c, 253 :: 		matrixrgb_hal_write( &spi_buffer, 1 );
0x17DC	0x2101    MOVS	R1, #1
0x17DE	0x4809    LDR	R0, [PC, #36]
0x17E0	0xF7FEFEFC  BL	_matrixrgb_hal_write+0
;matrixrgb_hw.c, 254 :: 		spi_buffer[0] = row;
0x17E4	0xF9BD3004  LDRSH	R3, [SP, #4]
0x17E8	0x4A06    LDR	R2, [PC, #24]
0x17EA	0x7013    STRB	R3, [R2, #0]
;matrixrgb_hw.c, 255 :: 		spi_buffer[1] = column;
0x17EC	0xF9BD3008  LDRSH	R3, [SP, #8]
0x17F0	0x4A05    LDR	R2, [PC, #20]
0x17F2	0x7013    STRB	R3, [R2, #0]
;matrixrgb_hw.c, 256 :: 		matrixrgb_hal_write( &spi_buffer, 2 );
0x17F4	0x2102    MOVS	R1, #2
0x17F6	0x4803    LDR	R0, [PC, #12]
0x17F8	0xF7FEFEF0  BL	_matrixrgb_hal_write+0
;matrixrgb_hw.c, 258 :: 		}
L_end_matrixrgb_erase_pixel:
0x17FC	0xF8DDE000  LDR	LR, [SP, #0]
0x1800	0xB003    ADD	SP, SP, #12
0x1802	0x4770    BX	LR
0x1804	0x08182000  	matrixrgb_hw_spi_buffer+0
0x1808	0x08192000  	matrixrgb_hw_spi_buffer+1
; end of _matrixrgb_erase_pixel
_move_ball:
;MatrixRGB_Demo_Project.c, 704 :: 		void move_ball( void )
0x1E28	0xB082    SUB	SP, SP, #8
0x1E2A	0xF8CDE000  STR	LR, [SP, #0]
;MatrixRGB_Demo_Project.c, 708 :: 		set_vector( &amount );                                          /**< If ball hits left or right side of player, increase angle */
0x1E2E	0xA801    ADD	R0, SP, #4
0x1E30	0xF7FFFD68  BL	_set_vector+0
;MatrixRGB_Demo_Project.c, 710 :: 		matrixrgb_erase_pixel( ball_curr_pos.row, ball_curr_pos.col );  /**< Erase ball from frame */
0x1E34	0x4811    LDR	R0, [PC, #68]
0x1E36	0x7801    LDRB	R1, [R0, #0]
0x1E38	0x4811    LDR	R0, [PC, #68]
0x1E3A	0x7800    LDRB	R0, [R0, #0]
0x1E3C	0xF7FFFCC4  BL	_matrixrgb_erase_pixel+0
;MatrixRGB_Demo_Project.c, 711 :: 		if ( is_brick_hit() )                                           /**< If brick is hit, check once more for accuracy, and then check if it was the last brick */
0x1E40	0xF7FEFDF2  BL	_is_brick_hit+0
0x1E44	0xB128    CBZ	R0, L_move_ball235
;MatrixRGB_Demo_Project.c, 713 :: 		is_brick_hit();
0x1E46	0xF7FEFDEF  BL	_is_brick_hit+0
;MatrixRGB_Demo_Project.c, 714 :: 		playing = is_game_over();
0x1E4A	0xF7FFFC6B  BL	_is_game_over+0
0x1E4E	0x490D    LDR	R1, [PC, #52]
0x1E50	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 715 :: 		}
L_move_ball235:
;MatrixRGB_Demo_Project.c, 716 :: 		check_ball_boundaries();                                        /**< Check to see if we've reached a boundary */
0x1E52	0xF7FEFDAB  BL	_check_ball_boundaries+0
;MatrixRGB_Demo_Project.c, 717 :: 		set_ball_pos( amount );                                         /**< Set balls new position depending on vector value */
0x1E56	0xF89D0004  LDRB	R0, [SP, #4]
0x1E5A	0xF7FFFF1B  BL	_set_ball_pos+0
;MatrixRGB_Demo_Project.c, 718 :: 		matrixrgb_write_pixel( ball_curr_pos.row, ball_curr_pos.col, 1, 1, 1 ); /**< Write New pixel ( ball ) after erasing old */
0x1E5E	0x2201    MOVS	R2, #1
0x1E60	0x4806    LDR	R0, [PC, #24]
0x1E62	0x7801    LDRB	R1, [R0, #0]
0x1E64	0x4806    LDR	R0, [PC, #24]
0x1E66	0x7800    LDRB	R0, [R0, #0]
0x1E68	0xB404    PUSH	(R2)
0x1E6A	0x2301    MOVS	R3, #1
0x1E6C	0x2201    MOVS	R2, #1
0x1E6E	0xF7FFFC6F  BL	_matrixrgb_write_pixel+0
0x1E72	0xB001    ADD	SP, SP, #4
;MatrixRGB_Demo_Project.c, 720 :: 		}
L_end_move_ball:
0x1E74	0xF8DDE000  LDR	LR, [SP, #0]
0x1E78	0xB002    ADD	SP, SP, #8
0x1E7A	0x4770    BX	LR
0x1E7C	0x087F2000  	_ball_curr_pos+1
0x1E80	0x087E2000  	_ball_curr_pos+0
0x1E84	0x00022000  	_playing+0
; end of _move_ball
_set_vector:
;MatrixRGB_Demo_Project.c, 411 :: 		void set_vector( uint8_t *amount )
; amount start address is: 0 (R0)
; amount end address is: 0 (R0)
; amount start address is: 0 (R0)
;MatrixRGB_Demo_Project.c, 413 :: 		if ( player_surface == MIDDLE_SURFACE )                   /**< If the last surface of the player hit was middle, vector is normal */
0x1904	0x490D    LDR	R1, [PC, #52]
0x1906	0x7809    LDRB	R1, [R1, #0]
0x1908	0x2901    CMP	R1, #1
0x190A	0xD106    BNE	L_set_vector70
;MatrixRGB_Demo_Project.c, 415 :: 		*amount = 1;
0x190C	0x2101    MOVS	R1, #1
0x190E	0x7001    STRB	R1, [R0, #0]
; amount end address is: 0 (R0)
;MatrixRGB_Demo_Project.c, 416 :: 		ball_speed = g_ball_speed;
0x1910	0x490B    LDR	R1, [PC, #44]
0x1912	0x880A    LDRH	R2, [R1, #0]
0x1914	0x490B    LDR	R1, [PC, #44]
0x1916	0x800A    STRH	R2, [R1, #0]
;MatrixRGB_Demo_Project.c, 417 :: 		}
0x1918	0xE00E    B	L_set_vector71
L_set_vector70:
;MatrixRGB_Demo_Project.c, 418 :: 		else if ( player_surface == LEFT_SURFACE || player_surface == RIGHT_SURFACE )      /**< If the last surface of the player hit was on a side, vector is 2 */
; amount start address is: 0 (R0)
0x191A	0x4908    LDR	R1, [PC, #32]
0x191C	0x7809    LDRB	R1, [R1, #0]
0x191E	0xB121    CBZ	R1, L__set_vector356
0x1920	0x4906    LDR	R1, [PC, #24]
0x1922	0x7809    LDRB	R1, [R1, #0]
0x1924	0x2902    CMP	R1, #2
0x1926	0xD000    BEQ	L__set_vector355
; amount end address is: 0 (R0)
0x1928	0xE006    B	L_set_vector74
L__set_vector356:
; amount start address is: 0 (R0)
L__set_vector355:
;MatrixRGB_Demo_Project.c, 420 :: 		*amount = 2;
0x192A	0x2102    MOVS	R1, #2
0x192C	0x7001    STRB	R1, [R0, #0]
; amount end address is: 0 (R0)
;MatrixRGB_Demo_Project.c, 421 :: 		ball_speed = g_ball_speed + 5;                                                 /**< Slows down ( normalizes ) speed  */
0x192E	0x4904    LDR	R1, [PC, #16]
0x1930	0x8809    LDRH	R1, [R1, #0]
0x1932	0x1D4A    ADDS	R2, R1, #5
0x1934	0x4903    LDR	R1, [PC, #12]
0x1936	0x800A    STRH	R2, [R1, #0]
;MatrixRGB_Demo_Project.c, 422 :: 		}
L_set_vector74:
L_set_vector71:
;MatrixRGB_Demo_Project.c, 423 :: 		}
L_end_set_vector:
0x1938	0x4770    BX	LR
0x193A	0xBF00    NOP
0x193C	0x08132000  	_player_surface+0
0x1940	0x00002000  	_g_ball_speed+0
0x1944	0x087C2000  	_ball_speed+0
; end of _set_vector
_is_brick_hit:
;MatrixRGB_Demo_Project.c, 437 :: 		bool is_brick_hit( void ) /**< Big function. Took alot of checks to efficiently check if bricks are hit. Works well */
0x0A28	0xB082    SUB	SP, SP, #8
0x0A2A	0xF8CDE000  STR	LR, [SP, #0]
;MatrixRGB_Demo_Project.c, 440 :: 		bool is_hit = false;
; is_hit start address is: 12 (R3)
0x0A2E	0x2300    MOVS	R3, #0
;MatrixRGB_Demo_Project.c, 442 :: 		for ( i = 0; i < 48; i++ )       /**< Checks every brick in the array to see if it is active, then if it has been hit */
; i start address is: 8 (R2)
0x0A30	0x2200    MOVS	R2, #0
; is_hit end address is: 12 (R3)
; i end address is: 8 (R2)
L_is_brick_hit78:
; i start address is: 8 (R2)
; is_hit start address is: 12 (R3)
0x0A32	0x2A30    CMP	R2, #48
0x0A34	0xF0808663  BCS	L_is_brick_hit79
;MatrixRGB_Demo_Project.c, 444 :: 		if ( bricks[i].active )
0x0A38	0x2006    MOVS	R0, #6
0x0A3A	0xFB00F102  MUL	R1, R0, R2
0x0A3E	0x48AD    LDR	R0, [PC, #692]
0x0A40	0x1840    ADDS	R0, R0, R1
0x0A42	0x1D40    ADDS	R0, R0, #5
0x0A44	0x7800    LDRB	R0, [R0, #0]
0x0A46	0x2800    CMP	R0, #0
0x0A48	0xF0008655  BEQ	L__is_brick_hit490
;MatrixRGB_Demo_Project.c, 446 :: 		if ( player_surface == MIDDLE_SURFACE )   /**< Hits depend on whether the vector is 1 ( MIDDLE_SURFACE ) or 2 ( RIGHT_SURFACE, LEFT_SURFACE ) */
0x0A4C	0x48AA    LDR	R0, [PC, #680]
0x0A4E	0x7800    LDRB	R0, [R0, #0]
0x0A50	0x2801    CMP	R0, #1
0x0A52	0xF04082F3  BNE	L_is_brick_hit82
;MatrixRGB_Demo_Project.c, 448 :: 		if ( ball_dir_vert == UP )
0x0A56	0x48A9    LDR	R0, [PC, #676]
0x0A58	0x7800    LDRB	R0, [R0, #0]
0x0A5A	0x2800    CMP	R0, #0
0x0A5C	0xF0408173  BNE	L_is_brick_hit83
;MatrixRGB_Demo_Project.c, 450 :: 		if ( ball_dir_horiz == LEFT )
0x0A60	0x48A7    LDR	R0, [PC, #668]
0x0A62	0x7800    LDRB	R0, [R0, #0]
0x0A64	0x2800    CMP	R0, #0
0x0A66	0xF04080AB  BNE	L_is_brick_hit84
;MatrixRGB_Demo_Project.c, 452 :: 		if ( ( ball_curr_pos.row == bricks[i].row || ball_curr_pos.row == bricks[i].row + 1 ) && ball_curr_pos.col == bricks[i].col + 4 )
0x0A6A	0x2006    MOVS	R0, #6
0x0A6C	0xFB00F102  MUL	R1, R0, R2
0x0A70	0x48A0    LDR	R0, [PC, #640]
0x0A72	0x1840    ADDS	R0, R0, R1
0x0A74	0x1CC0    ADDS	R0, R0, #3
0x0A76	0x7801    LDRB	R1, [R0, #0]
0x0A78	0x48A2    LDR	R0, [PC, #648]
0x0A7A	0x7800    LDRB	R0, [R0, #0]
0x0A7C	0x4288    CMP	R0, R1
0x0A7E	0xD00D    BEQ	L__is_brick_hit399
0x0A80	0x2006    MOVS	R0, #6
0x0A82	0xFB00F102  MUL	R1, R0, R2
0x0A86	0x489B    LDR	R0, [PC, #620]
0x0A88	0x1840    ADDS	R0, R0, R1
0x0A8A	0x1CC0    ADDS	R0, R0, #3
0x0A8C	0x7800    LDRB	R0, [R0, #0]
0x0A8E	0x1C41    ADDS	R1, R0, #1
0x0A90	0xB209    SXTH	R1, R1
0x0A92	0x489C    LDR	R0, [PC, #624]
0x0A94	0x7800    LDRB	R0, [R0, #0]
0x0A96	0x4288    CMP	R0, R1
0x0A98	0xD000    BEQ	L__is_brick_hit398
0x0A9A	0xE026    B	L_is_brick_hit89
L__is_brick_hit399:
L__is_brick_hit398:
0x0A9C	0x2006    MOVS	R0, #6
0x0A9E	0xFB00F102  MUL	R1, R0, R2
0x0AA2	0x4894    LDR	R0, [PC, #592]
0x0AA4	0x1840    ADDS	R0, R0, R1
0x0AA6	0x1D00    ADDS	R0, R0, #4
0x0AA8	0x7800    LDRB	R0, [R0, #0]
0x0AAA	0x1D01    ADDS	R1, R0, #4
0x0AAC	0xB209    SXTH	R1, R1
0x0AAE	0x4896    LDR	R0, [PC, #600]
0x0AB0	0x7800    LDRB	R0, [R0, #0]
0x0AB2	0x4288    CMP	R0, R1
0x0AB4	0xD119    BNE	L__is_brick_hit400
; is_hit end address is: 12 (R3)
L__is_brick_hit396:
;MatrixRGB_Demo_Project.c, 454 :: 		brick_side_horiz = RIGHT_SIDE;
0x0AB6	0x2102    MOVS	R1, #2
0x0AB8	0x4894    LDR	R0, [PC, #592]
0x0ABA	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 455 :: 		ball_dir_vert = UP;
0x0ABC	0x2100    MOVS	R1, #0
0x0ABE	0x488F    LDR	R0, [PC, #572]
0x0AC0	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 456 :: 		ball_dir_horiz = RIGHT;
0x0AC2	0x2101    MOVS	R1, #1
0x0AC4	0x488E    LDR	R0, [PC, #568]
0x0AC6	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 457 :: 		bricks[i].active = false;
0x0AC8	0x2006    MOVS	R0, #6
0x0ACA	0xFB00F102  MUL	R1, R0, R2
0x0ACE	0x4889    LDR	R0, [PC, #548]
0x0AD0	0x1840    ADDS	R0, R0, R1
0x0AD2	0x1D41    ADDS	R1, R0, #5
0x0AD4	0x2000    MOVS	R0, #0
0x0AD6	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 458 :: 		erase_brick( i );
0x0AD8	0xF88D2004  STRB	R2, [SP, #4]
0x0ADC	0xB2D0    UXTB	R0, R2
0x0ADE	0xF7FFFCD1  BL	_erase_brick+0
0x0AE2	0xF89D2004  LDRB	R2, [SP, #4]
;MatrixRGB_Demo_Project.c, 459 :: 		is_hit = true;
; is_hit start address is: 0 (R0)
0x0AE6	0x2001    MOVS	R0, #1
;MatrixRGB_Demo_Project.c, 460 :: 		}
; is_hit end address is: 0 (R0)
0x0AE8	0xE069    B	L_is_brick_hit90
L_is_brick_hit89:
;MatrixRGB_Demo_Project.c, 452 :: 		if ( ( ball_curr_pos.row == bricks[i].row || ball_curr_pos.row == bricks[i].row + 1 ) && ball_curr_pos.col == bricks[i].col + 4 )
; is_hit start address is: 12 (R3)
L__is_brick_hit400:
;MatrixRGB_Demo_Project.c, 461 :: 		else if ( ball_curr_pos.row == bricks[i].row + 2 && ( ball_curr_pos.col == bricks[i].col || ball_curr_pos.col == bricks[i].col + 1 || ball_curr_pos.col == bricks[i].col + 2 || ball_curr_pos.col == bricks[i].col + 3 || ball_curr_pos.col == bricks[i].col + 4 ) )
0x0AEA	0x2006    MOVS	R0, #6
0x0AEC	0xFB00F102  MUL	R1, R0, R2
0x0AF0	0x4880    LDR	R0, [PC, #512]
0x0AF2	0x1840    ADDS	R0, R0, R1
0x0AF4	0x1CC0    ADDS	R0, R0, #3
0x0AF6	0x7800    LDRB	R0, [R0, #0]
0x0AF8	0x1C81    ADDS	R1, R0, #2
0x0AFA	0xB209    SXTH	R1, R1
0x0AFC	0x4881    LDR	R0, [PC, #516]
0x0AFE	0x7800    LDRB	R0, [R0, #0]
0x0B00	0x4288    CMP	R0, R1
0x0B02	0xF040805B  BNE	L__is_brick_hit480
0x0B06	0x2006    MOVS	R0, #6
0x0B08	0xFB00F102  MUL	R1, R0, R2
0x0B0C	0x4879    LDR	R0, [PC, #484]
0x0B0E	0x1840    ADDS	R0, R0, R1
0x0B10	0x1D00    ADDS	R0, R0, #4
0x0B12	0x7801    LDRB	R1, [R0, #0]
0x0B14	0x487C    LDR	R0, [PC, #496]
0x0B16	0x7800    LDRB	R0, [R0, #0]
0x0B18	0x4288    CMP	R0, R1
0x0B1A	0xD035    BEQ	L__is_brick_hit405
0x0B1C	0x2006    MOVS	R0, #6
0x0B1E	0xFB00F102  MUL	R1, R0, R2
0x0B22	0x4874    LDR	R0, [PC, #464]
0x0B24	0x1840    ADDS	R0, R0, R1
0x0B26	0x1D00    ADDS	R0, R0, #4
0x0B28	0x7800    LDRB	R0, [R0, #0]
0x0B2A	0x1C41    ADDS	R1, R0, #1
0x0B2C	0xB209    SXTH	R1, R1
0x0B2E	0x4876    LDR	R0, [PC, #472]
0x0B30	0x7800    LDRB	R0, [R0, #0]
0x0B32	0x4288    CMP	R0, R1
0x0B34	0xD028    BEQ	L__is_brick_hit404
0x0B36	0x2006    MOVS	R0, #6
0x0B38	0xFB00F102  MUL	R1, R0, R2
0x0B3C	0x486D    LDR	R0, [PC, #436]
0x0B3E	0x1840    ADDS	R0, R0, R1
0x0B40	0x1D00    ADDS	R0, R0, #4
0x0B42	0x7800    LDRB	R0, [R0, #0]
0x0B44	0x1C81    ADDS	R1, R0, #2
0x0B46	0xB209    SXTH	R1, R1
0x0B48	0x486F    LDR	R0, [PC, #444]
0x0B4A	0x7800    LDRB	R0, [R0, #0]
0x0B4C	0x4288    CMP	R0, R1
0x0B4E	0xD01B    BEQ	L__is_brick_hit403
0x0B50	0x2006    MOVS	R0, #6
0x0B52	0xFB00F102  MUL	R1, R0, R2
0x0B56	0x4867    LDR	R0, [PC, #412]
0x0B58	0x1840    ADDS	R0, R0, R1
0x0B5A	0x1D00    ADDS	R0, R0, #4
0x0B5C	0x7800    LDRB	R0, [R0, #0]
0x0B5E	0x1CC1    ADDS	R1, R0, #3
0x0B60	0xB209    SXTH	R1, R1
0x0B62	0x4869    LDR	R0, [PC, #420]
0x0B64	0x7800    LDRB	R0, [R0, #0]
0x0B66	0x4288    CMP	R0, R1
0x0B68	0xD00E    BEQ	L__is_brick_hit402
0x0B6A	0x2006    MOVS	R0, #6
0x0B6C	0xFB00F102  MUL	R1, R0, R2
0x0B70	0x4860    LDR	R0, [PC, #384]
0x0B72	0x1840    ADDS	R0, R0, R1
0x0B74	0x1D00    ADDS	R0, R0, #4
0x0B76	0x7800    LDRB	R0, [R0, #0]
0x0B78	0x1D01    ADDS	R1, R0, #4
0x0B7A	0xB209    SXTH	R1, R1
0x0B7C	0x4862    LDR	R0, [PC, #392]
0x0B7E	0x7800    LDRB	R0, [R0, #0]
0x0B80	0x4288    CMP	R0, R1
0x0B82	0xD001    BEQ	L__is_brick_hit401
0x0B84	0xB2D8    UXTB	R0, R3
; is_hit end address is: 12 (R3)
0x0B86	0xE018    B	L_is_brick_hit95
L__is_brick_hit405:
L__is_brick_hit404:
L__is_brick_hit403:
L__is_brick_hit402:
L__is_brick_hit401:
L__is_brick_hit394:
;MatrixRGB_Demo_Project.c, 463 :: 		brick_side_vert = BOTTOM_SIDE;
0x0B88	0x2101    MOVS	R1, #1
0x0B8A	0x4861    LDR	R0, [PC, #388]
0x0B8C	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 464 :: 		ball_dir_horiz = LEFT;
0x0B8E	0x2100    MOVS	R1, #0
0x0B90	0x485B    LDR	R0, [PC, #364]
0x0B92	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 465 :: 		ball_dir_vert = DOWN;
0x0B94	0x2101    MOVS	R1, #1
0x0B96	0x4859    LDR	R0, [PC, #356]
0x0B98	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 466 :: 		bricks[i].active = false;
0x0B9A	0x2006    MOVS	R0, #6
0x0B9C	0xFB00F102  MUL	R1, R0, R2
0x0BA0	0x4854    LDR	R0, [PC, #336]
0x0BA2	0x1840    ADDS	R0, R0, R1
0x0BA4	0x1D41    ADDS	R1, R0, #5
0x0BA6	0x2000    MOVS	R0, #0
0x0BA8	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 467 :: 		erase_brick( i );
0x0BAA	0xF88D2004  STRB	R2, [SP, #4]
0x0BAE	0xB2D0    UXTB	R0, R2
0x0BB0	0xF7FFFC68  BL	_erase_brick+0
0x0BB4	0xF89D2004  LDRB	R2, [SP, #4]
;MatrixRGB_Demo_Project.c, 468 :: 		is_hit = true;
; is_hit start address is: 0 (R0)
0x0BB8	0x2001    MOVS	R0, #1
; is_hit end address is: 0 (R0)
;MatrixRGB_Demo_Project.c, 469 :: 		}
L_is_brick_hit95:
;MatrixRGB_Demo_Project.c, 461 :: 		else if ( ball_curr_pos.row == bricks[i].row + 2 && ( ball_curr_pos.col == bricks[i].col || ball_curr_pos.col == bricks[i].col + 1 || ball_curr_pos.col == bricks[i].col + 2 || ball_curr_pos.col == bricks[i].col + 3 || ball_curr_pos.col == bricks[i].col + 4 ) )
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
0x0BBA	0xE000    B	L__is_brick_hit406
L__is_brick_hit480:
0x0BBC	0xB2D8    UXTB	R0, R3
L__is_brick_hit406:
;MatrixRGB_Demo_Project.c, 469 :: 		}
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
L_is_brick_hit90:
;MatrixRGB_Demo_Project.c, 470 :: 		}
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
0x0BBE	0xE0C1    B	L_is_brick_hit96
L_is_brick_hit84:
;MatrixRGB_Demo_Project.c, 471 :: 		else if ( ball_dir_horiz == RIGHT )
; is_hit start address is: 12 (R3)
0x0BC0	0x484F    LDR	R0, [PC, #316]
0x0BC2	0x7800    LDRB	R0, [R0, #0]
0x0BC4	0x2801    CMP	R0, #1
0x0BC6	0xF04080BC  BNE	L__is_brick_hit482
;MatrixRGB_Demo_Project.c, 473 :: 		if ( ( ball_curr_pos.row == bricks[i].row || ball_curr_pos.row == bricks[i].row + 1 ) && ball_curr_pos.col == bricks[i].col - 1 )
0x0BCA	0x2006    MOVS	R0, #6
0x0BCC	0xFB00F102  MUL	R1, R0, R2
0x0BD0	0x4848    LDR	R0, [PC, #288]
0x0BD2	0x1840    ADDS	R0, R0, R1
0x0BD4	0x1CC0    ADDS	R0, R0, #3
0x0BD6	0x7801    LDRB	R1, [R0, #0]
0x0BD8	0x484A    LDR	R0, [PC, #296]
0x0BDA	0x7800    LDRB	R0, [R0, #0]
0x0BDC	0x4288    CMP	R0, R1
0x0BDE	0xD00D    BEQ	L__is_brick_hit408
0x0BE0	0x2006    MOVS	R0, #6
0x0BE2	0xFB00F102  MUL	R1, R0, R2
0x0BE6	0x4843    LDR	R0, [PC, #268]
0x0BE8	0x1840    ADDS	R0, R0, R1
0x0BEA	0x1CC0    ADDS	R0, R0, #3
0x0BEC	0x7800    LDRB	R0, [R0, #0]
0x0BEE	0x1C41    ADDS	R1, R0, #1
0x0BF0	0xB209    SXTH	R1, R1
0x0BF2	0x4844    LDR	R0, [PC, #272]
0x0BF4	0x7800    LDRB	R0, [R0, #0]
0x0BF6	0x4288    CMP	R0, R1
0x0BF8	0xD000    BEQ	L__is_brick_hit407
0x0BFA	0xE026    B	L_is_brick_hit102
L__is_brick_hit408:
L__is_brick_hit407:
0x0BFC	0x2006    MOVS	R0, #6
0x0BFE	0xFB00F102  MUL	R1, R0, R2
0x0C02	0x483C    LDR	R0, [PC, #240]
0x0C04	0x1840    ADDS	R0, R0, R1
0x0C06	0x1D00    ADDS	R0, R0, #4
0x0C08	0x7800    LDRB	R0, [R0, #0]
0x0C0A	0x1E41    SUBS	R1, R0, #1
0x0C0C	0xB209    SXTH	R1, R1
0x0C0E	0x483E    LDR	R0, [PC, #248]
0x0C10	0x7800    LDRB	R0, [R0, #0]
0x0C12	0x4288    CMP	R0, R1
0x0C14	0xD119    BNE	L__is_brick_hit409
; is_hit end address is: 12 (R3)
L__is_brick_hit392:
;MatrixRGB_Demo_Project.c, 475 :: 		brick_side_horiz = LEFT_SIDE;
0x0C16	0x2103    MOVS	R1, #3
0x0C18	0x483C    LDR	R0, [PC, #240]
0x0C1A	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 476 :: 		ball_dir_vert = UP;
0x0C1C	0x2100    MOVS	R1, #0
0x0C1E	0x4837    LDR	R0, [PC, #220]
0x0C20	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 477 :: 		ball_dir_horiz = LEFT;
0x0C22	0x2100    MOVS	R1, #0
0x0C24	0x4836    LDR	R0, [PC, #216]
0x0C26	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 478 :: 		bricks[i].active = false;
0x0C28	0x2006    MOVS	R0, #6
0x0C2A	0xFB00F102  MUL	R1, R0, R2
0x0C2E	0x4831    LDR	R0, [PC, #196]
0x0C30	0x1840    ADDS	R0, R0, R1
0x0C32	0x1D41    ADDS	R1, R0, #5
0x0C34	0x2000    MOVS	R0, #0
0x0C36	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 479 :: 		erase_brick( i );
0x0C38	0xF88D2004  STRB	R2, [SP, #4]
0x0C3C	0xB2D0    UXTB	R0, R2
0x0C3E	0xF7FFFC21  BL	_erase_brick+0
0x0C42	0xF89D2004  LDRB	R2, [SP, #4]
;MatrixRGB_Demo_Project.c, 480 :: 		is_hit = true;
; is_hit start address is: 0 (R0)
0x0C46	0x2001    MOVS	R0, #1
;MatrixRGB_Demo_Project.c, 481 :: 		}
; is_hit end address is: 0 (R0)
0x0C48	0xE07A    B	L_is_brick_hit103
L_is_brick_hit102:
;MatrixRGB_Demo_Project.c, 473 :: 		if ( ( ball_curr_pos.row == bricks[i].row || ball_curr_pos.row == bricks[i].row + 1 ) && ball_curr_pos.col == bricks[i].col - 1 )
; is_hit start address is: 12 (R3)
L__is_brick_hit409:
;MatrixRGB_Demo_Project.c, 482 :: 		else if ( ball_curr_pos.row == bricks[i].row + 2 && ( ball_curr_pos.col == bricks[i].col - 1 || ball_curr_pos.col == bricks[i].col || ball_curr_pos.col == bricks[i].col + 1 || ball_curr_pos.col == bricks[i].col + 2 || ball_curr_pos.col == bricks[i].col + 3 ) )
0x0C4A	0x2006    MOVS	R0, #6
0x0C4C	0xFB00F102  MUL	R1, R0, R2
0x0C50	0x4828    LDR	R0, [PC, #160]
0x0C52	0x1840    ADDS	R0, R0, R1
0x0C54	0x1CC0    ADDS	R0, R0, #3
0x0C56	0x7800    LDRB	R0, [R0, #0]
0x0C58	0x1C81    ADDS	R1, R0, #2
0x0C5A	0xB209    SXTH	R1, R1
0x0C5C	0x4829    LDR	R0, [PC, #164]
0x0C5E	0x7800    LDRB	R0, [R0, #0]
0x0C60	0x4288    CMP	R0, R1
0x0C62	0xF040806C  BNE	L__is_brick_hit481
0x0C66	0x2006    MOVS	R0, #6
0x0C68	0xFB00F102  MUL	R1, R0, R2
0x0C6C	0x4821    LDR	R0, [PC, #132]
0x0C6E	0x1840    ADDS	R0, R0, R1
0x0C70	0x1D00    ADDS	R0, R0, #4
0x0C72	0x7800    LDRB	R0, [R0, #0]
0x0C74	0x1E41    SUBS	R1, R0, #1
0x0C76	0xB209    SXTH	R1, R1
0x0C78	0x4823    LDR	R0, [PC, #140]
0x0C7A	0x7800    LDRB	R0, [R0, #0]
0x0C7C	0x4288    CMP	R0, R1
0x0C7E	0xD033    BEQ	L__is_brick_hit414
0x0C80	0x2006    MOVS	R0, #6
0x0C82	0xFB00F102  MUL	R1, R0, R2
0x0C86	0x481B    LDR	R0, [PC, #108]
0x0C88	0x1840    ADDS	R0, R0, R1
0x0C8A	0x1D00    ADDS	R0, R0, #4
0x0C8C	0x7801    LDRB	R1, [R0, #0]
0x0C8E	0x481E    LDR	R0, [PC, #120]
0x0C90	0x7800    LDRB	R0, [R0, #0]
0x0C92	0x4288    CMP	R0, R1
0x0C94	0xD028    BEQ	L__is_brick_hit413
0x0C96	0x2006    MOVS	R0, #6
0x0C98	0xFB00F102  MUL	R1, R0, R2
0x0C9C	0x4815    LDR	R0, [PC, #84]
0x0C9E	0x1840    ADDS	R0, R0, R1
0x0CA0	0x1D00    ADDS	R0, R0, #4
0x0CA2	0x7800    LDRB	R0, [R0, #0]
0x0CA4	0x1C41    ADDS	R1, R0, #1
0x0CA6	0xB209    SXTH	R1, R1
0x0CA8	0x4817    LDR	R0, [PC, #92]
0x0CAA	0x7800    LDRB	R0, [R0, #0]
0x0CAC	0x4288    CMP	R0, R1
0x0CAE	0xD01B    BEQ	L__is_brick_hit412
0x0CB0	0x2006    MOVS	R0, #6
0x0CB2	0xFB00F102  MUL	R1, R0, R2
0x0CB6	0x480F    LDR	R0, [PC, #60]
0x0CB8	0x1840    ADDS	R0, R0, R1
0x0CBA	0x1D00    ADDS	R0, R0, #4
0x0CBC	0x7800    LDRB	R0, [R0, #0]
0x0CBE	0x1C81    ADDS	R1, R0, #2
0x0CC0	0xB209    SXTH	R1, R1
0x0CC2	0x4811    LDR	R0, [PC, #68]
0x0CC4	0x7800    LDRB	R0, [R0, #0]
0x0CC6	0x4288    CMP	R0, R1
0x0CC8	0xD00E    BEQ	L__is_brick_hit411
0x0CCA	0x2006    MOVS	R0, #6
0x0CCC	0xFB00F102  MUL	R1, R0, R2
0x0CD0	0x4808    LDR	R0, [PC, #32]
0x0CD2	0x1840    ADDS	R0, R0, R1
0x0CD4	0x1D00    ADDS	R0, R0, #4
0x0CD6	0x7800    LDRB	R0, [R0, #0]
0x0CD8	0x1CC1    ADDS	R1, R0, #3
0x0CDA	0xB209    SXTH	R1, R1
0x0CDC	0x480A    LDR	R0, [PC, #40]
0x0CDE	0x7800    LDRB	R0, [R0, #0]
0x0CE0	0x4288    CMP	R0, R1
0x0CE2	0xD001    BEQ	L__is_brick_hit410
0x0CE4	0xB2D8    UXTB	R0, R3
; is_hit end address is: 12 (R3)
0x0CE6	0xE029    B	L_is_brick_hit108
L__is_brick_hit414:
L__is_brick_hit413:
L__is_brick_hit412:
L__is_brick_hit411:
L__is_brick_hit410:
L__is_brick_hit390:
;MatrixRGB_Demo_Project.c, 484 :: 		brick_side_vert = BOTTOM_SIDE;
0x0CE8	0x2101    MOVS	R1, #1
0x0CEA	0x4809    LDR	R0, [PC, #36]
0x0CEC	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 485 :: 		ball_dir_vert = DOWN;
0x0CEE	0x2101    MOVS	R1, #1
0x0CF0	0x4802    LDR	R0, [PC, #8]
0x0CF2	0xE00F    B	#30
0x0CF4	0x08802000  	_bricks+0
0x0CF8	0x08132000  	_player_surface+0
0x0CFC	0x00032000  	_ball_dir_vert+0
0x0D00	0x00042000  	_ball_dir_horiz+0
0x0D04	0x087E2000  	_ball_curr_pos+0
0x0D08	0x087F2000  	_ball_curr_pos+1
0x0D0C	0x09A02000  	_brick_side_horiz+0
0x0D10	0x09A12000  	_brick_side_vert+0
0x0D14	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 486 :: 		ball_dir_horiz = RIGHT;
0x0D16	0x2101    MOVS	R1, #1
0x0D18	0x48B0    LDR	R0, [PC, #704]
0x0D1A	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 487 :: 		bricks[i].active = false;
0x0D1C	0x2006    MOVS	R0, #6
0x0D1E	0xFB00F102  MUL	R1, R0, R2
0x0D22	0x48AF    LDR	R0, [PC, #700]
0x0D24	0x1840    ADDS	R0, R0, R1
0x0D26	0x1D41    ADDS	R1, R0, #5
0x0D28	0x2000    MOVS	R0, #0
0x0D2A	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 488 :: 		erase_brick( i );
0x0D2C	0xF88D2004  STRB	R2, [SP, #4]
0x0D30	0xB2D0    UXTB	R0, R2
0x0D32	0xF7FFFBA7  BL	_erase_brick+0
0x0D36	0xF89D2004  LDRB	R2, [SP, #4]
;MatrixRGB_Demo_Project.c, 489 :: 		is_hit = true;
; is_hit start address is: 0 (R0)
0x0D3A	0x2001    MOVS	R0, #1
; is_hit end address is: 0 (R0)
;MatrixRGB_Demo_Project.c, 490 :: 		}
L_is_brick_hit108:
;MatrixRGB_Demo_Project.c, 482 :: 		else if ( ball_curr_pos.row == bricks[i].row + 2 && ( ball_curr_pos.col == bricks[i].col - 1 || ball_curr_pos.col == bricks[i].col || ball_curr_pos.col == bricks[i].col + 1 || ball_curr_pos.col == bricks[i].col + 2 || ball_curr_pos.col == bricks[i].col + 3 ) )
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
0x0D3C	0xE000    B	L__is_brick_hit415
L__is_brick_hit481:
0x0D3E	0xB2D8    UXTB	R0, R3
L__is_brick_hit415:
;MatrixRGB_Demo_Project.c, 490 :: 		}
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
L_is_brick_hit103:
;MatrixRGB_Demo_Project.c, 492 :: 		}
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
0x0D40	0xE000    B	L_is_brick_hit97
L__is_brick_hit482:
;MatrixRGB_Demo_Project.c, 471 :: 		else if ( ball_dir_horiz == RIGHT )
0x0D42	0xB2D8    UXTB	R0, R3
;MatrixRGB_Demo_Project.c, 492 :: 		}
L_is_brick_hit97:
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
L_is_brick_hit96:
;MatrixRGB_Demo_Project.c, 493 :: 		}
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
0x0D44	0xE177    B	L_is_brick_hit109
L_is_brick_hit83:
;MatrixRGB_Demo_Project.c, 494 :: 		else if ( ball_dir_vert == DOWN )
; is_hit start address is: 12 (R3)
0x0D46	0x48A7    LDR	R0, [PC, #668]
0x0D48	0x7800    LDRB	R0, [R0, #0]
0x0D4A	0x2801    CMP	R0, #1
0x0D4C	0xF0408172  BNE	L__is_brick_hit486
;MatrixRGB_Demo_Project.c, 496 :: 		if ( ball_dir_horiz == LEFT )
0x0D50	0x48A2    LDR	R0, [PC, #648]
0x0D52	0x7800    LDRB	R0, [R0, #0]
0x0D54	0x2800    CMP	R0, #0
0x0D56	0xF04080AB  BNE	L_is_brick_hit111
;MatrixRGB_Demo_Project.c, 498 :: 		if ( ( ball_curr_pos.row == bricks[i].row || ball_curr_pos.row == bricks[i].row + 1 ) && ball_curr_pos.col == bricks[i].col + 4 )
0x0D5A	0x2006    MOVS	R0, #6
0x0D5C	0xFB00F102  MUL	R1, R0, R2
0x0D60	0x489F    LDR	R0, [PC, #636]
0x0D62	0x1840    ADDS	R0, R0, R1
0x0D64	0x1CC0    ADDS	R0, R0, #3
0x0D66	0x7801    LDRB	R1, [R0, #0]
0x0D68	0x489F    LDR	R0, [PC, #636]
0x0D6A	0x7800    LDRB	R0, [R0, #0]
0x0D6C	0x4288    CMP	R0, R1
0x0D6E	0xD00D    BEQ	L__is_brick_hit417
0x0D70	0x2006    MOVS	R0, #6
0x0D72	0xFB00F102  MUL	R1, R0, R2
0x0D76	0x489A    LDR	R0, [PC, #616]
0x0D78	0x1840    ADDS	R0, R0, R1
0x0D7A	0x1CC0    ADDS	R0, R0, #3
0x0D7C	0x7800    LDRB	R0, [R0, #0]
0x0D7E	0x1C41    ADDS	R1, R0, #1
0x0D80	0xB209    SXTH	R1, R1
0x0D82	0x4899    LDR	R0, [PC, #612]
0x0D84	0x7800    LDRB	R0, [R0, #0]
0x0D86	0x4288    CMP	R0, R1
0x0D88	0xD000    BEQ	L__is_brick_hit416
0x0D8A	0xE026    B	L_is_brick_hit116
L__is_brick_hit417:
L__is_brick_hit416:
0x0D8C	0x2006    MOVS	R0, #6
0x0D8E	0xFB00F102  MUL	R1, R0, R2
0x0D92	0x4893    LDR	R0, [PC, #588]
0x0D94	0x1840    ADDS	R0, R0, R1
0x0D96	0x1D00    ADDS	R0, R0, #4
0x0D98	0x7800    LDRB	R0, [R0, #0]
0x0D9A	0x1D01    ADDS	R1, R0, #4
0x0D9C	0xB209    SXTH	R1, R1
0x0D9E	0x4893    LDR	R0, [PC, #588]
0x0DA0	0x7800    LDRB	R0, [R0, #0]
0x0DA2	0x4288    CMP	R0, R1
0x0DA4	0xD119    BNE	L__is_brick_hit418
; is_hit end address is: 12 (R3)
L__is_brick_hit388:
;MatrixRGB_Demo_Project.c, 500 :: 		brick_side_horiz = RIGHT_SIDE;
0x0DA6	0x2102    MOVS	R1, #2
0x0DA8	0x4891    LDR	R0, [PC, #580]
0x0DAA	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 501 :: 		ball_dir_horiz = RIGHT;
0x0DAC	0x2101    MOVS	R1, #1
0x0DAE	0x488B    LDR	R0, [PC, #556]
0x0DB0	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 502 :: 		ball_dir_vert = DOWN;
0x0DB2	0x2101    MOVS	R1, #1
0x0DB4	0x488B    LDR	R0, [PC, #556]
0x0DB6	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 503 :: 		bricks[i].active = false;
0x0DB8	0x2006    MOVS	R0, #6
0x0DBA	0xFB00F102  MUL	R1, R0, R2
0x0DBE	0x4888    LDR	R0, [PC, #544]
0x0DC0	0x1840    ADDS	R0, R0, R1
0x0DC2	0x1D41    ADDS	R1, R0, #5
0x0DC4	0x2000    MOVS	R0, #0
0x0DC6	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 504 :: 		erase_brick( i );
0x0DC8	0xF88D2004  STRB	R2, [SP, #4]
0x0DCC	0xB2D0    UXTB	R0, R2
0x0DCE	0xF7FFFB59  BL	_erase_brick+0
0x0DD2	0xF89D2004  LDRB	R2, [SP, #4]
;MatrixRGB_Demo_Project.c, 505 :: 		is_hit = true;
; is_hit start address is: 0 (R0)
0x0DD6	0x2001    MOVS	R0, #1
;MatrixRGB_Demo_Project.c, 506 :: 		}
; is_hit end address is: 0 (R0)
0x0DD8	0xE069    B	L_is_brick_hit117
L_is_brick_hit116:
;MatrixRGB_Demo_Project.c, 498 :: 		if ( ( ball_curr_pos.row == bricks[i].row || ball_curr_pos.row == bricks[i].row + 1 ) && ball_curr_pos.col == bricks[i].col + 4 )
; is_hit start address is: 12 (R3)
L__is_brick_hit418:
;MatrixRGB_Demo_Project.c, 507 :: 		else if ( ball_curr_pos.row == bricks[i].row - 1 && ( ball_curr_pos.col == bricks[i].col || ball_curr_pos.col == bricks[i].col + 1 || ball_curr_pos.col == bricks[i].col + 2 || ball_curr_pos.col == bricks[i].col + 3 || ball_curr_pos.col == bricks[i].col + 4 ) )
0x0DDA	0x2006    MOVS	R0, #6
0x0DDC	0xFB00F102  MUL	R1, R0, R2
0x0DE0	0x487F    LDR	R0, [PC, #508]
0x0DE2	0x1840    ADDS	R0, R0, R1
0x0DE4	0x1CC0    ADDS	R0, R0, #3
0x0DE6	0x7800    LDRB	R0, [R0, #0]
0x0DE8	0x1E41    SUBS	R1, R0, #1
0x0DEA	0xB209    SXTH	R1, R1
0x0DEC	0x487E    LDR	R0, [PC, #504]
0x0DEE	0x7800    LDRB	R0, [R0, #0]
0x0DF0	0x4288    CMP	R0, R1
0x0DF2	0xF040805B  BNE	L__is_brick_hit483
0x0DF6	0x2006    MOVS	R0, #6
0x0DF8	0xFB00F102  MUL	R1, R0, R2
0x0DFC	0x4878    LDR	R0, [PC, #480]
0x0DFE	0x1840    ADDS	R0, R0, R1
0x0E00	0x1D00    ADDS	R0, R0, #4
0x0E02	0x7801    LDRB	R1, [R0, #0]
0x0E04	0x4879    LDR	R0, [PC, #484]
0x0E06	0x7800    LDRB	R0, [R0, #0]
0x0E08	0x4288    CMP	R0, R1
0x0E0A	0xD035    BEQ	L__is_brick_hit423
0x0E0C	0x2006    MOVS	R0, #6
0x0E0E	0xFB00F102  MUL	R1, R0, R2
0x0E12	0x4873    LDR	R0, [PC, #460]
0x0E14	0x1840    ADDS	R0, R0, R1
0x0E16	0x1D00    ADDS	R0, R0, #4
0x0E18	0x7800    LDRB	R0, [R0, #0]
0x0E1A	0x1C41    ADDS	R1, R0, #1
0x0E1C	0xB209    SXTH	R1, R1
0x0E1E	0x4873    LDR	R0, [PC, #460]
0x0E20	0x7800    LDRB	R0, [R0, #0]
0x0E22	0x4288    CMP	R0, R1
0x0E24	0xD028    BEQ	L__is_brick_hit422
0x0E26	0x2006    MOVS	R0, #6
0x0E28	0xFB00F102  MUL	R1, R0, R2
0x0E2C	0x486C    LDR	R0, [PC, #432]
0x0E2E	0x1840    ADDS	R0, R0, R1
0x0E30	0x1D00    ADDS	R0, R0, #4
0x0E32	0x7800    LDRB	R0, [R0, #0]
0x0E34	0x1C81    ADDS	R1, R0, #2
0x0E36	0xB209    SXTH	R1, R1
0x0E38	0x486C    LDR	R0, [PC, #432]
0x0E3A	0x7800    LDRB	R0, [R0, #0]
0x0E3C	0x4288    CMP	R0, R1
0x0E3E	0xD01B    BEQ	L__is_brick_hit421
0x0E40	0x2006    MOVS	R0, #6
0x0E42	0xFB00F102  MUL	R1, R0, R2
0x0E46	0x4866    LDR	R0, [PC, #408]
0x0E48	0x1840    ADDS	R0, R0, R1
0x0E4A	0x1D00    ADDS	R0, R0, #4
0x0E4C	0x7800    LDRB	R0, [R0, #0]
0x0E4E	0x1CC1    ADDS	R1, R0, #3
0x0E50	0xB209    SXTH	R1, R1
0x0E52	0x4866    LDR	R0, [PC, #408]
0x0E54	0x7800    LDRB	R0, [R0, #0]
0x0E56	0x4288    CMP	R0, R1
0x0E58	0xD00E    BEQ	L__is_brick_hit420
0x0E5A	0x2006    MOVS	R0, #6
0x0E5C	0xFB00F102  MUL	R1, R0, R2
0x0E60	0x485F    LDR	R0, [PC, #380]
0x0E62	0x1840    ADDS	R0, R0, R1
0x0E64	0x1D00    ADDS	R0, R0, #4
0x0E66	0x7800    LDRB	R0, [R0, #0]
0x0E68	0x1D01    ADDS	R1, R0, #4
0x0E6A	0xB209    SXTH	R1, R1
0x0E6C	0x485F    LDR	R0, [PC, #380]
0x0E6E	0x7800    LDRB	R0, [R0, #0]
0x0E70	0x4288    CMP	R0, R1
0x0E72	0xD001    BEQ	L__is_brick_hit419
0x0E74	0xB2D8    UXTB	R0, R3
; is_hit end address is: 12 (R3)
0x0E76	0xE018    B	L_is_brick_hit122
L__is_brick_hit423:
L__is_brick_hit422:
L__is_brick_hit421:
L__is_brick_hit420:
L__is_brick_hit419:
L__is_brick_hit386:
;MatrixRGB_Demo_Project.c, 509 :: 		brick_side_vert = TOP_SIDE;
0x0E78	0x2100    MOVS	R1, #0
0x0E7A	0x485E    LDR	R0, [PC, #376]
0x0E7C	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 510 :: 		ball_dir_horiz = LEFT;
0x0E7E	0x2100    MOVS	R1, #0
0x0E80	0x4856    LDR	R0, [PC, #344]
0x0E82	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 511 :: 		ball_dir_vert = UP;
0x0E84	0x2100    MOVS	R1, #0
0x0E86	0x4857    LDR	R0, [PC, #348]
0x0E88	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 512 :: 		bricks[i].active = false;
0x0E8A	0x2006    MOVS	R0, #6
0x0E8C	0xFB00F102  MUL	R1, R0, R2
0x0E90	0x4853    LDR	R0, [PC, #332]
0x0E92	0x1840    ADDS	R0, R0, R1
0x0E94	0x1D41    ADDS	R1, R0, #5
0x0E96	0x2000    MOVS	R0, #0
0x0E98	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 513 :: 		erase_brick( i );
0x0E9A	0xF88D2004  STRB	R2, [SP, #4]
0x0E9E	0xB2D0    UXTB	R0, R2
0x0EA0	0xF7FFFAF0  BL	_erase_brick+0
0x0EA4	0xF89D2004  LDRB	R2, [SP, #4]
;MatrixRGB_Demo_Project.c, 514 :: 		is_hit = true;
; is_hit start address is: 0 (R0)
0x0EA8	0x2001    MOVS	R0, #1
; is_hit end address is: 0 (R0)
;MatrixRGB_Demo_Project.c, 515 :: 		}
L_is_brick_hit122:
;MatrixRGB_Demo_Project.c, 507 :: 		else if ( ball_curr_pos.row == bricks[i].row - 1 && ( ball_curr_pos.col == bricks[i].col || ball_curr_pos.col == bricks[i].col + 1 || ball_curr_pos.col == bricks[i].col + 2 || ball_curr_pos.col == bricks[i].col + 3 || ball_curr_pos.col == bricks[i].col + 4 ) )
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
0x0EAA	0xE000    B	L__is_brick_hit424
L__is_brick_hit483:
0x0EAC	0xB2D8    UXTB	R0, R3
L__is_brick_hit424:
;MatrixRGB_Demo_Project.c, 515 :: 		}
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
L_is_brick_hit117:
;MatrixRGB_Demo_Project.c, 516 :: 		}
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
0x0EAE	0xE0C0    B	L_is_brick_hit123
L_is_brick_hit111:
;MatrixRGB_Demo_Project.c, 517 :: 		else if ( ball_dir_horiz == RIGHT )
; is_hit start address is: 12 (R3)
0x0EB0	0x484A    LDR	R0, [PC, #296]
0x0EB2	0x7800    LDRB	R0, [R0, #0]
0x0EB4	0x2801    CMP	R0, #1
0x0EB6	0xF04080BB  BNE	L__is_brick_hit485
;MatrixRGB_Demo_Project.c, 519 :: 		if ( ( ball_curr_pos.row == bricks[i].row || ball_curr_pos.row == bricks[i].row + 1 ) && ball_curr_pos.col == bricks[i].col - 1 )
0x0EBA	0x2006    MOVS	R0, #6
0x0EBC	0xFB00F102  MUL	R1, R0, R2
0x0EC0	0x4847    LDR	R0, [PC, #284]
0x0EC2	0x1840    ADDS	R0, R0, R1
0x0EC4	0x1CC0    ADDS	R0, R0, #3
0x0EC6	0x7801    LDRB	R1, [R0, #0]
0x0EC8	0x4847    LDR	R0, [PC, #284]
0x0ECA	0x7800    LDRB	R0, [R0, #0]
0x0ECC	0x4288    CMP	R0, R1
0x0ECE	0xD00D    BEQ	L__is_brick_hit426
0x0ED0	0x2006    MOVS	R0, #6
0x0ED2	0xFB00F102  MUL	R1, R0, R2
0x0ED6	0x4842    LDR	R0, [PC, #264]
0x0ED8	0x1840    ADDS	R0, R0, R1
0x0EDA	0x1CC0    ADDS	R0, R0, #3
0x0EDC	0x7800    LDRB	R0, [R0, #0]
0x0EDE	0x1C41    ADDS	R1, R0, #1
0x0EE0	0xB209    SXTH	R1, R1
0x0EE2	0x4841    LDR	R0, [PC, #260]
0x0EE4	0x7800    LDRB	R0, [R0, #0]
0x0EE6	0x4288    CMP	R0, R1
0x0EE8	0xD000    BEQ	L__is_brick_hit425
0x0EEA	0xE026    B	L_is_brick_hit129
L__is_brick_hit426:
L__is_brick_hit425:
0x0EEC	0x2006    MOVS	R0, #6
0x0EEE	0xFB00F102  MUL	R1, R0, R2
0x0EF2	0x483B    LDR	R0, [PC, #236]
0x0EF4	0x1840    ADDS	R0, R0, R1
0x0EF6	0x1D00    ADDS	R0, R0, #4
0x0EF8	0x7800    LDRB	R0, [R0, #0]
0x0EFA	0x1E41    SUBS	R1, R0, #1
0x0EFC	0xB209    SXTH	R1, R1
0x0EFE	0x483B    LDR	R0, [PC, #236]
0x0F00	0x7800    LDRB	R0, [R0, #0]
0x0F02	0x4288    CMP	R0, R1
0x0F04	0xD119    BNE	L__is_brick_hit427
; is_hit end address is: 12 (R3)
L__is_brick_hit384:
;MatrixRGB_Demo_Project.c, 521 :: 		brick_side_horiz = LEFT_SIDE;
0x0F06	0x2103    MOVS	R1, #3
0x0F08	0x4839    LDR	R0, [PC, #228]
0x0F0A	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 522 :: 		ball_dir_horiz = LEFT;
0x0F0C	0x2100    MOVS	R1, #0
0x0F0E	0x4833    LDR	R0, [PC, #204]
0x0F10	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 523 :: 		ball_dir_vert = DOWN;
0x0F12	0x2101    MOVS	R1, #1
0x0F14	0x4833    LDR	R0, [PC, #204]
0x0F16	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 524 :: 		bricks[i].active = false;
0x0F18	0x2006    MOVS	R0, #6
0x0F1A	0xFB00F102  MUL	R1, R0, R2
0x0F1E	0x4830    LDR	R0, [PC, #192]
0x0F20	0x1840    ADDS	R0, R0, R1
0x0F22	0x1D41    ADDS	R1, R0, #5
0x0F24	0x2000    MOVS	R0, #0
0x0F26	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 525 :: 		erase_brick( i );
0x0F28	0xF88D2004  STRB	R2, [SP, #4]
0x0F2C	0xB2D0    UXTB	R0, R2
0x0F2E	0xF7FFFAA9  BL	_erase_brick+0
0x0F32	0xF89D2004  LDRB	R2, [SP, #4]
;MatrixRGB_Demo_Project.c, 526 :: 		is_hit = true;
; is_hit start address is: 0 (R0)
0x0F36	0x2001    MOVS	R0, #1
;MatrixRGB_Demo_Project.c, 527 :: 		}
; is_hit end address is: 0 (R0)
0x0F38	0xE079    B	L_is_brick_hit130
L_is_brick_hit129:
;MatrixRGB_Demo_Project.c, 519 :: 		if ( ( ball_curr_pos.row == bricks[i].row || ball_curr_pos.row == bricks[i].row + 1 ) && ball_curr_pos.col == bricks[i].col - 1 )
; is_hit start address is: 12 (R3)
L__is_brick_hit427:
;MatrixRGB_Demo_Project.c, 528 :: 		else if ( ball_curr_pos.row == bricks[i].row - 1 && ( ball_curr_pos.col == bricks[i].col - 1 || ball_curr_pos.col == bricks[i].col || ball_curr_pos.col == bricks[i].col + 1 || ball_curr_pos.col == bricks[i].col + 2 || ball_curr_pos.col == bricks[i].col + 3 ) )
0x0F3A	0x2006    MOVS	R0, #6
0x0F3C	0xFB00F102  MUL	R1, R0, R2
0x0F40	0x4827    LDR	R0, [PC, #156]
0x0F42	0x1840    ADDS	R0, R0, R1
0x0F44	0x1CC0    ADDS	R0, R0, #3
0x0F46	0x7800    LDRB	R0, [R0, #0]
0x0F48	0x1E41    SUBS	R1, R0, #1
0x0F4A	0xB209    SXTH	R1, R1
0x0F4C	0x4826    LDR	R0, [PC, #152]
0x0F4E	0x7800    LDRB	R0, [R0, #0]
0x0F50	0x4288    CMP	R0, R1
0x0F52	0xF040806B  BNE	L__is_brick_hit484
0x0F56	0x2006    MOVS	R0, #6
0x0F58	0xFB00F102  MUL	R1, R0, R2
0x0F5C	0x4820    LDR	R0, [PC, #128]
0x0F5E	0x1840    ADDS	R0, R0, R1
0x0F60	0x1D00    ADDS	R0, R0, #4
0x0F62	0x7800    LDRB	R0, [R0, #0]
0x0F64	0x1E41    SUBS	R1, R0, #1
0x0F66	0xB209    SXTH	R1, R1
0x0F68	0x4820    LDR	R0, [PC, #128]
0x0F6A	0x7800    LDRB	R0, [R0, #0]
0x0F6C	0x4288    CMP	R0, R1
0x0F6E	0xD043    BEQ	L__is_brick_hit432
0x0F70	0x2006    MOVS	R0, #6
0x0F72	0xFB00F102  MUL	R1, R0, R2
0x0F76	0x481A    LDR	R0, [PC, #104]
0x0F78	0x1840    ADDS	R0, R0, R1
0x0F7A	0x1D00    ADDS	R0, R0, #4
0x0F7C	0x7801    LDRB	R1, [R0, #0]
0x0F7E	0x481B    LDR	R0, [PC, #108]
0x0F80	0x7800    LDRB	R0, [R0, #0]
0x0F82	0x4288    CMP	R0, R1
0x0F84	0xD038    BEQ	L__is_brick_hit431
0x0F86	0x2006    MOVS	R0, #6
0x0F88	0xFB00F102  MUL	R1, R0, R2
0x0F8C	0x4814    LDR	R0, [PC, #80]
0x0F8E	0x1840    ADDS	R0, R0, R1
0x0F90	0x1D00    ADDS	R0, R0, #4
0x0F92	0x7800    LDRB	R0, [R0, #0]
0x0F94	0x1C41    ADDS	R1, R0, #1
0x0F96	0xB209    SXTH	R1, R1
0x0F98	0x4814    LDR	R0, [PC, #80]
0x0F9A	0x7800    LDRB	R0, [R0, #0]
0x0F9C	0x4288    CMP	R0, R1
0x0F9E	0xD02B    BEQ	L__is_brick_hit430
0x0FA0	0x2006    MOVS	R0, #6
0x0FA2	0xFB00F102  MUL	R1, R0, R2
0x0FA6	0x480E    LDR	R0, [PC, #56]
0x0FA8	0x1840    ADDS	R0, R0, R1
0x0FAA	0x1D00    ADDS	R0, R0, #4
0x0FAC	0x7800    LDRB	R0, [R0, #0]
0x0FAE	0x1C81    ADDS	R1, R0, #2
0x0FB0	0xB209    SXTH	R1, R1
0x0FB2	0x480E    LDR	R0, [PC, #56]
0x0FB4	0x7800    LDRB	R0, [R0, #0]
0x0FB6	0x4288    CMP	R0, R1
0x0FB8	0xD01E    BEQ	L__is_brick_hit429
0x0FBA	0x2006    MOVS	R0, #6
0x0FBC	0xFB00F102  MUL	R1, R0, R2
0x0FC0	0x4807    LDR	R0, [PC, #28]
0x0FC2	0x1840    ADDS	R0, R0, R1
0x0FC4	0x1D00    ADDS	R0, R0, #4
0x0FC6	0x7800    LDRB	R0, [R0, #0]
0x0FC8	0x1CC1    ADDS	R1, R0, #3
0x0FCA	0xB209    SXTH	R1, R1
0x0FCC	0x4807    LDR	R0, [PC, #28]
0x0FCE	0x7800    LDRB	R0, [R0, #0]
0x0FD0	0x4288    CMP	R0, R1
0x0FD2	0xD011    BEQ	L__is_brick_hit428
0x0FD4	0xB2D8    UXTB	R0, R3
; is_hit end address is: 12 (R3)
0x0FD6	0xE028    B	L_is_brick_hit135
0x0FD8	0xF000B80E  B	#28
0x0FDC	0x00042000  	_ball_dir_horiz+0
0x0FE0	0x08802000  	_bricks+0
0x0FE4	0x00032000  	_ball_dir_vert+0
0x0FE8	0x087E2000  	_ball_curr_pos+0
0x0FEC	0x087F2000  	_ball_curr_pos+1
0x0FF0	0x09A02000  	_brick_side_horiz+0
0x0FF4	0x09A12000  	_brick_side_vert+0
L__is_brick_hit432:
L__is_brick_hit431:
L__is_brick_hit430:
L__is_brick_hit429:
L__is_brick_hit428:
L__is_brick_hit382:
;MatrixRGB_Demo_Project.c, 530 :: 		brick_side_vert = TOP_SIDE;
0x0FF8	0x2100    MOVS	R1, #0
0x0FFA	0x48AF    LDR	R0, [PC, #700]
0x0FFC	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 531 :: 		ball_dir_horiz = RIGHT;
0x0FFE	0x2101    MOVS	R1, #1
0x1000	0x48AE    LDR	R0, [PC, #696]
0x1002	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 532 :: 		ball_dir_vert = UP;
0x1004	0x2100    MOVS	R1, #0
0x1006	0x48AE    LDR	R0, [PC, #696]
0x1008	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 533 :: 		bricks[i].active = false;
0x100A	0x2006    MOVS	R0, #6
0x100C	0xFB00F102  MUL	R1, R0, R2
0x1010	0x48AC    LDR	R0, [PC, #688]
0x1012	0x1840    ADDS	R0, R0, R1
0x1014	0x1D41    ADDS	R1, R0, #5
0x1016	0x2000    MOVS	R0, #0
0x1018	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 534 :: 		erase_brick( i );
0x101A	0xF88D2004  STRB	R2, [SP, #4]
0x101E	0xB2D0    UXTB	R0, R2
0x1020	0xF7FFFA30  BL	_erase_brick+0
0x1024	0xF89D2004  LDRB	R2, [SP, #4]
;MatrixRGB_Demo_Project.c, 535 :: 		is_hit = true;
; is_hit start address is: 0 (R0)
0x1028	0x2001    MOVS	R0, #1
; is_hit end address is: 0 (R0)
;MatrixRGB_Demo_Project.c, 536 :: 		}
L_is_brick_hit135:
;MatrixRGB_Demo_Project.c, 528 :: 		else if ( ball_curr_pos.row == bricks[i].row - 1 && ( ball_curr_pos.col == bricks[i].col - 1 || ball_curr_pos.col == bricks[i].col || ball_curr_pos.col == bricks[i].col + 1 || ball_curr_pos.col == bricks[i].col + 2 || ball_curr_pos.col == bricks[i].col + 3 ) )
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
0x102A	0xE000    B	L__is_brick_hit433
L__is_brick_hit484:
0x102C	0xB2D8    UXTB	R0, R3
L__is_brick_hit433:
;MatrixRGB_Demo_Project.c, 536 :: 		}
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
L_is_brick_hit130:
;MatrixRGB_Demo_Project.c, 538 :: 		}
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
0x102E	0xE000    B	L_is_brick_hit124
L__is_brick_hit485:
;MatrixRGB_Demo_Project.c, 517 :: 		else if ( ball_dir_horiz == RIGHT )
0x1030	0xB2D8    UXTB	R0, R3
;MatrixRGB_Demo_Project.c, 538 :: 		}
L_is_brick_hit124:
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
L_is_brick_hit123:
;MatrixRGB_Demo_Project.c, 539 :: 		}
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
0x1032	0xE000    B	L_is_brick_hit110
L__is_brick_hit486:
;MatrixRGB_Demo_Project.c, 494 :: 		else if ( ball_dir_vert == DOWN )
0x1034	0xB2D8    UXTB	R0, R3
;MatrixRGB_Demo_Project.c, 539 :: 		}
L_is_brick_hit110:
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
L_is_brick_hit109:
;MatrixRGB_Demo_Project.c, 540 :: 		}
; is_hit start address is: 0 (R0)
0x1036	0xB2C3    UXTB	R3, R0
; is_hit end address is: 0 (R0)
0x1038	0xF000BB5C  B	L_is_brick_hit136
L_is_brick_hit82:
;MatrixRGB_Demo_Project.c, 541 :: 		else if ( player_surface == LEFT_SURFACE || player_surface == RIGHT_SURFACE )
; is_hit start address is: 12 (R3)
0x103C	0x48A2    LDR	R0, [PC, #648]
0x103E	0x7800    LDRB	R0, [R0, #0]
0x1040	0xB130    CBZ	R0, L__is_brick_hit435
0x1042	0x48A1    LDR	R0, [PC, #644]
0x1044	0x7800    LDRB	R0, [R0, #0]
0x1046	0x2802    CMP	R0, #2
0x1048	0xD002    BEQ	L__is_brick_hit434
0x104A	0xB2D8    UXTB	R0, R3
0x104C	0xF000BB51  B	L_is_brick_hit139
L__is_brick_hit435:
L__is_brick_hit434:
;MatrixRGB_Demo_Project.c, 543 :: 		if ( ball_dir_vert == UP )
0x1050	0x489B    LDR	R0, [PC, #620]
0x1052	0x7800    LDRB	R0, [R0, #0]
0x1054	0x2800    CMP	R0, #0
0x1056	0xF04081A6  BNE	L_is_brick_hit140
;MatrixRGB_Demo_Project.c, 545 :: 		if ( ball_dir_horiz == LEFT )
0x105A	0x4898    LDR	R0, [PC, #608]
0x105C	0x7800    LDRB	R0, [R0, #0]
0x105E	0x2800    CMP	R0, #0
0x1060	0xF04080C5  BNE	L_is_brick_hit141
;MatrixRGB_Demo_Project.c, 547 :: 		if ( ( ball_curr_pos.row == bricks[i].row || ball_curr_pos.row == bricks[i].row + 1 ) && ( ball_curr_pos.col == bricks[i].col + 4 || ball_curr_pos.col == bricks[i].col + 3 ) )
0x1064	0x2006    MOVS	R0, #6
0x1066	0xFB00F102  MUL	R1, R0, R2
0x106A	0x4896    LDR	R0, [PC, #600]
0x106C	0x1840    ADDS	R0, R0, R1
0x106E	0x1CC0    ADDS	R0, R0, #3
0x1070	0x7801    LDRB	R1, [R0, #0]
0x1072	0x4896    LDR	R0, [PC, #600]
0x1074	0x7800    LDRB	R0, [R0, #0]
0x1076	0x4288    CMP	R0, R1
0x1078	0xD00D    BEQ	L__is_brick_hit437
0x107A	0x2006    MOVS	R0, #6
0x107C	0xFB00F102  MUL	R1, R0, R2
0x1080	0x4890    LDR	R0, [PC, #576]
0x1082	0x1840    ADDS	R0, R0, R1
0x1084	0x1CC0    ADDS	R0, R0, #3
0x1086	0x7800    LDRB	R0, [R0, #0]
0x1088	0x1C41    ADDS	R1, R0, #1
0x108A	0xB209    SXTH	R1, R1
0x108C	0x488F    LDR	R0, [PC, #572]
0x108E	0x7800    LDRB	R0, [R0, #0]
0x1090	0x4288    CMP	R0, R1
0x1092	0xD000    BEQ	L__is_brick_hit436
0x1094	0xE034    B	L_is_brick_hit148
L__is_brick_hit437:
L__is_brick_hit436:
0x1096	0x2006    MOVS	R0, #6
0x1098	0xFB00F102  MUL	R1, R0, R2
0x109C	0x4889    LDR	R0, [PC, #548]
0x109E	0x1840    ADDS	R0, R0, R1
0x10A0	0x1D00    ADDS	R0, R0, #4
0x10A2	0x7800    LDRB	R0, [R0, #0]
0x10A4	0x1D01    ADDS	R1, R0, #4
0x10A6	0xB209    SXTH	R1, R1
0x10A8	0x4889    LDR	R0, [PC, #548]
0x10AA	0x7800    LDRB	R0, [R0, #0]
0x10AC	0x4288    CMP	R0, R1
0x10AE	0xD00D    BEQ	L__is_brick_hit439
0x10B0	0x2006    MOVS	R0, #6
0x10B2	0xFB00F102  MUL	R1, R0, R2
0x10B6	0x4883    LDR	R0, [PC, #524]
0x10B8	0x1840    ADDS	R0, R0, R1
0x10BA	0x1D00    ADDS	R0, R0, #4
0x10BC	0x7800    LDRB	R0, [R0, #0]
0x10BE	0x1CC1    ADDS	R1, R0, #3
0x10C0	0xB209    SXTH	R1, R1
0x10C2	0x4883    LDR	R0, [PC, #524]
0x10C4	0x7800    LDRB	R0, [R0, #0]
0x10C6	0x4288    CMP	R0, R1
0x10C8	0xD000    BEQ	L__is_brick_hit438
0x10CA	0xE019    B	L_is_brick_hit148
; is_hit end address is: 12 (R3)
L__is_brick_hit439:
L__is_brick_hit438:
L__is_brick_hit378:
;MatrixRGB_Demo_Project.c, 549 :: 		brick_side_horiz = RIGHT_SIDE;
0x10CC	0x2102    MOVS	R1, #2
0x10CE	0x4881    LDR	R0, [PC, #516]
0x10D0	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 550 :: 		ball_dir_vert = UP;
0x10D2	0x2100    MOVS	R1, #0
0x10D4	0x487A    LDR	R0, [PC, #488]
0x10D6	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 551 :: 		ball_dir_horiz = RIGHT;
0x10D8	0x2101    MOVS	R1, #1
0x10DA	0x4878    LDR	R0, [PC, #480]
0x10DC	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 552 :: 		bricks[i].active = false;
0x10DE	0x2006    MOVS	R0, #6
0x10E0	0xFB00F102  MUL	R1, R0, R2
0x10E4	0x4877    LDR	R0, [PC, #476]
0x10E6	0x1840    ADDS	R0, R0, R1
0x10E8	0x1D41    ADDS	R1, R0, #5
0x10EA	0x2000    MOVS	R0, #0
0x10EC	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 553 :: 		erase_brick( i );
0x10EE	0xF88D2004  STRB	R2, [SP, #4]
0x10F2	0xB2D0    UXTB	R0, R2
0x10F4	0xF7FFF9C6  BL	_erase_brick+0
0x10F8	0xF89D2004  LDRB	R2, [SP, #4]
;MatrixRGB_Demo_Project.c, 554 :: 		is_hit = true;
; is_hit start address is: 0 (R0)
0x10FC	0x2001    MOVS	R0, #1
;MatrixRGB_Demo_Project.c, 555 :: 		}
; is_hit end address is: 0 (R0)
0x10FE	0xE075    B	L_is_brick_hit149
L_is_brick_hit148:
;MatrixRGB_Demo_Project.c, 556 :: 		else if ( ( ball_curr_pos.row == bricks[i].row + 2 || ball_curr_pos.row == bricks[i].row + 1 ) && ( ball_curr_pos.col == bricks[i].col || ball_curr_pos.col == bricks[i].col + 1 || ball_curr_pos.col == bricks[i].col + 2 || ball_curr_pos.col == bricks[i].col + 3 || ball_curr_pos.col == bricks[i].col + 4 ) )
; is_hit start address is: 12 (R3)
0x1100	0x2006    MOVS	R0, #6
0x1102	0xFB00F102  MUL	R1, R0, R2
0x1106	0x486F    LDR	R0, [PC, #444]
0x1108	0x1840    ADDS	R0, R0, R1
0x110A	0x1CC0    ADDS	R0, R0, #3
0x110C	0x7800    LDRB	R0, [R0, #0]
0x110E	0x1C81    ADDS	R1, R0, #2
0x1110	0xB209    SXTH	R1, R1
0x1112	0x486E    LDR	R0, [PC, #440]
0x1114	0x7800    LDRB	R0, [R0, #0]
0x1116	0x4288    CMP	R0, R1
0x1118	0xD00E    BEQ	L__is_brick_hit441
0x111A	0x2006    MOVS	R0, #6
0x111C	0xFB00F102  MUL	R1, R0, R2
0x1120	0x4868    LDR	R0, [PC, #416]
0x1122	0x1840    ADDS	R0, R0, R1
0x1124	0x1CC0    ADDS	R0, R0, #3
0x1126	0x7800    LDRB	R0, [R0, #0]
0x1128	0x1C41    ADDS	R1, R0, #1
0x112A	0xB209    SXTH	R1, R1
0x112C	0x4867    LDR	R0, [PC, #412]
0x112E	0x7800    LDRB	R0, [R0, #0]
0x1130	0x4288    CMP	R0, R1
0x1132	0xD001    BEQ	L__is_brick_hit440
0x1134	0xB2D8    UXTB	R0, R3
0x1136	0xE059    B	L_is_brick_hit156
L__is_brick_hit441:
L__is_brick_hit440:
0x1138	0x2006    MOVS	R0, #6
0x113A	0xFB00F102  MUL	R1, R0, R2
0x113E	0x4861    LDR	R0, [PC, #388]
0x1140	0x1840    ADDS	R0, R0, R1
0x1142	0x1D00    ADDS	R0, R0, #4
0x1144	0x7801    LDRB	R1, [R0, #0]
0x1146	0x4862    LDR	R0, [PC, #392]
0x1148	0x7800    LDRB	R0, [R0, #0]
0x114A	0x4288    CMP	R0, R1
0x114C	0xD035    BEQ	L__is_brick_hit446
0x114E	0x2006    MOVS	R0, #6
0x1150	0xFB00F102  MUL	R1, R0, R2
0x1154	0x485B    LDR	R0, [PC, #364]
0x1156	0x1840    ADDS	R0, R0, R1
0x1158	0x1D00    ADDS	R0, R0, #4
0x115A	0x7800    LDRB	R0, [R0, #0]
0x115C	0x1C41    ADDS	R1, R0, #1
0x115E	0xB209    SXTH	R1, R1
0x1160	0x485B    LDR	R0, [PC, #364]
0x1162	0x7800    LDRB	R0, [R0, #0]
0x1164	0x4288    CMP	R0, R1
0x1166	0xD028    BEQ	L__is_brick_hit445
0x1168	0x2006    MOVS	R0, #6
0x116A	0xFB00F102  MUL	R1, R0, R2
0x116E	0x4855    LDR	R0, [PC, #340]
0x1170	0x1840    ADDS	R0, R0, R1
0x1172	0x1D00    ADDS	R0, R0, #4
0x1174	0x7800    LDRB	R0, [R0, #0]
0x1176	0x1C81    ADDS	R1, R0, #2
0x1178	0xB209    SXTH	R1, R1
0x117A	0x4855    LDR	R0, [PC, #340]
0x117C	0x7800    LDRB	R0, [R0, #0]
0x117E	0x4288    CMP	R0, R1
0x1180	0xD01B    BEQ	L__is_brick_hit444
0x1182	0x2006    MOVS	R0, #6
0x1184	0xFB00F102  MUL	R1, R0, R2
0x1188	0x484E    LDR	R0, [PC, #312]
0x118A	0x1840    ADDS	R0, R0, R1
0x118C	0x1D00    ADDS	R0, R0, #4
0x118E	0x7800    LDRB	R0, [R0, #0]
0x1190	0x1CC1    ADDS	R1, R0, #3
0x1192	0xB209    SXTH	R1, R1
0x1194	0x484E    LDR	R0, [PC, #312]
0x1196	0x7800    LDRB	R0, [R0, #0]
0x1198	0x4288    CMP	R0, R1
0x119A	0xD00E    BEQ	L__is_brick_hit443
0x119C	0x2006    MOVS	R0, #6
0x119E	0xFB00F102  MUL	R1, R0, R2
0x11A2	0x4848    LDR	R0, [PC, #288]
0x11A4	0x1840    ADDS	R0, R0, R1
0x11A6	0x1D00    ADDS	R0, R0, #4
0x11A8	0x7800    LDRB	R0, [R0, #0]
0x11AA	0x1D01    ADDS	R1, R0, #4
0x11AC	0xB209    SXTH	R1, R1
0x11AE	0x4848    LDR	R0, [PC, #288]
0x11B0	0x7800    LDRB	R0, [R0, #0]
0x11B2	0x4288    CMP	R0, R1
0x11B4	0xD001    BEQ	L__is_brick_hit442
0x11B6	0xB2D8    UXTB	R0, R3
; is_hit end address is: 12 (R3)
0x11B8	0xE018    B	L_is_brick_hit156
L__is_brick_hit446:
L__is_brick_hit445:
L__is_brick_hit444:
L__is_brick_hit443:
L__is_brick_hit442:
L__is_brick_hit375:
;MatrixRGB_Demo_Project.c, 558 :: 		brick_side_vert = BOTTOM_SIDE;
0x11BA	0x2101    MOVS	R1, #1
0x11BC	0x483E    LDR	R0, [PC, #248]
0x11BE	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 559 :: 		ball_dir_horiz = LEFT;
0x11C0	0x2100    MOVS	R1, #0
0x11C2	0x483E    LDR	R0, [PC, #248]
0x11C4	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 560 :: 		ball_dir_vert = DOWN;
0x11C6	0x2101    MOVS	R1, #1
0x11C8	0x483D    LDR	R0, [PC, #244]
0x11CA	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 561 :: 		bricks[i].active = false;
0x11CC	0x2006    MOVS	R0, #6
0x11CE	0xFB00F102  MUL	R1, R0, R2
0x11D2	0x483C    LDR	R0, [PC, #240]
0x11D4	0x1840    ADDS	R0, R0, R1
0x11D6	0x1D41    ADDS	R1, R0, #5
0x11D8	0x2000    MOVS	R0, #0
0x11DA	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 562 :: 		erase_brick( i );
0x11DC	0xF88D2004  STRB	R2, [SP, #4]
0x11E0	0xB2D0    UXTB	R0, R2
0x11E2	0xF7FFF94F  BL	_erase_brick+0
0x11E6	0xF89D2004  LDRB	R2, [SP, #4]
;MatrixRGB_Demo_Project.c, 563 :: 		is_hit = true;
; is_hit start address is: 0 (R0)
0x11EA	0x2001    MOVS	R0, #1
; is_hit end address is: 0 (R0)
;MatrixRGB_Demo_Project.c, 564 :: 		}
L_is_brick_hit156:
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
L_is_brick_hit149:
;MatrixRGB_Demo_Project.c, 565 :: 		}
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
0x11EC	0xE0DA    B	L_is_brick_hit157
L_is_brick_hit141:
;MatrixRGB_Demo_Project.c, 566 :: 		else if ( ball_dir_horiz == RIGHT )
; is_hit start address is: 12 (R3)
0x11EE	0x4833    LDR	R0, [PC, #204]
0x11F0	0x7800    LDRB	R0, [R0, #0]
0x11F2	0x2801    CMP	R0, #1
0x11F4	0xF04080D5  BNE	L__is_brick_hit487
;MatrixRGB_Demo_Project.c, 568 :: 		if ( ( ball_curr_pos.row == bricks[i].row || ball_curr_pos.row == bricks[i].row + 1 ) && ( ball_curr_pos.col == bricks[i].col - 1 || ball_curr_pos.col == bricks[i].col ) )
0x11F8	0x2006    MOVS	R0, #6
0x11FA	0xFB00F102  MUL	R1, R0, R2
0x11FE	0x4831    LDR	R0, [PC, #196]
0x1200	0x1840    ADDS	R0, R0, R1
0x1202	0x1CC0    ADDS	R0, R0, #3
0x1204	0x7801    LDRB	R1, [R0, #0]
0x1206	0x4831    LDR	R0, [PC, #196]
0x1208	0x7800    LDRB	R0, [R0, #0]
0x120A	0x4288    CMP	R0, R1
0x120C	0xD00D    BEQ	L__is_brick_hit448
0x120E	0x2006    MOVS	R0, #6
0x1210	0xFB00F102  MUL	R1, R0, R2
0x1214	0x482B    LDR	R0, [PC, #172]
0x1216	0x1840    ADDS	R0, R0, R1
0x1218	0x1CC0    ADDS	R0, R0, #3
0x121A	0x7800    LDRB	R0, [R0, #0]
0x121C	0x1C41    ADDS	R1, R0, #1
0x121E	0xB209    SXTH	R1, R1
0x1220	0x482A    LDR	R0, [PC, #168]
0x1222	0x7800    LDRB	R0, [R0, #0]
0x1224	0x4288    CMP	R0, R1
0x1226	0xD000    BEQ	L__is_brick_hit447
0x1228	0xE032    B	L_is_brick_hit165
L__is_brick_hit448:
L__is_brick_hit447:
0x122A	0x2006    MOVS	R0, #6
0x122C	0xFB00F102  MUL	R1, R0, R2
0x1230	0x4824    LDR	R0, [PC, #144]
0x1232	0x1840    ADDS	R0, R0, R1
0x1234	0x1D00    ADDS	R0, R0, #4
0x1236	0x7800    LDRB	R0, [R0, #0]
0x1238	0x1E41    SUBS	R1, R0, #1
0x123A	0xB209    SXTH	R1, R1
0x123C	0x4824    LDR	R0, [PC, #144]
0x123E	0x7800    LDRB	R0, [R0, #0]
0x1240	0x4288    CMP	R0, R1
0x1242	0xD00B    BEQ	L__is_brick_hit450
0x1244	0x2006    MOVS	R0, #6
0x1246	0xFB00F102  MUL	R1, R0, R2
0x124A	0x481E    LDR	R0, [PC, #120]
0x124C	0x1840    ADDS	R0, R0, R1
0x124E	0x1D00    ADDS	R0, R0, #4
0x1250	0x7801    LDRB	R1, [R0, #0]
0x1252	0x481F    LDR	R0, [PC, #124]
0x1254	0x7800    LDRB	R0, [R0, #0]
0x1256	0x4288    CMP	R0, R1
0x1258	0xD000    BEQ	L__is_brick_hit449
0x125A	0xE019    B	L_is_brick_hit165
; is_hit end address is: 12 (R3)
L__is_brick_hit450:
L__is_brick_hit449:
L__is_brick_hit372:
;MatrixRGB_Demo_Project.c, 570 :: 		brick_side_horiz = LEFT_SIDE;
0x125C	0x2103    MOVS	R1, #3
0x125E	0x481D    LDR	R0, [PC, #116]
0x1260	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 571 :: 		ball_dir_vert = UP;
0x1262	0x2100    MOVS	R1, #0
0x1264	0x4816    LDR	R0, [PC, #88]
0x1266	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 572 :: 		ball_dir_horiz = LEFT;
0x1268	0x2100    MOVS	R1, #0
0x126A	0x4814    LDR	R0, [PC, #80]
0x126C	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 573 :: 		bricks[i].active = false;
0x126E	0x2006    MOVS	R0, #6
0x1270	0xFB00F102  MUL	R1, R0, R2
0x1274	0x4813    LDR	R0, [PC, #76]
0x1276	0x1840    ADDS	R0, R0, R1
0x1278	0x1D41    ADDS	R1, R0, #5
0x127A	0x2000    MOVS	R0, #0
0x127C	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 574 :: 		erase_brick( i );
0x127E	0xF88D2004  STRB	R2, [SP, #4]
0x1282	0xB2D0    UXTB	R0, R2
0x1284	0xF7FFF8FE  BL	_erase_brick+0
0x1288	0xF89D2004  LDRB	R2, [SP, #4]
;MatrixRGB_Demo_Project.c, 575 :: 		is_hit = true;
; is_hit start address is: 0 (R0)
0x128C	0x2001    MOVS	R0, #1
;MatrixRGB_Demo_Project.c, 576 :: 		}
; is_hit end address is: 0 (R0)
0x128E	0xE087    B	L_is_brick_hit166
L_is_brick_hit165:
;MatrixRGB_Demo_Project.c, 577 :: 		else if ( ( ball_curr_pos.row == bricks[i].row + 2 || ball_curr_pos.row == bricks[i].row + 1 ) && ( ball_curr_pos.col == bricks[i].col - 1 || ball_curr_pos.col == bricks[i].col || ball_curr_pos.col == bricks[i].col + 1 || ball_curr_pos.col == bricks[i].col + 2 || ball_curr_pos.col == bricks[i].col + 3 ) )
; is_hit start address is: 12 (R3)
0x1290	0x2006    MOVS	R0, #6
0x1292	0xFB00F102  MUL	R1, R0, R2
0x1296	0x480B    LDR	R0, [PC, #44]
0x1298	0x1840    ADDS	R0, R0, R1
0x129A	0x1CC0    ADDS	R0, R0, #3
0x129C	0x7800    LDRB	R0, [R0, #0]
0x129E	0x1C81    ADDS	R1, R0, #2
0x12A0	0xB209    SXTH	R1, R1
0x12A2	0x480A    LDR	R0, [PC, #40]
0x12A4	0x7800    LDRB	R0, [R0, #0]
0x12A6	0x4288    CMP	R0, R1
0x12A8	0xD020    BEQ	L__is_brick_hit452
0x12AA	0x2006    MOVS	R0, #6
0x12AC	0xFB00F102  MUL	R1, R0, R2
0x12B0	0x4804    LDR	R0, [PC, #16]
0x12B2	0x1840    ADDS	R0, R0, R1
0x12B4	0xF000B810  B	#32
0x12B8	0x09A12000  	_brick_side_vert+0
0x12BC	0x00042000  	_ball_dir_horiz+0
0x12C0	0x00032000  	_ball_dir_vert+0
0x12C4	0x08802000  	_bricks+0
0x12C8	0x08132000  	_player_surface+0
0x12CC	0x087E2000  	_ball_curr_pos+0
0x12D0	0x087F2000  	_ball_curr_pos+1
0x12D4	0x09A02000  	_brick_side_horiz+0
0x12D8	0x1CC0    ADDS	R0, R0, #3
0x12DA	0x7800    LDRB	R0, [R0, #0]
0x12DC	0x1C41    ADDS	R1, R0, #1
0x12DE	0xB209    SXTH	R1, R1
0x12E0	0x48AF    LDR	R0, [PC, #700]
0x12E2	0x7800    LDRB	R0, [R0, #0]
0x12E4	0x4288    CMP	R0, R1
0x12E6	0xD001    BEQ	L__is_brick_hit451
0x12E8	0xB2D8    UXTB	R0, R3
0x12EA	0xE059    B	L_is_brick_hit173
L__is_brick_hit452:
L__is_brick_hit451:
0x12EC	0x2006    MOVS	R0, #6
0x12EE	0xFB00F102  MUL	R1, R0, R2
0x12F2	0x48AC    LDR	R0, [PC, #688]
0x12F4	0x1840    ADDS	R0, R0, R1
0x12F6	0x1D00    ADDS	R0, R0, #4
0x12F8	0x7800    LDRB	R0, [R0, #0]
0x12FA	0x1E41    SUBS	R1, R0, #1
0x12FC	0xB209    SXTH	R1, R1
0x12FE	0x48AA    LDR	R0, [PC, #680]
0x1300	0x7800    LDRB	R0, [R0, #0]
0x1302	0x4288    CMP	R0, R1
0x1304	0xD033    BEQ	L__is_brick_hit457
0x1306	0x2006    MOVS	R0, #6
0x1308	0xFB00F102  MUL	R1, R0, R2
0x130C	0x48A5    LDR	R0, [PC, #660]
0x130E	0x1840    ADDS	R0, R0, R1
0x1310	0x1D00    ADDS	R0, R0, #4
0x1312	0x7801    LDRB	R1, [R0, #0]
0x1314	0x48A4    LDR	R0, [PC, #656]
0x1316	0x7800    LDRB	R0, [R0, #0]
0x1318	0x4288    CMP	R0, R1
0x131A	0xD028    BEQ	L__is_brick_hit456
0x131C	0x2006    MOVS	R0, #6
0x131E	0xFB00F102  MUL	R1, R0, R2
0x1322	0x48A0    LDR	R0, [PC, #640]
0x1324	0x1840    ADDS	R0, R0, R1
0x1326	0x1D00    ADDS	R0, R0, #4
0x1328	0x7800    LDRB	R0, [R0, #0]
0x132A	0x1C41    ADDS	R1, R0, #1
0x132C	0xB209    SXTH	R1, R1
0x132E	0x489E    LDR	R0, [PC, #632]
0x1330	0x7800    LDRB	R0, [R0, #0]
0x1332	0x4288    CMP	R0, R1
0x1334	0xD01B    BEQ	L__is_brick_hit455
0x1336	0x2006    MOVS	R0, #6
0x1338	0xFB00F102  MUL	R1, R0, R2
0x133C	0x4899    LDR	R0, [PC, #612]
0x133E	0x1840    ADDS	R0, R0, R1
0x1340	0x1D00    ADDS	R0, R0, #4
0x1342	0x7800    LDRB	R0, [R0, #0]
0x1344	0x1C81    ADDS	R1, R0, #2
0x1346	0xB209    SXTH	R1, R1
0x1348	0x4897    LDR	R0, [PC, #604]
0x134A	0x7800    LDRB	R0, [R0, #0]
0x134C	0x4288    CMP	R0, R1
0x134E	0xD00E    BEQ	L__is_brick_hit454
0x1350	0x2006    MOVS	R0, #6
0x1352	0xFB00F102  MUL	R1, R0, R2
0x1356	0x4893    LDR	R0, [PC, #588]
0x1358	0x1840    ADDS	R0, R0, R1
0x135A	0x1D00    ADDS	R0, R0, #4
0x135C	0x7800    LDRB	R0, [R0, #0]
0x135E	0x1CC1    ADDS	R1, R0, #3
0x1360	0xB209    SXTH	R1, R1
0x1362	0x4891    LDR	R0, [PC, #580]
0x1364	0x7800    LDRB	R0, [R0, #0]
0x1366	0x4288    CMP	R0, R1
0x1368	0xD001    BEQ	L__is_brick_hit453
0x136A	0xB2D8    UXTB	R0, R3
; is_hit end address is: 12 (R3)
0x136C	0xE018    B	L_is_brick_hit173
L__is_brick_hit457:
L__is_brick_hit456:
L__is_brick_hit455:
L__is_brick_hit454:
L__is_brick_hit453:
L__is_brick_hit369:
;MatrixRGB_Demo_Project.c, 579 :: 		brick_side_vert = BOTTOM_SIDE;
0x136E	0x2101    MOVS	R1, #1
0x1370	0x488E    LDR	R0, [PC, #568]
0x1372	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 580 :: 		ball_dir_vert = DOWN;
0x1374	0x2101    MOVS	R1, #1
0x1376	0x488E    LDR	R0, [PC, #568]
0x1378	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 581 :: 		ball_dir_horiz = RIGHT;
0x137A	0x2101    MOVS	R1, #1
0x137C	0x488D    LDR	R0, [PC, #564]
0x137E	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 582 :: 		bricks[i].active = false;
0x1380	0x2006    MOVS	R0, #6
0x1382	0xFB00F102  MUL	R1, R0, R2
0x1386	0x4887    LDR	R0, [PC, #540]
0x1388	0x1840    ADDS	R0, R0, R1
0x138A	0x1D41    ADDS	R1, R0, #5
0x138C	0x2000    MOVS	R0, #0
0x138E	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 583 :: 		erase_brick( i );
0x1390	0xF88D2004  STRB	R2, [SP, #4]
0x1394	0xB2D0    UXTB	R0, R2
0x1396	0xF7FFF875  BL	_erase_brick+0
0x139A	0xF89D2004  LDRB	R2, [SP, #4]
;MatrixRGB_Demo_Project.c, 584 :: 		is_hit = true;
; is_hit start address is: 0 (R0)
0x139E	0x2001    MOVS	R0, #1
; is_hit end address is: 0 (R0)
;MatrixRGB_Demo_Project.c, 585 :: 		}
L_is_brick_hit173:
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
L_is_brick_hit166:
;MatrixRGB_Demo_Project.c, 587 :: 		}
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
0x13A0	0xE000    B	L_is_brick_hit158
L__is_brick_hit487:
;MatrixRGB_Demo_Project.c, 566 :: 		else if ( ball_dir_horiz == RIGHT )
0x13A2	0xB2D8    UXTB	R0, R3
;MatrixRGB_Demo_Project.c, 587 :: 		}
L_is_brick_hit158:
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
L_is_brick_hit157:
;MatrixRGB_Demo_Project.c, 588 :: 		}
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
0x13A4	0xE1A5    B	L_is_brick_hit174
L_is_brick_hit140:
;MatrixRGB_Demo_Project.c, 589 :: 		else if ( ball_dir_vert == DOWN )
; is_hit start address is: 12 (R3)
0x13A6	0x4882    LDR	R0, [PC, #520]
0x13A8	0x7800    LDRB	R0, [R0, #0]
0x13AA	0x2801    CMP	R0, #1
0x13AC	0xF04081A0  BNE	L__is_brick_hit489
;MatrixRGB_Demo_Project.c, 591 :: 		if ( ball_dir_horiz == LEFT )
0x13B0	0x4880    LDR	R0, [PC, #512]
0x13B2	0x7800    LDRB	R0, [R0, #0]
0x13B4	0x2800    CMP	R0, #0
0x13B6	0xF04080C3  BNE	L_is_brick_hit176
;MatrixRGB_Demo_Project.c, 593 :: 		if ( ( ball_curr_pos.row == bricks[i].row || ball_curr_pos.row == bricks[i].row + 1 ) && ( ball_curr_pos.col == bricks[i].col + 4 || ball_curr_pos.col == bricks[i].col + 3 ) )
0x13BA	0x2006    MOVS	R0, #6
0x13BC	0xFB00F102  MUL	R1, R0, R2
0x13C0	0x4878    LDR	R0, [PC, #480]
0x13C2	0x1840    ADDS	R0, R0, R1
0x13C4	0x1CC0    ADDS	R0, R0, #3
0x13C6	0x7801    LDRB	R1, [R0, #0]
0x13C8	0x4875    LDR	R0, [PC, #468]
0x13CA	0x7800    LDRB	R0, [R0, #0]
0x13CC	0x4288    CMP	R0, R1
0x13CE	0xD00D    BEQ	L__is_brick_hit459
0x13D0	0x2006    MOVS	R0, #6
0x13D2	0xFB00F102  MUL	R1, R0, R2
0x13D6	0x4873    LDR	R0, [PC, #460]
0x13D8	0x1840    ADDS	R0, R0, R1
0x13DA	0x1CC0    ADDS	R0, R0, #3
0x13DC	0x7800    LDRB	R0, [R0, #0]
0x13DE	0x1C41    ADDS	R1, R0, #1
0x13E0	0xB209    SXTH	R1, R1
0x13E2	0x486F    LDR	R0, [PC, #444]
0x13E4	0x7800    LDRB	R0, [R0, #0]
0x13E6	0x4288    CMP	R0, R1
0x13E8	0xD000    BEQ	L__is_brick_hit458
0x13EA	0xE034    B	L_is_brick_hit183
L__is_brick_hit459:
L__is_brick_hit458:
0x13EC	0x2006    MOVS	R0, #6
0x13EE	0xFB00F102  MUL	R1, R0, R2
0x13F2	0x486C    LDR	R0, [PC, #432]
0x13F4	0x1840    ADDS	R0, R0, R1
0x13F6	0x1D00    ADDS	R0, R0, #4
0x13F8	0x7800    LDRB	R0, [R0, #0]
0x13FA	0x1D01    ADDS	R1, R0, #4
0x13FC	0xB209    SXTH	R1, R1
0x13FE	0x486A    LDR	R0, [PC, #424]
0x1400	0x7800    LDRB	R0, [R0, #0]
0x1402	0x4288    CMP	R0, R1
0x1404	0xD00D    BEQ	L__is_brick_hit461
0x1406	0x2006    MOVS	R0, #6
0x1408	0xFB00F102  MUL	R1, R0, R2
0x140C	0x4865    LDR	R0, [PC, #404]
0x140E	0x1840    ADDS	R0, R0, R1
0x1410	0x1D00    ADDS	R0, R0, #4
0x1412	0x7800    LDRB	R0, [R0, #0]
0x1414	0x1CC1    ADDS	R1, R0, #3
0x1416	0xB209    SXTH	R1, R1
0x1418	0x4863    LDR	R0, [PC, #396]
0x141A	0x7800    LDRB	R0, [R0, #0]
0x141C	0x4288    CMP	R0, R1
0x141E	0xD000    BEQ	L__is_brick_hit460
0x1420	0xE019    B	L_is_brick_hit183
; is_hit end address is: 12 (R3)
L__is_brick_hit461:
L__is_brick_hit460:
L__is_brick_hit366:
;MatrixRGB_Demo_Project.c, 595 :: 		brick_side_horiz = RIGHT_SIDE;
0x1422	0x2102    MOVS	R1, #2
0x1424	0x4864    LDR	R0, [PC, #400]
0x1426	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 596 :: 		ball_dir_horiz = RIGHT;
0x1428	0x2101    MOVS	R1, #1
0x142A	0x4862    LDR	R0, [PC, #392]
0x142C	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 597 :: 		ball_dir_vert = DOWN;
0x142E	0x2101    MOVS	R1, #1
0x1430	0x485F    LDR	R0, [PC, #380]
0x1432	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 598 :: 		bricks[i].active = false;
0x1434	0x2006    MOVS	R0, #6
0x1436	0xFB00F102  MUL	R1, R0, R2
0x143A	0x485A    LDR	R0, [PC, #360]
0x143C	0x1840    ADDS	R0, R0, R1
0x143E	0x1D41    ADDS	R1, R0, #5
0x1440	0x2000    MOVS	R0, #0
0x1442	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 599 :: 		erase_brick( i );
0x1444	0xF88D2004  STRB	R2, [SP, #4]
0x1448	0xB2D0    UXTB	R0, R2
0x144A	0xF7FFF81B  BL	_erase_brick+0
0x144E	0xF89D2004  LDRB	R2, [SP, #4]
;MatrixRGB_Demo_Project.c, 600 :: 		is_hit = true;
; is_hit start address is: 0 (R0)
0x1452	0x2001    MOVS	R0, #1
;MatrixRGB_Demo_Project.c, 601 :: 		}
; is_hit end address is: 0 (R0)
0x1454	0xE073    B	L_is_brick_hit184
L_is_brick_hit183:
;MatrixRGB_Demo_Project.c, 602 :: 		else if ( ( ball_curr_pos.row == bricks[i].row - 1 || ball_curr_pos.row == bricks[i].row ) && ( ball_curr_pos.col == bricks[i].col || ball_curr_pos.col == bricks[i].col + 1 || ball_curr_pos.col == bricks[i].col + 2 || ball_curr_pos.col == bricks[i].col + 3 || ball_curr_pos.col == bricks[i].col + 4 ) )
; is_hit start address is: 12 (R3)
0x1456	0x2006    MOVS	R0, #6
0x1458	0xFB00F102  MUL	R1, R0, R2
0x145C	0x4851    LDR	R0, [PC, #324]
0x145E	0x1840    ADDS	R0, R0, R1
0x1460	0x1CC0    ADDS	R0, R0, #3
0x1462	0x7800    LDRB	R0, [R0, #0]
0x1464	0x1E41    SUBS	R1, R0, #1
0x1466	0xB209    SXTH	R1, R1
0x1468	0x484D    LDR	R0, [PC, #308]
0x146A	0x7800    LDRB	R0, [R0, #0]
0x146C	0x4288    CMP	R0, R1
0x146E	0xD00C    BEQ	L__is_brick_hit463
0x1470	0x2006    MOVS	R0, #6
0x1472	0xFB00F102  MUL	R1, R0, R2
0x1476	0x484B    LDR	R0, [PC, #300]
0x1478	0x1840    ADDS	R0, R0, R1
0x147A	0x1CC0    ADDS	R0, R0, #3
0x147C	0x7801    LDRB	R1, [R0, #0]
0x147E	0x4848    LDR	R0, [PC, #288]
0x1480	0x7800    LDRB	R0, [R0, #0]
0x1482	0x4288    CMP	R0, R1
0x1484	0xD001    BEQ	L__is_brick_hit462
0x1486	0xB2D8    UXTB	R0, R3
0x1488	0xE059    B	L_is_brick_hit191
L__is_brick_hit463:
L__is_brick_hit462:
0x148A	0x2006    MOVS	R0, #6
0x148C	0xFB00F102  MUL	R1, R0, R2
0x1490	0x4844    LDR	R0, [PC, #272]
0x1492	0x1840    ADDS	R0, R0, R1
0x1494	0x1D00    ADDS	R0, R0, #4
0x1496	0x7801    LDRB	R1, [R0, #0]
0x1498	0x4843    LDR	R0, [PC, #268]
0x149A	0x7800    LDRB	R0, [R0, #0]
0x149C	0x4288    CMP	R0, R1
0x149E	0xD035    BEQ	L__is_brick_hit468
0x14A0	0x2006    MOVS	R0, #6
0x14A2	0xFB00F102  MUL	R1, R0, R2
0x14A6	0x483F    LDR	R0, [PC, #252]
0x14A8	0x1840    ADDS	R0, R0, R1
0x14AA	0x1D00    ADDS	R0, R0, #4
0x14AC	0x7800    LDRB	R0, [R0, #0]
0x14AE	0x1C41    ADDS	R1, R0, #1
0x14B0	0xB209    SXTH	R1, R1
0x14B2	0x483D    LDR	R0, [PC, #244]
0x14B4	0x7800    LDRB	R0, [R0, #0]
0x14B6	0x4288    CMP	R0, R1
0x14B8	0xD028    BEQ	L__is_brick_hit467
0x14BA	0x2006    MOVS	R0, #6
0x14BC	0xFB00F102  MUL	R1, R0, R2
0x14C0	0x4838    LDR	R0, [PC, #224]
0x14C2	0x1840    ADDS	R0, R0, R1
0x14C4	0x1D00    ADDS	R0, R0, #4
0x14C6	0x7800    LDRB	R0, [R0, #0]
0x14C8	0x1C81    ADDS	R1, R0, #2
0x14CA	0xB209    SXTH	R1, R1
0x14CC	0x4836    LDR	R0, [PC, #216]
0x14CE	0x7800    LDRB	R0, [R0, #0]
0x14D0	0x4288    CMP	R0, R1
0x14D2	0xD01B    BEQ	L__is_brick_hit466
0x14D4	0x2006    MOVS	R0, #6
0x14D6	0xFB00F102  MUL	R1, R0, R2
0x14DA	0x4832    LDR	R0, [PC, #200]
0x14DC	0x1840    ADDS	R0, R0, R1
0x14DE	0x1D00    ADDS	R0, R0, #4
0x14E0	0x7800    LDRB	R0, [R0, #0]
0x14E2	0x1CC1    ADDS	R1, R0, #3
0x14E4	0xB209    SXTH	R1, R1
0x14E6	0x4830    LDR	R0, [PC, #192]
0x14E8	0x7800    LDRB	R0, [R0, #0]
0x14EA	0x4288    CMP	R0, R1
0x14EC	0xD00E    BEQ	L__is_brick_hit465
0x14EE	0x2006    MOVS	R0, #6
0x14F0	0xFB00F102  MUL	R1, R0, R2
0x14F4	0x482B    LDR	R0, [PC, #172]
0x14F6	0x1840    ADDS	R0, R0, R1
0x14F8	0x1D00    ADDS	R0, R0, #4
0x14FA	0x7800    LDRB	R0, [R0, #0]
0x14FC	0x1D01    ADDS	R1, R0, #4
0x14FE	0xB209    SXTH	R1, R1
0x1500	0x4829    LDR	R0, [PC, #164]
0x1502	0x7800    LDRB	R0, [R0, #0]
0x1504	0x4288    CMP	R0, R1
0x1506	0xD001    BEQ	L__is_brick_hit464
0x1508	0xB2D8    UXTB	R0, R3
; is_hit end address is: 12 (R3)
0x150A	0xE018    B	L_is_brick_hit191
L__is_brick_hit468:
L__is_brick_hit467:
L__is_brick_hit466:
L__is_brick_hit465:
L__is_brick_hit464:
L__is_brick_hit363:
;MatrixRGB_Demo_Project.c, 604 :: 		brick_side_vert = TOP_SIDE;
0x150C	0x2100    MOVS	R1, #0
0x150E	0x4827    LDR	R0, [PC, #156]
0x1510	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 605 :: 		ball_dir_horiz = LEFT;
0x1512	0x2100    MOVS	R1, #0
0x1514	0x4827    LDR	R0, [PC, #156]
0x1516	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 606 :: 		ball_dir_vert = UP;
0x1518	0x2100    MOVS	R1, #0
0x151A	0x4825    LDR	R0, [PC, #148]
0x151C	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 607 :: 		bricks[i].active = false;
0x151E	0x2006    MOVS	R0, #6
0x1520	0xFB00F102  MUL	R1, R0, R2
0x1524	0x481F    LDR	R0, [PC, #124]
0x1526	0x1840    ADDS	R0, R0, R1
0x1528	0x1D41    ADDS	R1, R0, #5
0x152A	0x2000    MOVS	R0, #0
0x152C	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 608 :: 		erase_brick( i );
0x152E	0xF88D2004  STRB	R2, [SP, #4]
0x1532	0xB2D0    UXTB	R0, R2
0x1534	0xF7FEFFA6  BL	_erase_brick+0
0x1538	0xF89D2004  LDRB	R2, [SP, #4]
;MatrixRGB_Demo_Project.c, 609 :: 		is_hit = true;
; is_hit start address is: 0 (R0)
0x153C	0x2001    MOVS	R0, #1
; is_hit end address is: 0 (R0)
;MatrixRGB_Demo_Project.c, 610 :: 		}
L_is_brick_hit191:
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
L_is_brick_hit184:
;MatrixRGB_Demo_Project.c, 611 :: 		}
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
0x153E	0xE0D6    B	L_is_brick_hit192
L_is_brick_hit176:
;MatrixRGB_Demo_Project.c, 612 :: 		else if ( ball_dir_horiz == RIGHT )
; is_hit start address is: 12 (R3)
0x1540	0x481C    LDR	R0, [PC, #112]
0x1542	0x7800    LDRB	R0, [R0, #0]
0x1544	0x2801    CMP	R0, #1
0x1546	0xF04080D1  BNE	L__is_brick_hit488
;MatrixRGB_Demo_Project.c, 614 :: 		if ( ( ball_curr_pos.row == bricks[i].row || ball_curr_pos.row == bricks[i].row + 1 ) && ( ball_curr_pos.col == bricks[i].col - 1 || ball_curr_pos.col == bricks[i].col ) )
0x154A	0x2006    MOVS	R0, #6
0x154C	0xFB00F102  MUL	R1, R0, R2
0x1550	0x4814    LDR	R0, [PC, #80]
0x1552	0x1840    ADDS	R0, R0, R1
0x1554	0x1CC0    ADDS	R0, R0, #3
0x1556	0x7801    LDRB	R1, [R0, #0]
0x1558	0x4811    LDR	R0, [PC, #68]
0x155A	0x7800    LDRB	R0, [R0, #0]
0x155C	0x4288    CMP	R0, R1
0x155E	0xD00D    BEQ	L__is_brick_hit470
0x1560	0x2006    MOVS	R0, #6
0x1562	0xFB00F102  MUL	R1, R0, R2
0x1566	0x480F    LDR	R0, [PC, #60]
0x1568	0x1840    ADDS	R0, R0, R1
0x156A	0x1CC0    ADDS	R0, R0, #3
0x156C	0x7800    LDRB	R0, [R0, #0]
0x156E	0x1C41    ADDS	R1, R0, #1
0x1570	0xB209    SXTH	R1, R1
0x1572	0x480B    LDR	R0, [PC, #44]
0x1574	0x7800    LDRB	R0, [R0, #0]
0x1576	0x4288    CMP	R0, R1
0x1578	0xD000    BEQ	L__is_brick_hit469
0x157A	0xE042    B	L_is_brick_hit200
L__is_brick_hit470:
L__is_brick_hit469:
0x157C	0x2006    MOVS	R0, #6
0x157E	0xFB00F102  MUL	R1, R0, R2
0x1582	0x4808    LDR	R0, [PC, #32]
0x1584	0x1840    ADDS	R0, R0, R1
0x1586	0x1D00    ADDS	R0, R0, #4
0x1588	0x7800    LDRB	R0, [R0, #0]
0x158A	0x1E41    SUBS	R1, R0, #1
0x158C	0xB209    SXTH	R1, R1
0x158E	0x4806    LDR	R0, [PC, #24]
0x1590	0x7800    LDRB	R0, [R0, #0]
0x1592	0x4288    CMP	R0, R1
0x1594	0xD01B    BEQ	L__is_brick_hit472
0x1596	0x2006    MOVS	R0, #6
0x1598	0xFB00F102  MUL	R1, R0, R2
0x159C	0xF000B80E  B	#28
0x15A0	0x087E2000  	_ball_curr_pos+0
0x15A4	0x08802000  	_bricks+0
0x15A8	0x087F2000  	_ball_curr_pos+1
0x15AC	0x09A12000  	_brick_side_vert+0
0x15B0	0x00032000  	_ball_dir_vert+0
0x15B4	0x00042000  	_ball_dir_horiz+0
0x15B8	0x09A02000  	_brick_side_horiz+0
0x15BC	0x4852    LDR	R0, [PC, #328]
0x15BE	0x1840    ADDS	R0, R0, R1
0x15C0	0x1D00    ADDS	R0, R0, #4
0x15C2	0x7801    LDRB	R1, [R0, #0]
0x15C4	0x4851    LDR	R0, [PC, #324]
0x15C6	0x7800    LDRB	R0, [R0, #0]
0x15C8	0x4288    CMP	R0, R1
0x15CA	0xD000    BEQ	L__is_brick_hit471
0x15CC	0xE019    B	L_is_brick_hit200
; is_hit end address is: 12 (R3)
L__is_brick_hit472:
L__is_brick_hit471:
L__is_brick_hit360:
;MatrixRGB_Demo_Project.c, 616 :: 		brick_side_horiz = LEFT_SIDE;
0x15CE	0x2103    MOVS	R1, #3
0x15D0	0x484F    LDR	R0, [PC, #316]
0x15D2	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 617 :: 		ball_dir_horiz = LEFT;
0x15D4	0x2100    MOVS	R1, #0
0x15D6	0x484F    LDR	R0, [PC, #316]
0x15D8	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 618 :: 		ball_dir_vert = DOWN;
0x15DA	0x2101    MOVS	R1, #1
0x15DC	0x484E    LDR	R0, [PC, #312]
0x15DE	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 619 :: 		bricks[i].active = false;
0x15E0	0x2006    MOVS	R0, #6
0x15E2	0xFB00F102  MUL	R1, R0, R2
0x15E6	0x4848    LDR	R0, [PC, #288]
0x15E8	0x1840    ADDS	R0, R0, R1
0x15EA	0x1D41    ADDS	R1, R0, #5
0x15EC	0x2000    MOVS	R0, #0
0x15EE	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 620 :: 		erase_brick( i );
0x15F0	0xF88D2004  STRB	R2, [SP, #4]
0x15F4	0xB2D0    UXTB	R0, R2
0x15F6	0xF7FEFF45  BL	_erase_brick+0
0x15FA	0xF89D2004  LDRB	R2, [SP, #4]
;MatrixRGB_Demo_Project.c, 621 :: 		is_hit = true;
; is_hit start address is: 0 (R0)
0x15FE	0x2001    MOVS	R0, #1
;MatrixRGB_Demo_Project.c, 622 :: 		}
; is_hit end address is: 0 (R0)
0x1600	0xE073    B	L_is_brick_hit201
L_is_brick_hit200:
;MatrixRGB_Demo_Project.c, 623 :: 		else if ( ( ball_curr_pos.row == bricks[i].row - 1 || ball_curr_pos.row == bricks[i].row ) && ( ball_curr_pos.col == bricks[i].col - 1 || ball_curr_pos.col == bricks[i].col || ball_curr_pos.col == bricks[i].col + 1 || ball_curr_pos.col == bricks[i].col + 2 || ball_curr_pos.col == bricks[i].col + 3 ) )
; is_hit start address is: 12 (R3)
0x1602	0x2006    MOVS	R0, #6
0x1604	0xFB00F102  MUL	R1, R0, R2
0x1608	0x483F    LDR	R0, [PC, #252]
0x160A	0x1840    ADDS	R0, R0, R1
0x160C	0x1CC0    ADDS	R0, R0, #3
0x160E	0x7800    LDRB	R0, [R0, #0]
0x1610	0x1E41    SUBS	R1, R0, #1
0x1612	0xB209    SXTH	R1, R1
0x1614	0x4841    LDR	R0, [PC, #260]
0x1616	0x7800    LDRB	R0, [R0, #0]
0x1618	0x4288    CMP	R0, R1
0x161A	0xD00C    BEQ	L__is_brick_hit474
0x161C	0x2006    MOVS	R0, #6
0x161E	0xFB00F102  MUL	R1, R0, R2
0x1622	0x4839    LDR	R0, [PC, #228]
0x1624	0x1840    ADDS	R0, R0, R1
0x1626	0x1CC0    ADDS	R0, R0, #3
0x1628	0x7801    LDRB	R1, [R0, #0]
0x162A	0x483C    LDR	R0, [PC, #240]
0x162C	0x7800    LDRB	R0, [R0, #0]
0x162E	0x4288    CMP	R0, R1
0x1630	0xD001    BEQ	L__is_brick_hit473
0x1632	0xB2D8    UXTB	R0, R3
0x1634	0xE059    B	L_is_brick_hit208
L__is_brick_hit474:
L__is_brick_hit473:
0x1636	0x2006    MOVS	R0, #6
0x1638	0xFB00F102  MUL	R1, R0, R2
0x163C	0x4832    LDR	R0, [PC, #200]
0x163E	0x1840    ADDS	R0, R0, R1
0x1640	0x1D00    ADDS	R0, R0, #4
0x1642	0x7800    LDRB	R0, [R0, #0]
0x1644	0x1E41    SUBS	R1, R0, #1
0x1646	0xB209    SXTH	R1, R1
0x1648	0x4830    LDR	R0, [PC, #192]
0x164A	0x7800    LDRB	R0, [R0, #0]
0x164C	0x4288    CMP	R0, R1
0x164E	0xD033    BEQ	L__is_brick_hit479
0x1650	0x2006    MOVS	R0, #6
0x1652	0xFB00F102  MUL	R1, R0, R2
0x1656	0x482C    LDR	R0, [PC, #176]
0x1658	0x1840    ADDS	R0, R0, R1
0x165A	0x1D00    ADDS	R0, R0, #4
0x165C	0x7801    LDRB	R1, [R0, #0]
0x165E	0x482B    LDR	R0, [PC, #172]
0x1660	0x7800    LDRB	R0, [R0, #0]
0x1662	0x4288    CMP	R0, R1
0x1664	0xD028    BEQ	L__is_brick_hit478
0x1666	0x2006    MOVS	R0, #6
0x1668	0xFB00F102  MUL	R1, R0, R2
0x166C	0x4826    LDR	R0, [PC, #152]
0x166E	0x1840    ADDS	R0, R0, R1
0x1670	0x1D00    ADDS	R0, R0, #4
0x1672	0x7800    LDRB	R0, [R0, #0]
0x1674	0x1C41    ADDS	R1, R0, #1
0x1676	0xB209    SXTH	R1, R1
0x1678	0x4824    LDR	R0, [PC, #144]
0x167A	0x7800    LDRB	R0, [R0, #0]
0x167C	0x4288    CMP	R0, R1
0x167E	0xD01B    BEQ	L__is_brick_hit477
0x1680	0x2006    MOVS	R0, #6
0x1682	0xFB00F102  MUL	R1, R0, R2
0x1686	0x4820    LDR	R0, [PC, #128]
0x1688	0x1840    ADDS	R0, R0, R1
0x168A	0x1D00    ADDS	R0, R0, #4
0x168C	0x7800    LDRB	R0, [R0, #0]
0x168E	0x1C81    ADDS	R1, R0, #2
0x1690	0xB209    SXTH	R1, R1
0x1692	0x481E    LDR	R0, [PC, #120]
0x1694	0x7800    LDRB	R0, [R0, #0]
0x1696	0x4288    CMP	R0, R1
0x1698	0xD00E    BEQ	L__is_brick_hit476
0x169A	0x2006    MOVS	R0, #6
0x169C	0xFB00F102  MUL	R1, R0, R2
0x16A0	0x4819    LDR	R0, [PC, #100]
0x16A2	0x1840    ADDS	R0, R0, R1
0x16A4	0x1D00    ADDS	R0, R0, #4
0x16A6	0x7800    LDRB	R0, [R0, #0]
0x16A8	0x1CC1    ADDS	R1, R0, #3
0x16AA	0xB209    SXTH	R1, R1
0x16AC	0x4817    LDR	R0, [PC, #92]
0x16AE	0x7800    LDRB	R0, [R0, #0]
0x16B0	0x4288    CMP	R0, R1
0x16B2	0xD001    BEQ	L__is_brick_hit475
0x16B4	0xB2D8    UXTB	R0, R3
; is_hit end address is: 12 (R3)
0x16B6	0xE018    B	L_is_brick_hit208
L__is_brick_hit479:
L__is_brick_hit478:
L__is_brick_hit477:
L__is_brick_hit476:
L__is_brick_hit475:
L__is_brick_hit357:
;MatrixRGB_Demo_Project.c, 625 :: 		brick_side_vert = TOP_SIDE;
0x16B8	0x2100    MOVS	R1, #0
0x16BA	0x4819    LDR	R0, [PC, #100]
0x16BC	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 626 :: 		ball_dir_horiz = RIGHT;
0x16BE	0x2101    MOVS	R1, #1
0x16C0	0x4814    LDR	R0, [PC, #80]
0x16C2	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 627 :: 		ball_dir_vert = UP;
0x16C4	0x2100    MOVS	R1, #0
0x16C6	0x4814    LDR	R0, [PC, #80]
0x16C8	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 628 :: 		bricks[i].active = false;
0x16CA	0x2006    MOVS	R0, #6
0x16CC	0xFB00F102  MUL	R1, R0, R2
0x16D0	0x480D    LDR	R0, [PC, #52]
0x16D2	0x1840    ADDS	R0, R0, R1
0x16D4	0x1D41    ADDS	R1, R0, #5
0x16D6	0x2000    MOVS	R0, #0
0x16D8	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 629 :: 		erase_brick( i );
0x16DA	0xF88D2004  STRB	R2, [SP, #4]
0x16DE	0xB2D0    UXTB	R0, R2
0x16E0	0xF7FEFED0  BL	_erase_brick+0
0x16E4	0xF89D2004  LDRB	R2, [SP, #4]
;MatrixRGB_Demo_Project.c, 630 :: 		is_hit = true;
; is_hit start address is: 0 (R0)
0x16E8	0x2001    MOVS	R0, #1
; is_hit end address is: 0 (R0)
;MatrixRGB_Demo_Project.c, 631 :: 		}
L_is_brick_hit208:
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
L_is_brick_hit201:
;MatrixRGB_Demo_Project.c, 633 :: 		}
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
0x16EA	0xE000    B	L_is_brick_hit193
L__is_brick_hit488:
;MatrixRGB_Demo_Project.c, 612 :: 		else if ( ball_dir_horiz == RIGHT )
0x16EC	0xB2D8    UXTB	R0, R3
;MatrixRGB_Demo_Project.c, 633 :: 		}
L_is_brick_hit193:
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
L_is_brick_hit192:
;MatrixRGB_Demo_Project.c, 634 :: 		}
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
0x16EE	0xE000    B	L_is_brick_hit175
L__is_brick_hit489:
;MatrixRGB_Demo_Project.c, 589 :: 		else if ( ball_dir_vert == DOWN )
0x16F0	0xB2D8    UXTB	R0, R3
;MatrixRGB_Demo_Project.c, 634 :: 		}
L_is_brick_hit175:
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
L_is_brick_hit174:
;MatrixRGB_Demo_Project.c, 636 :: 		}
; is_hit start address is: 0 (R0)
; is_hit end address is: 0 (R0)
L_is_brick_hit139:
; is_hit start address is: 0 (R0)
0x16F2	0xB2C3    UXTB	R3, R0
; is_hit end address is: 0 (R0)
L_is_brick_hit136:
;MatrixRGB_Demo_Project.c, 637 :: 		}
; is_hit start address is: 12 (R3)
; is_hit end address is: 12 (R3)
0x16F4	0xE7FF    B	L_is_brick_hit81
L__is_brick_hit490:
;MatrixRGB_Demo_Project.c, 444 :: 		if ( bricks[i].active )
;MatrixRGB_Demo_Project.c, 637 :: 		}
L_is_brick_hit81:
;MatrixRGB_Demo_Project.c, 442 :: 		for ( i = 0; i < 48; i++ )       /**< Checks every brick in the array to see if it is active, then if it has been hit */
; is_hit start address is: 12 (R3)
0x16F6	0x1C52    ADDS	R2, R2, #1
0x16F8	0xB2D2    UXTB	R2, R2
;MatrixRGB_Demo_Project.c, 638 :: 		}
; i end address is: 8 (R2)
0x16FA	0xF7FFB99A  B	L_is_brick_hit78
L_is_brick_hit79:
;MatrixRGB_Demo_Project.c, 640 :: 		return is_hit;
0x16FE	0xB2D8    UXTB	R0, R3
; is_hit end address is: 12 (R3)
;MatrixRGB_Demo_Project.c, 641 :: 		}
L_end_is_brick_hit:
0x1700	0xF8DDE000  LDR	LR, [SP, #0]
0x1704	0xB002    ADD	SP, SP, #8
0x1706	0x4770    BX	LR
0x1708	0x08802000  	_bricks+0
0x170C	0x087F2000  	_ball_curr_pos+1
0x1710	0x09A02000  	_brick_side_horiz+0
0x1714	0x00042000  	_ball_dir_horiz+0
0x1718	0x00032000  	_ball_dir_vert+0
0x171C	0x087E2000  	_ball_curr_pos+0
0x1720	0x09A12000  	_brick_side_vert+0
; end of _is_brick_hit
_erase_brick:
;MatrixRGB_Demo_Project.c, 425 :: 		void erase_brick( uint8_t number )
0x0484	0xB083    SUB	SP, SP, #12
0x0486	0xF8CDE000  STR	LR, [SP, #0]
0x048A	0xF88D0008  STRB	R0, [SP, #8]
;MatrixRGB_Demo_Project.c, 429 :: 		for ( i = 0; i < 4; i++ )                 /**< Erases block with index "number" */
0x048E	0x2100    MOVS	R1, #0
0x0490	0xF88D1004  STRB	R1, [SP, #4]
L_erase_brick75:
0x0494	0xF89D1004  LDRB	R1, [SP, #4]
0x0498	0x2904    CMP	R1, #4
0x049A	0xD228    BCS	L_erase_brick76
;MatrixRGB_Demo_Project.c, 431 :: 		matrixrgb_erase_pixel( bricks[number].row, ( bricks[number].col + i ) );
0x049C	0xF89D2008  LDRB	R2, [SP, #8]
0x04A0	0x2106    MOVS	R1, #6
0x04A2	0x434A    MULS	R2, R1, R2
0x04A4	0x4914    LDR	R1, [PC, #80]
0x04A6	0x188B    ADDS	R3, R1, R2
0x04A8	0x1D19    ADDS	R1, R3, #4
0x04AA	0x780A    LDRB	R2, [R1, #0]
0x04AC	0xF89D1004  LDRB	R1, [SP, #4]
0x04B0	0x1852    ADDS	R2, R2, R1
0x04B2	0x1CD9    ADDS	R1, R3, #3
0x04B4	0x7809    LDRB	R1, [R1, #0]
0x04B6	0xB208    SXTH	R0, R1
0x04B8	0xB211    SXTH	R1, R2
0x04BA	0xF001F985  BL	_matrixrgb_erase_pixel+0
;MatrixRGB_Demo_Project.c, 432 :: 		matrixrgb_erase_pixel( ( bricks[number].row + 1 ), ( bricks[number].col + i ) );
0x04BE	0xF89D2008  LDRB	R2, [SP, #8]
0x04C2	0x2106    MOVS	R1, #6
0x04C4	0x434A    MULS	R2, R1, R2
0x04C6	0x490C    LDR	R1, [PC, #48]
0x04C8	0x188B    ADDS	R3, R1, R2
0x04CA	0x1D19    ADDS	R1, R3, #4
0x04CC	0x780A    LDRB	R2, [R1, #0]
0x04CE	0xF89D1004  LDRB	R1, [SP, #4]
0x04D2	0x1852    ADDS	R2, R2, R1
0x04D4	0x1CD9    ADDS	R1, R3, #3
0x04D6	0x7809    LDRB	R1, [R1, #0]
0x04D8	0x1C49    ADDS	R1, R1, #1
0x04DA	0xB208    SXTH	R0, R1
0x04DC	0xB211    SXTH	R1, R2
0x04DE	0xF001F973  BL	_matrixrgb_erase_pixel+0
;MatrixRGB_Demo_Project.c, 429 :: 		for ( i = 0; i < 4; i++ )                 /**< Erases block with index "number" */
0x04E2	0xF89D1004  LDRB	R1, [SP, #4]
0x04E6	0x1C49    ADDS	R1, R1, #1
0x04E8	0xF88D1004  STRB	R1, [SP, #4]
;MatrixRGB_Demo_Project.c, 433 :: 		}
0x04EC	0xE7D2    B	L_erase_brick75
L_erase_brick76:
;MatrixRGB_Demo_Project.c, 435 :: 		}
L_end_erase_brick:
0x04EE	0xF8DDE000  LDR	LR, [SP, #0]
0x04F2	0xB003    ADD	SP, SP, #12
0x04F4	0x4770    BX	LR
0x04F6	0xBF00    NOP
0x04F8	0x08802000  	_bricks+0
; end of _erase_brick
_is_game_over:
;MatrixRGB_Demo_Project.c, 375 :: 		bool is_game_over( void )
;MatrixRGB_Demo_Project.c, 379 :: 		for ( i = 0; i < 48; i++ )                /**< Checks if ALL of the bricks are, active == false */
; i start address is: 8 (R2)
0x1724	0x2200    MOVS	R2, #0
; i end address is: 8 (R2)
L_is_game_over53:
; i start address is: 8 (R2)
0x1726	0x2A30    CMP	R2, #48
0x1728	0xD20D    BCS	L_is_game_over54
;MatrixRGB_Demo_Project.c, 381 :: 		if ( bricks[i].active == true )
0x172A	0x2006    MOVS	R0, #6
0x172C	0xFB00F102  MUL	R1, R0, R2
0x1730	0x4806    LDR	R0, [PC, #24]
0x1732	0x1840    ADDS	R0, R0, R1
0x1734	0x1D40    ADDS	R0, R0, #5
0x1736	0x7800    LDRB	R0, [R0, #0]
0x1738	0x2801    CMP	R0, #1
0x173A	0xD101    BNE	L_is_game_over56
; i end address is: 8 (R2)
;MatrixRGB_Demo_Project.c, 382 :: 		return true;
0x173C	0x2001    MOVS	R0, #1
0x173E	0xE003    B	L_end_is_game_over
L_is_game_over56:
;MatrixRGB_Demo_Project.c, 379 :: 		for ( i = 0; i < 48; i++ )                /**< Checks if ALL of the bricks are, active == false */
; i start address is: 8 (R2)
0x1740	0x1C52    ADDS	R2, R2, #1
0x1742	0xB2D2    UXTB	R2, R2
;MatrixRGB_Demo_Project.c, 383 :: 		}
; i end address is: 8 (R2)
0x1744	0xE7EF    B	L_is_game_over53
L_is_game_over54:
;MatrixRGB_Demo_Project.c, 384 :: 		return false;
0x1746	0x2000    MOVS	R0, #0
;MatrixRGB_Demo_Project.c, 385 :: 		}
L_end_is_game_over:
0x1748	0x4770    BX	LR
0x174A	0xBF00    NOP
0x174C	0x08802000  	_bricks+0
; end of _is_game_over
_check_ball_boundaries:
;MatrixRGB_Demo_Project.c, 660 :: 		void check_ball_boundaries( void )
0x09AC	0xB081    SUB	SP, SP, #4
0x09AE	0xF8CDE000  STR	LR, [SP, #0]
;MatrixRGB_Demo_Project.c, 662 :: 		if ( ball_curr_pos.row == 0 )           /**< Check Vertical */
0x09B2	0x4817    LDR	R0, [PC, #92]
0x09B4	0x7800    LDRB	R0, [R0, #0]
0x09B6	0xB918    CBNZ	R0, L_check_ball_boundaries217
;MatrixRGB_Demo_Project.c, 663 :: 		ball_dir_vert = DOWN;
0x09B8	0x2101    MOVS	R1, #1
0x09BA	0x4816    LDR	R0, [PC, #88]
0x09BC	0x7001    STRB	R1, [R0, #0]
0x09BE	0xE00D    B	L_check_ball_boundaries218
L_check_ball_boundaries217:
;MatrixRGB_Demo_Project.c, 664 :: 		else if ( ball_curr_pos.row >= 30 )
0x09C0	0x4813    LDR	R0, [PC, #76]
0x09C2	0x7800    LDRB	R0, [R0, #0]
0x09C4	0x281E    CMP	R0, #30
0x09C6	0xD309    BCC	L_check_ball_boundaries219
;MatrixRGB_Demo_Project.c, 666 :: 		if ( !is_player_there() )
0x09C8	0xF7FFFDD4  BL	_is_player_there+0
0x09CC	0xB918    CBNZ	R0, L_check_ball_boundaries220
;MatrixRGB_Demo_Project.c, 667 :: 		safe = false;
0x09CE	0x2100    MOVS	R1, #0
0x09D0	0x4811    LDR	R0, [PC, #68]
0x09D2	0x7001    STRB	R1, [R0, #0]
0x09D4	0xE002    B	L_check_ball_boundaries221
L_check_ball_boundaries220:
;MatrixRGB_Demo_Project.c, 669 :: 		ball_dir_vert = UP;
0x09D6	0x2100    MOVS	R1, #0
0x09D8	0x480E    LDR	R0, [PC, #56]
0x09DA	0x7001    STRB	R1, [R0, #0]
L_check_ball_boundaries221:
;MatrixRGB_Demo_Project.c, 670 :: 		}
L_check_ball_boundaries219:
L_check_ball_boundaries218:
;MatrixRGB_Demo_Project.c, 672 :: 		if ( ball_curr_pos.col == 0 + offset )           /**< Check Horizontal */
0x09DC	0x480F    LDR	R0, [PC, #60]
0x09DE	0x7801    LDRB	R1, [R0, #0]
0x09E0	0x480F    LDR	R0, [PC, #60]
0x09E2	0x7800    LDRB	R0, [R0, #0]
0x09E4	0x4288    CMP	R0, R1
0x09E6	0xD103    BNE	L_check_ball_boundaries222
;MatrixRGB_Demo_Project.c, 673 :: 		ball_dir_horiz = RIGHT;
0x09E8	0x2101    MOVS	R1, #1
0x09EA	0x480E    LDR	R0, [PC, #56]
0x09EC	0x7001    STRB	R1, [R0, #0]
0x09EE	0xE00B    B	L_check_ball_boundaries223
L_check_ball_boundaries222:
;MatrixRGB_Demo_Project.c, 674 :: 		else if ( ball_curr_pos.col == 31 + offset )
0x09F0	0x480A    LDR	R0, [PC, #40]
0x09F2	0x7800    LDRB	R0, [R0, #0]
0x09F4	0xF200011F  ADDW	R1, R0, #31
0x09F8	0xB209    SXTH	R1, R1
0x09FA	0x4809    LDR	R0, [PC, #36]
0x09FC	0x7800    LDRB	R0, [R0, #0]
0x09FE	0x4288    CMP	R0, R1
0x0A00	0xD102    BNE	L_check_ball_boundaries224
;MatrixRGB_Demo_Project.c, 675 :: 		ball_dir_horiz = LEFT;
0x0A02	0x2100    MOVS	R1, #0
0x0A04	0x4807    LDR	R0, [PC, #28]
0x0A06	0x7001    STRB	R1, [R0, #0]
L_check_ball_boundaries224:
L_check_ball_boundaries223:
;MatrixRGB_Demo_Project.c, 677 :: 		}
L_end_check_ball_boundaries:
0x0A08	0xF8DDE000  LDR	LR, [SP, #0]
0x0A0C	0xB001    ADD	SP, SP, #4
0x0A0E	0x4770    BX	LR
0x0A10	0x087E2000  	_ball_curr_pos+0
0x0A14	0x00032000  	_ball_dir_vert+0
0x0A18	0x080F2000  	_safe+0
0x0A1C	0x00052000  	_offset+0
0x0A20	0x087F2000  	_ball_curr_pos+1
0x0A24	0x00042000  	_ball_dir_horiz+0
; end of _check_ball_boundaries
_is_player_there:
;MatrixRGB_Demo_Project.c, 643 :: 		bool is_player_there( void )
;MatrixRGB_Demo_Project.c, 646 :: 		ball_curr_pos.col < ( player_curr_pos.col + 6 ) )
0x0574	0x4816    LDR	R0, [PC, #88]
0x0576	0x7801    LDRB	R1, [R0, #0]
0x0578	0x4816    LDR	R0, [PC, #88]
0x057A	0x7800    LDRB	R0, [R0, #0]
0x057C	0x4288    CMP	R0, R1
0x057E	0xD324    BCC	L__is_player_there493
0x0580	0x4813    LDR	R0, [PC, #76]
0x0582	0x7800    LDRB	R0, [R0, #0]
0x0584	0x1D81    ADDS	R1, R0, #6
0x0586	0xB209    SXTH	R1, R1
0x0588	0x4812    LDR	R0, [PC, #72]
0x058A	0x7800    LDRB	R0, [R0, #0]
0x058C	0x4288    CMP	R0, R1
0x058E	0xDA1C    BGE	L__is_player_there492
L__is_player_there491:
;MatrixRGB_Demo_Project.c, 648 :: 		if ( ball_curr_pos.col >= ( player_curr_pos.col + 4 ) )       /**< Checks if the ball hit the middle, left or right of the player */
0x0590	0x480F    LDR	R0, [PC, #60]
0x0592	0x7800    LDRB	R0, [R0, #0]
0x0594	0x1D01    ADDS	R1, R0, #4
0x0596	0xB209    SXTH	R1, R1
0x0598	0x480E    LDR	R0, [PC, #56]
0x059A	0x7800    LDRB	R0, [R0, #0]
0x059C	0x4288    CMP	R0, R1
0x059E	0xDB03    BLT	L_is_player_there212
;MatrixRGB_Demo_Project.c, 649 :: 		player_surface = RIGHT_SURFACE;
0x05A0	0x2102    MOVS	R1, #2
0x05A2	0x480D    LDR	R0, [PC, #52]
0x05A4	0x7001    STRB	R1, [R0, #0]
0x05A6	0xE00E    B	L_is_player_there213
L_is_player_there212:
;MatrixRGB_Demo_Project.c, 650 :: 		else if ( ball_curr_pos.col > ( player_curr_pos.col + 2 ) )
0x05A8	0x4809    LDR	R0, [PC, #36]
0x05AA	0x7800    LDRB	R0, [R0, #0]
0x05AC	0x1C81    ADDS	R1, R0, #2
0x05AE	0xB209    SXTH	R1, R1
0x05B0	0x4808    LDR	R0, [PC, #32]
0x05B2	0x7800    LDRB	R0, [R0, #0]
0x05B4	0x4288    CMP	R0, R1
0x05B6	0xDD03    BLE	L_is_player_there214
;MatrixRGB_Demo_Project.c, 651 :: 		player_surface = MIDDLE_SURFACE;
0x05B8	0x2101    MOVS	R1, #1
0x05BA	0x4807    LDR	R0, [PC, #28]
0x05BC	0x7001    STRB	R1, [R0, #0]
0x05BE	0xE002    B	L_is_player_there215
L_is_player_there214:
;MatrixRGB_Demo_Project.c, 653 :: 		player_surface = LEFT_SURFACE;
0x05C0	0x2100    MOVS	R1, #0
0x05C2	0x4805    LDR	R0, [PC, #20]
0x05C4	0x7001    STRB	R1, [R0, #0]
L_is_player_there215:
L_is_player_there213:
;MatrixRGB_Demo_Project.c, 654 :: 		return true;
0x05C6	0x2001    MOVS	R0, #1
0x05C8	0xE000    B	L_end_is_player_there
;MatrixRGB_Demo_Project.c, 646 :: 		ball_curr_pos.col < ( player_curr_pos.col + 6 ) )
L__is_player_there493:
L__is_player_there492:
;MatrixRGB_Demo_Project.c, 656 :: 		else return false;     /**< If the player was not there, return false, indicating a YOU lose! */
0x05CA	0x2000    MOVS	R0, #0
;MatrixRGB_Demo_Project.c, 658 :: 		}
L_end_is_player_there:
0x05CC	0x4770    BX	LR
0x05CE	0xBF00    NOP
0x05D0	0x09A32000  	_player_curr_pos+1
0x05D4	0x087F2000  	_ball_curr_pos+1
0x05D8	0x08132000  	_player_surface+0
; end of _is_player_there
_set_ball_pos:
;MatrixRGB_Demo_Project.c, 387 :: 		void set_ball_pos( uint8_t vector_amount )
; vector_amount start address is: 0 (R0)
; vector_amount end address is: 0 (R0)
; vector_amount start address is: 0 (R0)
;MatrixRGB_Demo_Project.c, 389 :: 		if ( ball_dir_vert == UP )                                  /**< If the ball is traveling UP, the row is decremented */
0x1C94	0x492C    LDR	R1, [PC, #176]
0x1C96	0x7809    LDRB	R1, [R1, #0]
0x1C98	0xB921    CBNZ	R1, L_set_ball_pos57
;MatrixRGB_Demo_Project.c, 390 :: 		ball_curr_pos.row--;
0x1C9A	0x4A2C    LDR	R2, [PC, #176]
0x1C9C	0x7811    LDRB	R1, [R2, #0]
0x1C9E	0x1E49    SUBS	R1, R1, #1
0x1CA0	0x7011    STRB	R1, [R2, #0]
0x1CA2	0xE007    B	L_set_ball_pos58
L_set_ball_pos57:
;MatrixRGB_Demo_Project.c, 391 :: 		else if ( ball_dir_vert == DOWN )                           /**< If the ball is traveling DOWN, the row is incremented */
0x1CA4	0x4928    LDR	R1, [PC, #160]
0x1CA6	0x7809    LDRB	R1, [R1, #0]
0x1CA8	0x2901    CMP	R1, #1
0x1CAA	0xD103    BNE	L_set_ball_pos59
;MatrixRGB_Demo_Project.c, 392 :: 		ball_curr_pos.row++;
0x1CAC	0x4A27    LDR	R2, [PC, #156]
0x1CAE	0x7811    LDRB	R1, [R2, #0]
0x1CB0	0x1C49    ADDS	R1, R1, #1
0x1CB2	0x7011    STRB	R1, [R2, #0]
L_set_ball_pos59:
L_set_ball_pos58:
;MatrixRGB_Demo_Project.c, 394 :: 		if ( ball_dir_horiz == LEFT )                               /**< If the ball is traveling LEFT, the column is decremented */
0x1CB4	0x4926    LDR	R1, [PC, #152]
0x1CB6	0x7809    LDRB	R1, [R1, #0]
0x1CB8	0xB921    CBNZ	R1, L_set_ball_pos60
;MatrixRGB_Demo_Project.c, 395 :: 		ball_curr_pos.col -= vector_amount;
0x1CBA	0x4A26    LDR	R2, [PC, #152]
0x1CBC	0x7811    LDRB	R1, [R2, #0]
0x1CBE	0x1A09    SUB	R1, R1, R0
; vector_amount end address is: 0 (R0)
0x1CC0	0x7011    STRB	R1, [R2, #0]
0x1CC2	0xE007    B	L_set_ball_pos61
L_set_ball_pos60:
;MatrixRGB_Demo_Project.c, 396 :: 		else if ( ball_dir_horiz == RIGHT )                         /**< If the ball is traveling RIGHT, the column is incremented */
; vector_amount start address is: 0 (R0)
0x1CC4	0x4922    LDR	R1, [PC, #136]
0x1CC6	0x7809    LDRB	R1, [R1, #0]
0x1CC8	0x2901    CMP	R1, #1
0x1CCA	0xD103    BNE	L_set_ball_pos62
;MatrixRGB_Demo_Project.c, 397 :: 		ball_curr_pos.col += vector_amount;
0x1CCC	0x4A21    LDR	R2, [PC, #132]
0x1CCE	0x7811    LDRB	R1, [R2, #0]
0x1CD0	0x1809    ADDS	R1, R1, R0
; vector_amount end address is: 0 (R0)
0x1CD2	0x7011    STRB	R1, [R2, #0]
L_set_ball_pos62:
L_set_ball_pos61:
;MatrixRGB_Demo_Project.c, 399 :: 		if ( ball_curr_pos.col == 0 + offset || ball_curr_pos.col == ( 0 + offset - 1) || ball_curr_pos.col == 255 )   /**< Checks the Left side of screen boundary, 255 means it went past 0. ( When Vector amount is 2 ) */
0x1CD4	0x4920    LDR	R1, [PC, #128]
0x1CD6	0x780A    LDRB	R2, [R1, #0]
0x1CD8	0x491E    LDR	R1, [PC, #120]
0x1CDA	0x7809    LDRB	R1, [R1, #0]
0x1CDC	0x4291    CMP	R1, R2
0x1CDE	0xD00D    BEQ	L__set_ball_pos498
0x1CE0	0x491D    LDR	R1, [PC, #116]
0x1CE2	0x7809    LDRB	R1, [R1, #0]
0x1CE4	0x1E4A    SUBS	R2, R1, #1
0x1CE6	0xB212    SXTH	R2, R2
0x1CE8	0x491A    LDR	R1, [PC, #104]
0x1CEA	0x7809    LDRB	R1, [R1, #0]
0x1CEC	0x4291    CMP	R1, R2
0x1CEE	0xD005    BEQ	L__set_ball_pos497
0x1CF0	0x4918    LDR	R1, [PC, #96]
0x1CF2	0x7809    LDRB	R1, [R1, #0]
0x1CF4	0xF1B10FFF  CMP	R1, #255
0x1CF8	0xD000    BEQ	L__set_ball_pos496
0x1CFA	0xE007    B	L_set_ball_pos65
L__set_ball_pos498:
L__set_ball_pos497:
L__set_ball_pos496:
;MatrixRGB_Demo_Project.c, 401 :: 		ball_curr_pos.col = 0 + offset;
0x1CFC	0x4916    LDR	R1, [PC, #88]
0x1CFE	0x780A    LDRB	R2, [R1, #0]
0x1D00	0x4914    LDR	R1, [PC, #80]
0x1D02	0x700A    STRB	R2, [R1, #0]
;MatrixRGB_Demo_Project.c, 402 :: 		ball_dir_horiz = RIGHT;
0x1D04	0x2201    MOVS	R2, #1
0x1D06	0x4912    LDR	R1, [PC, #72]
0x1D08	0x700A    STRB	R2, [R1, #0]
;MatrixRGB_Demo_Project.c, 403 :: 		}
0x1D0A	0xE01B    B	L_set_ball_pos66
L_set_ball_pos65:
;MatrixRGB_Demo_Project.c, 404 :: 		else if ( ball_curr_pos.col == 31 + offset || ball_curr_pos.col == 32 + offset )  /**< Checks the Right side of screen boundary */
0x1D0C	0x4912    LDR	R1, [PC, #72]
0x1D0E	0x7809    LDRB	R1, [R1, #0]
0x1D10	0xF201021F  ADDW	R2, R1, #31
0x1D14	0xB212    SXTH	R2, R2
0x1D16	0x490F    LDR	R1, [PC, #60]
0x1D18	0x7809    LDRB	R1, [R1, #0]
0x1D1A	0x4291    CMP	R1, R2
0x1D1C	0xD009    BEQ	L__set_ball_pos500
0x1D1E	0x490E    LDR	R1, [PC, #56]
0x1D20	0x7809    LDRB	R1, [R1, #0]
0x1D22	0xF2010220  ADDW	R2, R1, #32
0x1D26	0xB212    SXTH	R2, R2
0x1D28	0x490A    LDR	R1, [PC, #40]
0x1D2A	0x7809    LDRB	R1, [R1, #0]
0x1D2C	0x4291    CMP	R1, R2
0x1D2E	0xD000    BEQ	L__set_ball_pos499
0x1D30	0xE008    B	L_set_ball_pos69
L__set_ball_pos500:
L__set_ball_pos499:
;MatrixRGB_Demo_Project.c, 406 :: 		ball_curr_pos.col = 31 + offset;
0x1D32	0x4909    LDR	R1, [PC, #36]
0x1D34	0x7809    LDRB	R1, [R1, #0]
0x1D36	0xF201021F  ADDW	R2, R1, #31
0x1D3A	0x4906    LDR	R1, [PC, #24]
0x1D3C	0x700A    STRB	R2, [R1, #0]
;MatrixRGB_Demo_Project.c, 407 :: 		ball_dir_horiz = LEFT;
0x1D3E	0x2200    MOVS	R2, #0
0x1D40	0x4903    LDR	R1, [PC, #12]
0x1D42	0x700A    STRB	R2, [R1, #0]
;MatrixRGB_Demo_Project.c, 408 :: 		}
L_set_ball_pos69:
L_set_ball_pos66:
;MatrixRGB_Demo_Project.c, 409 :: 		}
L_end_set_ball_pos:
0x1D44	0x4770    BX	LR
0x1D46	0xBF00    NOP
0x1D48	0x00032000  	_ball_dir_vert+0
0x1D4C	0x087E2000  	_ball_curr_pos+0
0x1D50	0x00042000  	_ball_dir_horiz+0
0x1D54	0x087F2000  	_ball_curr_pos+1
0x1D58	0x00052000  	_offset+0
; end of _set_ball_pos
_display_bonuslevel:
;MatrixRGB_Demo_Project.c, 278 :: 		void display_bonuslevel( void )
0x1D5C	0xB082    SUB	SP, SP, #8
0x1D5E	0xF8CDE000  STR	LR, [SP, #0]
;MatrixRGB_Demo_Project.c, 280 :: 		bool wait = true;                                         /**< Clear Screen to prepare for BONUS LEVEL screen */
0x1D62	0x2001    MOVS	R0, #1
0x1D64	0xF88D0004  STRB	R0, [SP, #4]
;MatrixRGB_Demo_Project.c, 281 :: 		matrixrgb_clear_screen();                                 /**< Display BONUS LEVEL Screen */
0x1D68	0xF000FCC6  BL	_matrixrgb_clear_screen+0
;MatrixRGB_Demo_Project.c, 282 :: 		matrixrgb_image_load(BonusLevelScreen_bmp, 32, 32 );
0x1D6C	0x2220    MOVS	R2, #32
0x1D6E	0x2120    MOVS	R1, #32
0x1D70	0x4810    LDR	R0, [PC, #64]
0x1D72	0xF7FFFF39  BL	_matrixrgb_image_load+0
;MatrixRGB_Demo_Project.c, 284 :: 		while ( wait )
L_display_bonuslevel38:
0x1D76	0xF89D0004  LDRB	R0, [SP, #4]
0x1D7A	0xB1B0    CBZ	R0, L_display_bonuslevel39
;MatrixRGB_Demo_Project.c, 286 :: 		if (Button(&GPIOA_IDR, 0, 1, 1))                      /**< Once A0 is pressed, wait for depress, and then exit function */
0x1D7C	0x2301    MOVS	R3, #1
0x1D7E	0x2201    MOVS	R2, #1
0x1D80	0x2100    MOVS	R1, #0
0x1D82	0x480D    LDR	R0, [PC, #52]
0x1D84	0xF000FD14  BL	_Button+0
0x1D88	0xB160    CBZ	R0, L_display_bonuslevel40
;MatrixRGB_Demo_Project.c, 288 :: 		matrixrgb_clear_screen();
0x1D8A	0xF000FCB5  BL	_matrixrgb_clear_screen+0
;MatrixRGB_Demo_Project.c, 289 :: 		while ( !Button(&GPIOA_IDR, 0, 1, 0 ) );          /**< While nothing is pressed, continue to refresh BONUS LEVEL Screen */
L_display_bonuslevel41:
0x1D8E	0x2300    MOVS	R3, #0
0x1D90	0x2201    MOVS	R2, #1
0x1D92	0x2100    MOVS	R1, #0
0x1D94	0x4808    LDR	R0, [PC, #32]
0x1D96	0xF000FD0B  BL	_Button+0
0x1D9A	0xB900    CBNZ	R0, L_display_bonuslevel42
0x1D9C	0xE7F7    B	L_display_bonuslevel41
L_display_bonuslevel42:
;MatrixRGB_Demo_Project.c, 291 :: 		wait = false;
0x1D9E	0x2000    MOVS	R0, #0
0x1DA0	0xF88D0004  STRB	R0, [SP, #4]
;MatrixRGB_Demo_Project.c, 292 :: 		}
L_display_bonuslevel40:
;MatrixRGB_Demo_Project.c, 293 :: 		matrixrgb_refresh();
0x1DA4	0xF000FCE6  BL	_matrixrgb_refresh+0
;MatrixRGB_Demo_Project.c, 294 :: 		}
0x1DA8	0xE7E5    B	L_display_bonuslevel38
L_display_bonuslevel39:
;MatrixRGB_Demo_Project.c, 295 :: 		}
L_end_display_bonuslevel:
0x1DAA	0xF8DDE000  LDR	LR, [SP, #0]
0x1DAE	0xB002    ADD	SP, SP, #8
0x1DB0	0x4770    BX	LR
0x1DB2	0xBF00    NOP
0x1DB4	0x00082000  	_BonusLevelScreen_bmp+0
0x1DB8	0x08084001  	GPIOA_IDR+0
; end of _display_bonuslevel
_matrixrgb_image_load:
;matrixrgb_hw.c, 113 :: 		void matrixrgb_image_load( uint8_t *bmp, uint8_t width, uint8_t height )
; bmp start address is: 0 (R0)
0x1BE8	0xB085    SUB	SP, SP, #20
0x1BEA	0xF8CDE000  STR	LR, [SP, #0]
0x1BEE	0xF88D100C  STRB	R1, [SP, #12]
0x1BF2	0xF88D2010  STRB	R2, [SP, #16]
; bmp end address is: 0 (R0)
; bmp start address is: 0 (R0)
;matrixrgb_hw.c, 116 :: 		uint8_t *ptr = bmp;
0x1BF6	0x9002    STR	R0, [SP, #8]
; bmp end address is: 0 (R0)
;matrixrgb_hw.c, 118 :: 		spi_buffer[0] = IMAGE_LOAD_CMD;             // Send command for Image Load
0x1BF8	0x2402    MOVS	R4, #2
0x1BFA	0x4B24    LDR	R3, [PC, #144]
0x1BFC	0x701C    STRB	R4, [R3, #0]
;matrixrgb_hw.c, 119 :: 		matrixrgb_hal_write( &spi_buffer, 1 );
0x1BFE	0x2101    MOVS	R1, #1
0x1C00	0x4822    LDR	R0, [PC, #136]
0x1C02	0xF7FEFCEB  BL	_matrixrgb_hal_write+0
;matrixrgb_hw.c, 120 :: 		spi_buffer[0] = width;
0x1C06	0xF89D400C  LDRB	R4, [SP, #12]
0x1C0A	0x4B20    LDR	R3, [PC, #128]
0x1C0C	0x701C    STRB	R4, [R3, #0]
;matrixrgb_hw.c, 121 :: 		spi_buffer[1] = height;
0x1C0E	0xF89D4010  LDRB	R4, [SP, #16]
0x1C12	0x4B1F    LDR	R3, [PC, #124]
0x1C14	0x701C    STRB	R4, [R3, #0]
;matrixrgb_hw.c, 122 :: 		matrixrgb_hal_write( &spi_buffer, 2 );      // Send Width and then Height
0x1C16	0x2102    MOVS	R1, #2
0x1C18	0x481C    LDR	R0, [PC, #112]
0x1C1A	0xF7FEFCDF  BL	_matrixrgb_hal_write+0
;matrixrgb_hw.c, 124 :: 		for( i = 0; i < height; i++ )
; i start address is: 24 (R6)
0x1C1E	0x2600    MOVS	R6, #0
; i end address is: 24 (R6)
L_matrixrgb_image_load5:
; i start address is: 24 (R6)
0x1C20	0xF89D3010  LDRB	R3, [SP, #16]
0x1C24	0x429E    CMP	R6, R3
0x1C26	0xD22D    BCS	L_matrixrgb_image_load6
;matrixrgb_hw.c, 125 :: 		for( j = 0; j < width; j++ )
; j start address is: 28 (R7)
0x1C28	0x2700    MOVS	R7, #0
; j end address is: 28 (R7)
; i end address is: 24 (R6)
0x1C2A	0xB2B1    UXTH	R1, R6
0x1C2C	0xB2B8    UXTH	R0, R7
L_matrixrgb_image_load8:
; j start address is: 0 (R0)
; i start address is: 4 (R1)
0x1C2E	0xF89D300C  LDRB	R3, [SP, #12]
0x1C32	0x4298    CMP	R0, R3
0x1C34	0xD223    BCS	L_matrixrgb_image_load9
;matrixrgb_hw.c, 127 :: 		spi_buffer[0] = ptr[ 2 * ( i * width + j ) ];
0x1C36	0xF89D300C  LDRB	R3, [SP, #12]
0x1C3A	0x434B    MULS	R3, R1, R3
0x1C3C	0xB29B    UXTH	R3, R3
0x1C3E	0x181B    ADDS	R3, R3, R0
0x1C40	0xB29B    UXTH	R3, R3
0x1C42	0x005D    LSLS	R5, R3, #1
0x1C44	0xB2AD    UXTH	R5, R5
0x1C46	0x9B02    LDR	R3, [SP, #8]
0x1C48	0x195B    ADDS	R3, R3, R5
0x1C4A	0x781C    LDRB	R4, [R3, #0]
0x1C4C	0x4B0F    LDR	R3, [PC, #60]
0x1C4E	0x701C    STRB	R4, [R3, #0]
;matrixrgb_hw.c, 128 :: 		spi_buffer[1] = ptr[ 2 * ( i * width + j ) + 1 ];
0x1C50	0x1C6C    ADDS	R4, R5, #1
0x1C52	0xB2A4    UXTH	R4, R4
0x1C54	0x9B02    LDR	R3, [SP, #8]
0x1C56	0x191B    ADDS	R3, R3, R4
0x1C58	0x781C    LDRB	R4, [R3, #0]
0x1C5A	0x4B0D    LDR	R3, [PC, #52]
0x1C5C	0x701C    STRB	R4, [R3, #0]
;matrixrgb_hw.c, 129 :: 		matrixrgb_hal_write( &spi_buffer, 2 );
0x1C5E	0xF8AD1004  STRH	R1, [SP, #4]
0x1C62	0xF8AD0006  STRH	R0, [SP, #6]
0x1C66	0x2102    MOVS	R1, #2
0x1C68	0x4808    LDR	R0, [PC, #32]
0x1C6A	0xF7FEFCB7  BL	_matrixrgb_hal_write+0
0x1C6E	0xF8BD0006  LDRH	R0, [SP, #6]
0x1C72	0xF8BD1004  LDRH	R1, [SP, #4]
;matrixrgb_hw.c, 125 :: 		for( j = 0; j < width; j++ )
0x1C76	0x1C43    ADDS	R3, R0, #1
; j end address is: 0 (R0)
; j start address is: 28 (R7)
0x1C78	0xB29F    UXTH	R7, R3
;matrixrgb_hw.c, 130 :: 		}
; j end address is: 28 (R7)
0x1C7A	0xB2B8    UXTH	R0, R7
0x1C7C	0xE7D7    B	L_matrixrgb_image_load8
L_matrixrgb_image_load9:
;matrixrgb_hw.c, 124 :: 		for( i = 0; i < height; i++ )
0x1C7E	0x1C4B    ADDS	R3, R1, #1
; i end address is: 4 (R1)
; i start address is: 24 (R6)
0x1C80	0xB29E    UXTH	R6, R3
;matrixrgb_hw.c, 130 :: 		}
; i end address is: 24 (R6)
0x1C82	0xE7CD    B	L_matrixrgb_image_load5
L_matrixrgb_image_load6:
;matrixrgb_hw.c, 131 :: 		}
L_end_matrixrgb_image_load:
0x1C84	0xF8DDE000  LDR	LR, [SP, #0]
0x1C88	0xB005    ADD	SP, SP, #20
0x1C8A	0x4770    BX	LR
0x1C8C	0x08182000  	matrixrgb_hw_spi_buffer+0
0x1C90	0x08192000  	matrixrgb_hw_spi_buffer+1
; end of _matrixrgb_image_load
_setup_bonus_level:
;MatrixRGB_Demo_Project.c, 886 :: 		void setup_bonus_level( void )
0x1E88	0xB083    SUB	SP, SP, #12
0x1E8A	0xF8CDE000  STR	LR, [SP, #0]
;MatrixRGB_Demo_Project.c, 890 :: 		matrixrgb_set_color( &brick_color, 1, 0, 0 );
0x1E8E	0xA802    ADD	R0, SP, #8
0x1E90	0x2300    MOVS	R3, #0
0x1E92	0x2200    MOVS	R2, #0
0x1E94	0x2101    MOVS	R1, #1
0x1E96	0xF000FC67  BL	_matrixrgb_set_color+0
;MatrixRGB_Demo_Project.c, 892 :: 		for ( i = 0 + offset; i < 48 + offset; i++ )
0x1E9A	0x48D3    LDR	R0, [PC, #844]
0x1E9C	0x7800    LDRB	R0, [R0, #0]
; i start address is: 16 (R4)
0x1E9E	0xB2C4    UXTB	R4, R0
; i end address is: 16 (R4)
L_setup_bonus_level288:
; i start address is: 16 (R4)
0x1EA0	0x48D1    LDR	R0, [PC, #836]
0x1EA2	0x7800    LDRB	R0, [R0, #0]
0x1EA4	0x3030    ADDS	R0, #48
0x1EA6	0xB200    SXTH	R0, R0
0x1EA8	0x4284    CMP	R4, R0
0x1EAA	0xDA2B    BGE	L_setup_bonus_level289
;MatrixRGB_Demo_Project.c, 894 :: 		bricks[i].color  = brick_color;
0x1EAC	0x2006    MOVS	R0, #6
0x1EAE	0xFB00F104  MUL	R1, R0, R4
0x1EB2	0x48CE    LDR	R0, [PC, #824]
0x1EB4	0x1840    ADDS	R0, R0, R1
0x1EB6	0xF04F0303  MOV	R3, #3
0x1EBA	0x4602    MOV	R2, R0
0x1EBC	0xA902    ADD	R1, SP, #8
0x1EBE	0xE7FF    B	L_setup_bonus_level291
L__setup_bonus_level501:
L_setup_bonus_level291:
; i start address is: 16 (R4)
; i end address is: 16 (R4)
0x1EC0	0x7808    LDRB	R0, [R1, #0]
0x1EC2	0x7010    STRB	R0, [R2, #0]
0x1EC4	0x1E5B    SUBS	R3, R3, #1
0x1EC6	0x1C49    ADDS	R1, R1, #1
0x1EC8	0x1C52    ADDS	R2, R2, #1
0x1ECA	0x2B00    CMP	R3, #0
0x1ECC	0xD1F8    BNE	L__setup_bonus_level501
; i end address is: 16 (R4)
;MatrixRGB_Demo_Project.c, 895 :: 		bricks[i].col    = 0;
; i start address is: 16 (R4)
0x1ECE	0x2006    MOVS	R0, #6
0x1ED0	0xFB00F104  MUL	R1, R0, R4
0x1ED4	0x48C5    LDR	R0, [PC, #788]
0x1ED6	0x1840    ADDS	R0, R0, R1
0x1ED8	0x1D01    ADDS	R1, R0, #4
0x1EDA	0x2000    MOVS	R0, #0
0x1EDC	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 896 :: 		bricks[i].row    = 0;
0x1EDE	0x2006    MOVS	R0, #6
0x1EE0	0xFB00F104  MUL	R1, R0, R4
0x1EE4	0x48C1    LDR	R0, [PC, #772]
0x1EE6	0x1840    ADDS	R0, R0, R1
0x1EE8	0x1CC1    ADDS	R1, R0, #3
0x1EEA	0x2000    MOVS	R0, #0
0x1EEC	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 897 :: 		bricks[i].active = false;
0x1EEE	0x2006    MOVS	R0, #6
0x1EF0	0xFB00F104  MUL	R1, R0, R4
0x1EF4	0x48BD    LDR	R0, [PC, #756]
0x1EF6	0x1840    ADDS	R0, R0, R1
0x1EF8	0x1D41    ADDS	R1, R0, #5
0x1EFA	0x2000    MOVS	R0, #0
0x1EFC	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 892 :: 		for ( i = 0 + offset; i < 48 + offset; i++ )
0x1EFE	0x1C64    ADDS	R4, R4, #1
0x1F00	0xB2E4    UXTB	R4, R4
;MatrixRGB_Demo_Project.c, 898 :: 		}
; i end address is: 16 (R4)
0x1F02	0xE7CD    B	L_setup_bonus_level288
L_setup_bonus_level289:
;MatrixRGB_Demo_Project.c, 901 :: 		for ( i = 4 + offset, j = 0; i <= 20 + offset; i += 4, j++ )                // The top of the E
0x1F04	0x48B8    LDR	R0, [PC, #736]
0x1F06	0x7800    LDRB	R0, [R0, #0]
0x1F08	0x1D00    ADDS	R0, R0, #4
; i start address is: 16 (R4)
0x1F0A	0xB2C4    UXTB	R4, R0
; j start address is: 20 (R5)
0x1F0C	0x2500    MOVS	R5, #0
; i end address is: 16 (R4)
; j end address is: 20 (R5)
L_setup_bonus_level292:
; j start address is: 20 (R5)
; i start address is: 16 (R4)
0x1F0E	0x48B6    LDR	R0, [PC, #728]
0x1F10	0x7800    LDRB	R0, [R0, #0]
0x1F12	0x3014    ADDS	R0, #20
0x1F14	0xB200    SXTH	R0, R0
0x1F16	0x4284    CMP	R4, R0
0x1F18	0xDC5A    BGT	L_setup_bonus_level293
;MatrixRGB_Demo_Project.c, 903 :: 		bricks[j].color  = brick_color;
0x1F1A	0x2006    MOVS	R0, #6
0x1F1C	0xFB00F105  MUL	R1, R0, R5
0x1F20	0x48B2    LDR	R0, [PC, #712]
0x1F22	0x1840    ADDS	R0, R0, R1
0x1F24	0xF04F0303  MOV	R3, #3
0x1F28	0x4602    MOV	R2, R0
0x1F2A	0xA902    ADD	R1, SP, #8
0x1F2C	0xE7FF    B	L_setup_bonus_level295
L__setup_bonus_level502:
L_setup_bonus_level295:
; i start address is: 16 (R4)
; i end address is: 16 (R4)
; j start address is: 20 (R5)
; j end address is: 20 (R5)
0x1F2E	0x7808    LDRB	R0, [R1, #0]
0x1F30	0x7010    STRB	R0, [R2, #0]
0x1F32	0x1E5B    SUBS	R3, R3, #1
0x1F34	0x1C49    ADDS	R1, R1, #1
0x1F36	0x1C52    ADDS	R2, R2, #1
0x1F38	0x2B00    CMP	R3, #0
0x1F3A	0xD1F8    BNE	L__setup_bonus_level502
; i end address is: 16 (R4)
; j end address is: 20 (R5)
;MatrixRGB_Demo_Project.c, 904 :: 		bricks[j].col    = i;
; j start address is: 20 (R5)
; i start address is: 16 (R4)
0x1F3C	0x2006    MOVS	R0, #6
0x1F3E	0xFB00F105  MUL	R1, R0, R5
0x1F42	0x48AA    LDR	R0, [PC, #680]
0x1F44	0x1840    ADDS	R0, R0, R1
0x1F46	0x1D00    ADDS	R0, R0, #4
0x1F48	0x7004    STRB	R4, [R0, #0]
;MatrixRGB_Demo_Project.c, 905 :: 		bricks[j].row    = 0;
0x1F4A	0x2006    MOVS	R0, #6
0x1F4C	0xFB00F105  MUL	R1, R0, R5
0x1F50	0x48A6    LDR	R0, [PC, #664]
0x1F52	0x1840    ADDS	R0, R0, R1
0x1F54	0x1CC1    ADDS	R1, R0, #3
0x1F56	0x2000    MOVS	R0, #0
0x1F58	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 906 :: 		bricks[j].active = true;
0x1F5A	0x2006    MOVS	R0, #6
0x1F5C	0xFB00F105  MUL	R1, R0, R5
0x1F60	0x48A2    LDR	R0, [PC, #648]
0x1F62	0x1840    ADDS	R0, R0, R1
0x1F64	0x1D41    ADDS	R1, R0, #5
0x1F66	0x2001    MOVS	R0, #1
0x1F68	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 907 :: 		for ( k = i; k < ( i + 4 ); k++ )
; k start address is: 8 (R2)
0x1F6A	0xB2E2    UXTB	R2, R4
; k end address is: 8 (R2)
; i end address is: 16 (R4)
; j end address is: 20 (R5)
0x1F6C	0xB2E3    UXTB	R3, R4
0x1F6E	0xB2E9    UXTB	R1, R5
L_setup_bonus_level296:
; k start address is: 8 (R2)
; j start address is: 4 (R1)
; i start address is: 12 (R3)
0x1F70	0x1D18    ADDS	R0, R3, #4
0x1F72	0xB200    SXTH	R0, R0
0x1F74	0x4282    CMP	R2, R0
0x1F76	0xDA26    BGE	L_setup_bonus_level297
;MatrixRGB_Demo_Project.c, 909 :: 		matrixrgb_write_pixel( 0, k, 1, 0, 0 );
0x1F78	0x2000    MOVS	R0, #0
0x1F7A	0xF88D3004  STRB	R3, [SP, #4]
0x1F7E	0xF88D1005  STRB	R1, [SP, #5]
0x1F82	0xF88D2006  STRB	R2, [SP, #6]
0x1F86	0xB401    PUSH	(R0)
0x1F88	0x2300    MOVS	R3, #0
0x1F8A	0xB2D1    UXTB	R1, R2
0x1F8C	0x2201    MOVS	R2, #1
0x1F8E	0x2000    MOVS	R0, #0
0x1F90	0xB200    SXTH	R0, R0
0x1F92	0xF7FFFBDD  BL	_matrixrgb_write_pixel+0
0x1F96	0xB001    ADD	SP, SP, #4
0x1F98	0xF89D2006  LDRB	R2, [SP, #6]
;MatrixRGB_Demo_Project.c, 910 :: 		matrixrgb_write_pixel( 1, k, 1, 0, 0 );
0x1F9C	0x2000    MOVS	R0, #0
0x1F9E	0xF88D2006  STRB	R2, [SP, #6]
0x1FA2	0xB401    PUSH	(R0)
0x1FA4	0x2300    MOVS	R3, #0
0x1FA6	0xB2D1    UXTB	R1, R2
0x1FA8	0x2201    MOVS	R2, #1
0x1FAA	0x2001    MOVS	R0, #1
0x1FAC	0xB200    SXTH	R0, R0
0x1FAE	0xF7FFFBCF  BL	_matrixrgb_write_pixel+0
0x1FB2	0xB001    ADD	SP, SP, #4
0x1FB4	0xF89D2006  LDRB	R2, [SP, #6]
0x1FB8	0xF89D1005  LDRB	R1, [SP, #5]
0x1FBC	0xF89D3004  LDRB	R3, [SP, #4]
;MatrixRGB_Demo_Project.c, 907 :: 		for ( k = i; k < ( i + 4 ); k++ )
0x1FC0	0x1C52    ADDS	R2, R2, #1
0x1FC2	0xB2D2    UXTB	R2, R2
;MatrixRGB_Demo_Project.c, 911 :: 		}
; k end address is: 8 (R2)
0x1FC4	0xE7D4    B	L_setup_bonus_level296
L_setup_bonus_level297:
;MatrixRGB_Demo_Project.c, 901 :: 		for ( i = 4 + offset, j = 0; i <= 20 + offset; i += 4, j++ )                // The top of the E
0x1FC6	0x1D18    ADDS	R0, R3, #4
; i end address is: 12 (R3)
; i start address is: 16 (R4)
0x1FC8	0xB2C4    UXTB	R4, R0
0x1FCA	0x1C48    ADDS	R0, R1, #1
; j end address is: 4 (R1)
; j start address is: 20 (R5)
0x1FCC	0xB2C5    UXTB	R5, R0
;MatrixRGB_Demo_Project.c, 912 :: 		}
; i end address is: 16 (R4)
0x1FCE	0xE79E    B	L_setup_bonus_level292
L_setup_bonus_level293:
;MatrixRGB_Demo_Project.c, 913 :: 		for ( i = 4 + offset; i < 8 + offset; i += 4 , j++ )
0x1FD0	0x4885    LDR	R0, [PC, #532]
0x1FD2	0x7800    LDRB	R0, [R0, #0]
0x1FD4	0x1D00    ADDS	R0, R0, #4
; i start address is: 4 (R1)
0x1FD6	0xB2C1    UXTB	R1, R0
; j end address is: 20 (R5)
; i end address is: 4 (R1)
0x1FD8	0xB2EC    UXTB	R4, R5
0x1FDA	0xB2CD    UXTB	R5, R1
L_setup_bonus_level299:
; i start address is: 20 (R5)
; j start address is: 16 (R4)
0x1FDC	0x4882    LDR	R0, [PC, #520]
0x1FDE	0x7800    LDRB	R0, [R0, #0]
0x1FE0	0x3008    ADDS	R0, #8
0x1FE2	0xB200    SXTH	R0, R0
0x1FE4	0x4285    CMP	R5, R0
0x1FE6	0xDA58    BGE	L_setup_bonus_level300
;MatrixRGB_Demo_Project.c, 915 :: 		bricks[j].color  = brick_color;
0x1FE8	0x2006    MOVS	R0, #6
0x1FEA	0xFB00F104  MUL	R1, R0, R4
0x1FEE	0x487F    LDR	R0, [PC, #508]
0x1FF0	0x1840    ADDS	R0, R0, R1
0x1FF2	0xF04F0303  MOV	R3, #3
0x1FF6	0x4602    MOV	R2, R0
0x1FF8	0xA902    ADD	R1, SP, #8
0x1FFA	0xE7FF    B	L_setup_bonus_level302
L__setup_bonus_level503:
L_setup_bonus_level302:
; j start address is: 16 (R4)
; j end address is: 16 (R4)
; i start address is: 20 (R5)
; i end address is: 20 (R5)
0x1FFC	0x7808    LDRB	R0, [R1, #0]
0x1FFE	0x7010    STRB	R0, [R2, #0]
0x2000	0x1E5B    SUBS	R3, R3, #1
0x2002	0x1C49    ADDS	R1, R1, #1
0x2004	0x1C52    ADDS	R2, R2, #1
0x2006	0x2B00    CMP	R3, #0
0x2008	0xD1F8    BNE	L__setup_bonus_level503
; i end address is: 20 (R5)
; j end address is: 16 (R4)
;MatrixRGB_Demo_Project.c, 916 :: 		bricks[j].col    = i;
; j start address is: 16 (R4)
; i start address is: 20 (R5)
0x200A	0x2006    MOVS	R0, #6
0x200C	0xFB00F104  MUL	R1, R0, R4
0x2010	0x4876    LDR	R0, [PC, #472]
0x2012	0x1840    ADDS	R0, R0, R1
0x2014	0x1D00    ADDS	R0, R0, #4
0x2016	0x7005    STRB	R5, [R0, #0]
;MatrixRGB_Demo_Project.c, 917 :: 		bricks[j].row    = 2;
0x2018	0x2006    MOVS	R0, #6
0x201A	0xFB00F104  MUL	R1, R0, R4
0x201E	0x4873    LDR	R0, [PC, #460]
0x2020	0x1840    ADDS	R0, R0, R1
0x2022	0x1CC1    ADDS	R1, R0, #3
0x2024	0x2002    MOVS	R0, #2
0x2026	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 918 :: 		bricks[j].active = true;
0x2028	0x2006    MOVS	R0, #6
0x202A	0xFB00F104  MUL	R1, R0, R4
0x202E	0x486F    LDR	R0, [PC, #444]
0x2030	0x1840    ADDS	R0, R0, R1
0x2032	0x1D41    ADDS	R1, R0, #5
0x2034	0x2001    MOVS	R0, #1
0x2036	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 919 :: 		for ( k = i; k < ( i + 4 ); k++ )
; k start address is: 4 (R1)
0x2038	0xB2E9    UXTB	R1, R5
; k end address is: 4 (R1)
; i end address is: 20 (R5)
; j end address is: 16 (R4)
0x203A	0xB2E3    UXTB	R3, R4
0x203C	0xB2EA    UXTB	R2, R5
L_setup_bonus_level303:
; k start address is: 4 (R1)
; i start address is: 8 (R2)
; j start address is: 12 (R3)
0x203E	0x1D10    ADDS	R0, R2, #4
0x2040	0xB200    SXTH	R0, R0
0x2042	0x4281    CMP	R1, R0
0x2044	0xDA24    BGE	L_setup_bonus_level304
;MatrixRGB_Demo_Project.c, 921 :: 		matrixrgb_write_pixel( 2, k, 1, 0, 0 );
0x2046	0x2000    MOVS	R0, #0
0x2048	0xF88D3004  STRB	R3, [SP, #4]
0x204C	0xF88D2005  STRB	R2, [SP, #5]
0x2050	0xF88D1006  STRB	R1, [SP, #6]
0x2054	0xB401    PUSH	(R0)
0x2056	0x2300    MOVS	R3, #0
0x2058	0x2201    MOVS	R2, #1
0x205A	0x2002    MOVS	R0, #2
0x205C	0xB200    SXTH	R0, R0
0x205E	0xF7FFFB77  BL	_matrixrgb_write_pixel+0
0x2062	0xB001    ADD	SP, SP, #4
0x2064	0xF89D1006  LDRB	R1, [SP, #6]
;MatrixRGB_Demo_Project.c, 922 :: 		matrixrgb_write_pixel( 3, k, 1, 0, 0 );
0x2068	0x2000    MOVS	R0, #0
0x206A	0xF88D1006  STRB	R1, [SP, #6]
0x206E	0xB401    PUSH	(R0)
0x2070	0x2300    MOVS	R3, #0
0x2072	0x2201    MOVS	R2, #1
0x2074	0x2003    MOVS	R0, #3
0x2076	0xB200    SXTH	R0, R0
0x2078	0xF7FFFB6A  BL	_matrixrgb_write_pixel+0
0x207C	0xB001    ADD	SP, SP, #4
0x207E	0xF89D1006  LDRB	R1, [SP, #6]
0x2082	0xF89D2005  LDRB	R2, [SP, #5]
0x2086	0xF89D3004  LDRB	R3, [SP, #4]
;MatrixRGB_Demo_Project.c, 919 :: 		for ( k = i; k < ( i + 4 ); k++ )
0x208A	0x1C49    ADDS	R1, R1, #1
0x208C	0xB2C9    UXTB	R1, R1
;MatrixRGB_Demo_Project.c, 923 :: 		}
; k end address is: 4 (R1)
0x208E	0xE7D6    B	L_setup_bonus_level303
L_setup_bonus_level304:
;MatrixRGB_Demo_Project.c, 913 :: 		for ( i = 4 + offset; i < 8 + offset; i += 4 , j++ )
0x2090	0x1D10    ADDS	R0, R2, #4
; i end address is: 8 (R2)
; i start address is: 20 (R5)
0x2092	0xB2C5    UXTB	R5, R0
0x2094	0x1C5C    ADDS	R4, R3, #1
0x2096	0xB2E4    UXTB	R4, R4
; j end address is: 12 (R3)
; j start address is: 16 (R4)
;MatrixRGB_Demo_Project.c, 924 :: 		}
; i end address is: 20 (R5)
0x2098	0xE7A0    B	L_setup_bonus_level299
L_setup_bonus_level300:
;MatrixRGB_Demo_Project.c, 925 :: 		for ( i = 4 + offset; i < 8 + offset; i += 4, j++ )
0x209A	0x4853    LDR	R0, [PC, #332]
0x209C	0x7800    LDRB	R0, [R0, #0]
0x209E	0x1D00    ADDS	R0, R0, #4
; i start address is: 20 (R5)
0x20A0	0xB2C5    UXTB	R5, R0
; i end address is: 20 (R5)
; j end address is: 16 (R4)
L_setup_bonus_level306:
; i start address is: 20 (R5)
; j start address is: 16 (R4)
0x20A2	0x4851    LDR	R0, [PC, #324]
0x20A4	0x7800    LDRB	R0, [R0, #0]
0x20A6	0x3008    ADDS	R0, #8
0x20A8	0xB200    SXTH	R0, R0
0x20AA	0x4285    CMP	R5, R0
0x20AC	0xDA58    BGE	L_setup_bonus_level307
;MatrixRGB_Demo_Project.c, 927 :: 		bricks[j].color  = brick_color;
0x20AE	0x2006    MOVS	R0, #6
0x20B0	0xFB00F104  MUL	R1, R0, R4
0x20B4	0x484D    LDR	R0, [PC, #308]
0x20B6	0x1840    ADDS	R0, R0, R1
0x20B8	0xF04F0303  MOV	R3, #3
0x20BC	0x4602    MOV	R2, R0
0x20BE	0xA902    ADD	R1, SP, #8
0x20C0	0xE7FF    B	L_setup_bonus_level309
L__setup_bonus_level504:
L_setup_bonus_level309:
; j start address is: 16 (R4)
; j end address is: 16 (R4)
; i start address is: 20 (R5)
; i end address is: 20 (R5)
0x20C2	0x7808    LDRB	R0, [R1, #0]
0x20C4	0x7010    STRB	R0, [R2, #0]
0x20C6	0x1E5B    SUBS	R3, R3, #1
0x20C8	0x1C49    ADDS	R1, R1, #1
0x20CA	0x1C52    ADDS	R2, R2, #1
0x20CC	0x2B00    CMP	R3, #0
0x20CE	0xD1F8    BNE	L__setup_bonus_level504
; i end address is: 20 (R5)
; j end address is: 16 (R4)
;MatrixRGB_Demo_Project.c, 928 :: 		bricks[j].col    = i;
; j start address is: 16 (R4)
; i start address is: 20 (R5)
0x20D0	0x2006    MOVS	R0, #6
0x20D2	0xFB00F104  MUL	R1, R0, R4
0x20D6	0x4845    LDR	R0, [PC, #276]
0x20D8	0x1840    ADDS	R0, R0, R1
0x20DA	0x1D00    ADDS	R0, R0, #4
0x20DC	0x7005    STRB	R5, [R0, #0]
;MatrixRGB_Demo_Project.c, 929 :: 		bricks[j].row    = 4;
0x20DE	0x2006    MOVS	R0, #6
0x20E0	0xFB00F104  MUL	R1, R0, R4
0x20E4	0x4841    LDR	R0, [PC, #260]
0x20E6	0x1840    ADDS	R0, R0, R1
0x20E8	0x1CC1    ADDS	R1, R0, #3
0x20EA	0x2004    MOVS	R0, #4
0x20EC	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 930 :: 		bricks[j].active = true;
0x20EE	0x2006    MOVS	R0, #6
0x20F0	0xFB00F104  MUL	R1, R0, R4
0x20F4	0x483D    LDR	R0, [PC, #244]
0x20F6	0x1840    ADDS	R0, R0, R1
0x20F8	0x1D41    ADDS	R1, R0, #5
0x20FA	0x2001    MOVS	R0, #1
0x20FC	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 931 :: 		for ( k = i; k < ( i + 4 ); k++ )
; k start address is: 4 (R1)
0x20FE	0xB2E9    UXTB	R1, R5
; k end address is: 4 (R1)
; i end address is: 20 (R5)
; j end address is: 16 (R4)
0x2100	0xB2E3    UXTB	R3, R4
0x2102	0xB2EA    UXTB	R2, R5
L_setup_bonus_level310:
; k start address is: 4 (R1)
; i start address is: 8 (R2)
; j start address is: 12 (R3)
0x2104	0x1D10    ADDS	R0, R2, #4
0x2106	0xB200    SXTH	R0, R0
0x2108	0x4281    CMP	R1, R0
0x210A	0xDA24    BGE	L_setup_bonus_level311
;MatrixRGB_Demo_Project.c, 933 :: 		matrixrgb_write_pixel( 4, k, 1, 0, 0 );
0x210C	0x2000    MOVS	R0, #0
0x210E	0xF88D3004  STRB	R3, [SP, #4]
0x2112	0xF88D2005  STRB	R2, [SP, #5]
0x2116	0xF88D1006  STRB	R1, [SP, #6]
0x211A	0xB401    PUSH	(R0)
0x211C	0x2300    MOVS	R3, #0
0x211E	0x2201    MOVS	R2, #1
0x2120	0x2004    MOVS	R0, #4
0x2122	0xB200    SXTH	R0, R0
0x2124	0xF7FFFB14  BL	_matrixrgb_write_pixel+0
0x2128	0xB001    ADD	SP, SP, #4
0x212A	0xF89D1006  LDRB	R1, [SP, #6]
;MatrixRGB_Demo_Project.c, 934 :: 		matrixrgb_write_pixel( 5, k, 1, 0, 0 );
0x212E	0x2000    MOVS	R0, #0
0x2130	0xF88D1006  STRB	R1, [SP, #6]
0x2134	0xB401    PUSH	(R0)
0x2136	0x2300    MOVS	R3, #0
0x2138	0x2201    MOVS	R2, #1
0x213A	0x2005    MOVS	R0, #5
0x213C	0xB200    SXTH	R0, R0
0x213E	0xF7FFFB07  BL	_matrixrgb_write_pixel+0
0x2142	0xB001    ADD	SP, SP, #4
0x2144	0xF89D1006  LDRB	R1, [SP, #6]
0x2148	0xF89D2005  LDRB	R2, [SP, #5]
0x214C	0xF89D3004  LDRB	R3, [SP, #4]
;MatrixRGB_Demo_Project.c, 931 :: 		for ( k = i; k < ( i + 4 ); k++ )
0x2150	0x1C49    ADDS	R1, R1, #1
0x2152	0xB2C9    UXTB	R1, R1
;MatrixRGB_Demo_Project.c, 935 :: 		}
; k end address is: 4 (R1)
0x2154	0xE7D6    B	L_setup_bonus_level310
L_setup_bonus_level311:
;MatrixRGB_Demo_Project.c, 925 :: 		for ( i = 4 + offset; i < 8 + offset; i += 4, j++ )
0x2156	0x1D10    ADDS	R0, R2, #4
; i end address is: 8 (R2)
; i start address is: 20 (R5)
0x2158	0xB2C5    UXTB	R5, R0
0x215A	0x1C5C    ADDS	R4, R3, #1
0x215C	0xB2E4    UXTB	R4, R4
; j end address is: 12 (R3)
; j start address is: 16 (R4)
;MatrixRGB_Demo_Project.c, 936 :: 		}
; i end address is: 20 (R5)
0x215E	0xE7A0    B	L_setup_bonus_level306
L_setup_bonus_level307:
;MatrixRGB_Demo_Project.c, 938 :: 		for ( i = 4 + offset; i <= 16 + offset; i += 4, j++ )                       //The middle of the E
0x2160	0x4821    LDR	R0, [PC, #132]
0x2162	0x7800    LDRB	R0, [R0, #0]
0x2164	0x1D00    ADDS	R0, R0, #4
; i start address is: 20 (R5)
0x2166	0xB2C5    UXTB	R5, R0
; i end address is: 20 (R5)
; j end address is: 16 (R4)
L_setup_bonus_level313:
; i start address is: 20 (R5)
; j start address is: 16 (R4)
0x2168	0x481F    LDR	R0, [PC, #124]
0x216A	0x7800    LDRB	R0, [R0, #0]
0x216C	0x3010    ADDS	R0, #16
0x216E	0xB200    SXTH	R0, R0
0x2170	0x4285    CMP	R5, R0
0x2172	0xDC5E    BGT	L_setup_bonus_level314
;MatrixRGB_Demo_Project.c, 940 :: 		bricks[j].color  = brick_color;
0x2174	0x2006    MOVS	R0, #6
0x2176	0xFB00F104  MUL	R1, R0, R4
0x217A	0x481C    LDR	R0, [PC, #112]
0x217C	0x1840    ADDS	R0, R0, R1
0x217E	0xF04F0303  MOV	R3, #3
0x2182	0x4602    MOV	R2, R0
0x2184	0xA902    ADD	R1, SP, #8
0x2186	0xE7FF    B	L_setup_bonus_level316
L__setup_bonus_level505:
L_setup_bonus_level316:
; j start address is: 16 (R4)
; j end address is: 16 (R4)
; i start address is: 20 (R5)
; i end address is: 20 (R5)
0x2188	0x7808    LDRB	R0, [R1, #0]
0x218A	0x7010    STRB	R0, [R2, #0]
0x218C	0x1E5B    SUBS	R3, R3, #1
0x218E	0x1C49    ADDS	R1, R1, #1
0x2190	0x1C52    ADDS	R2, R2, #1
0x2192	0x2B00    CMP	R3, #0
0x2194	0xD1F8    BNE	L__setup_bonus_level505
; i end address is: 20 (R5)
; j end address is: 16 (R4)
;MatrixRGB_Demo_Project.c, 941 :: 		bricks[j].col    = i;
; j start address is: 16 (R4)
; i start address is: 20 (R5)
0x2196	0x2006    MOVS	R0, #6
0x2198	0xFB00F104  MUL	R1, R0, R4
0x219C	0x4813    LDR	R0, [PC, #76]
0x219E	0x1840    ADDS	R0, R0, R1
0x21A0	0x1D00    ADDS	R0, R0, #4
0x21A2	0x7005    STRB	R5, [R0, #0]
;MatrixRGB_Demo_Project.c, 942 :: 		bricks[j].row    = 6;
0x21A4	0x2006    MOVS	R0, #6
0x21A6	0xFB00F104  MUL	R1, R0, R4
0x21AA	0x4810    LDR	R0, [PC, #64]
0x21AC	0x1840    ADDS	R0, R0, R1
0x21AE	0x1CC1    ADDS	R1, R0, #3
0x21B0	0x2006    MOVS	R0, #6
0x21B2	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 943 :: 		bricks[j].active = true;
0x21B4	0x2006    MOVS	R0, #6
0x21B6	0xFB00F104  MUL	R1, R0, R4
0x21BA	0x480C    LDR	R0, [PC, #48]
0x21BC	0x1840    ADDS	R0, R0, R1
0x21BE	0x1D41    ADDS	R1, R0, #5
0x21C0	0x2001    MOVS	R0, #1
0x21C2	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 944 :: 		for ( k = i; k < ( i + 4 ); k++ )
; k start address is: 4 (R1)
0x21C4	0xB2E9    UXTB	R1, R5
; k end address is: 4 (R1)
; i end address is: 20 (R5)
; j end address is: 16 (R4)
0x21C6	0xB2E3    UXTB	R3, R4
0x21C8	0xB2EA    UXTB	R2, R5
L_setup_bonus_level317:
; k start address is: 4 (R1)
; i start address is: 8 (R2)
; j start address is: 12 (R3)
0x21CA	0x1D10    ADDS	R0, R2, #4
0x21CC	0xB200    SXTH	R0, R0
0x21CE	0x4281    CMP	R1, R0
0x21D0	0xDA2A    BGE	L_setup_bonus_level318
;MatrixRGB_Demo_Project.c, 946 :: 		matrixrgb_write_pixel( 6, k, 1, 0, 0 );
0x21D2	0x2000    MOVS	R0, #0
0x21D4	0xF88D3004  STRB	R3, [SP, #4]
0x21D8	0xF88D2005  STRB	R2, [SP, #5]
0x21DC	0xF88D1006  STRB	R1, [SP, #6]
0x21E0	0xB401    PUSH	(R0)
0x21E2	0x2300    MOVS	R3, #0
0x21E4	0xF000B804  B	#8
0x21E8	0x00052000  	_offset+0
0x21EC	0x08802000  	_bricks+0
0x21F0	0x2201    MOVS	R2, #1
0x21F2	0x2006    MOVS	R0, #6
0x21F4	0xB200    SXTH	R0, R0
0x21F6	0xF7FFFAAB  BL	_matrixrgb_write_pixel+0
0x21FA	0xB001    ADD	SP, SP, #4
0x21FC	0xF89D1006  LDRB	R1, [SP, #6]
;MatrixRGB_Demo_Project.c, 947 :: 		matrixrgb_write_pixel( 7, k, 1, 0, 0 );
0x2200	0x2000    MOVS	R0, #0
0x2202	0xF88D1006  STRB	R1, [SP, #6]
0x2206	0xB401    PUSH	(R0)
0x2208	0x2300    MOVS	R3, #0
0x220A	0x2201    MOVS	R2, #1
0x220C	0x2007    MOVS	R0, #7
0x220E	0xB200    SXTH	R0, R0
0x2210	0xF7FFFA9E  BL	_matrixrgb_write_pixel+0
0x2214	0xB001    ADD	SP, SP, #4
0x2216	0xF89D1006  LDRB	R1, [SP, #6]
0x221A	0xF89D2005  LDRB	R2, [SP, #5]
0x221E	0xF89D3004  LDRB	R3, [SP, #4]
;MatrixRGB_Demo_Project.c, 944 :: 		for ( k = i; k < ( i + 4 ); k++ )
0x2222	0x1C49    ADDS	R1, R1, #1
0x2224	0xB2C9    UXTB	R1, R1
;MatrixRGB_Demo_Project.c, 948 :: 		}
; k end address is: 4 (R1)
0x2226	0xE7D0    B	L_setup_bonus_level317
L_setup_bonus_level318:
;MatrixRGB_Demo_Project.c, 938 :: 		for ( i = 4 + offset; i <= 16 + offset; i += 4, j++ )                       //The middle of the E
0x2228	0x1D10    ADDS	R0, R2, #4
; i end address is: 8 (R2)
; i start address is: 20 (R5)
0x222A	0xB2C5    UXTB	R5, R0
0x222C	0x1C5C    ADDS	R4, R3, #1
0x222E	0xB2E4    UXTB	R4, R4
; j end address is: 12 (R3)
; j start address is: 16 (R4)
;MatrixRGB_Demo_Project.c, 949 :: 		}
; i end address is: 20 (R5)
0x2230	0xE79A    B	L_setup_bonus_level313
L_setup_bonus_level314:
;MatrixRGB_Demo_Project.c, 951 :: 		for ( i = 4 + offset; i < 8 + offset; i += 4, j++ )
0x2232	0x48C8    LDR	R0, [PC, #800]
0x2234	0x7800    LDRB	R0, [R0, #0]
0x2236	0x1D00    ADDS	R0, R0, #4
; i start address is: 20 (R5)
0x2238	0xB2C5    UXTB	R5, R0
; i end address is: 20 (R5)
; j end address is: 16 (R4)
L_setup_bonus_level320:
; i start address is: 20 (R5)
; j start address is: 16 (R4)
0x223A	0x48C6    LDR	R0, [PC, #792]
0x223C	0x7800    LDRB	R0, [R0, #0]
0x223E	0x3008    ADDS	R0, #8
0x2240	0xB200    SXTH	R0, R0
0x2242	0x4285    CMP	R5, R0
0x2244	0xDA58    BGE	L_setup_bonus_level321
;MatrixRGB_Demo_Project.c, 953 :: 		bricks[j].color  = brick_color;
0x2246	0x2006    MOVS	R0, #6
0x2248	0xFB00F104  MUL	R1, R0, R4
0x224C	0x48C2    LDR	R0, [PC, #776]
0x224E	0x1840    ADDS	R0, R0, R1
0x2250	0xF04F0303  MOV	R3, #3
0x2254	0x4602    MOV	R2, R0
0x2256	0xA902    ADD	R1, SP, #8
0x2258	0xE7FF    B	L_setup_bonus_level323
L__setup_bonus_level506:
L_setup_bonus_level323:
; j start address is: 16 (R4)
; j end address is: 16 (R4)
; i start address is: 20 (R5)
; i end address is: 20 (R5)
0x225A	0x7808    LDRB	R0, [R1, #0]
0x225C	0x7010    STRB	R0, [R2, #0]
0x225E	0x1E5B    SUBS	R3, R3, #1
0x2260	0x1C49    ADDS	R1, R1, #1
0x2262	0x1C52    ADDS	R2, R2, #1
0x2264	0x2B00    CMP	R3, #0
0x2266	0xD1F8    BNE	L__setup_bonus_level506
; i end address is: 20 (R5)
; j end address is: 16 (R4)
;MatrixRGB_Demo_Project.c, 954 :: 		bricks[j].col    = i;
; j start address is: 16 (R4)
; i start address is: 20 (R5)
0x2268	0x2006    MOVS	R0, #6
0x226A	0xFB00F104  MUL	R1, R0, R4
0x226E	0x48BA    LDR	R0, [PC, #744]
0x2270	0x1840    ADDS	R0, R0, R1
0x2272	0x1D00    ADDS	R0, R0, #4
0x2274	0x7005    STRB	R5, [R0, #0]
;MatrixRGB_Demo_Project.c, 955 :: 		bricks[j].row    = 8;
0x2276	0x2006    MOVS	R0, #6
0x2278	0xFB00F104  MUL	R1, R0, R4
0x227C	0x48B6    LDR	R0, [PC, #728]
0x227E	0x1840    ADDS	R0, R0, R1
0x2280	0x1CC1    ADDS	R1, R0, #3
0x2282	0x2008    MOVS	R0, #8
0x2284	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 956 :: 		bricks[j].active = true;
0x2286	0x2006    MOVS	R0, #6
0x2288	0xFB00F104  MUL	R1, R0, R4
0x228C	0x48B2    LDR	R0, [PC, #712]
0x228E	0x1840    ADDS	R0, R0, R1
0x2290	0x1D41    ADDS	R1, R0, #5
0x2292	0x2001    MOVS	R0, #1
0x2294	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 957 :: 		for ( k = i; k < ( i + 4 ); k++ )
; k start address is: 4 (R1)
0x2296	0xB2E9    UXTB	R1, R5
; k end address is: 4 (R1)
; i end address is: 20 (R5)
; j end address is: 16 (R4)
0x2298	0xB2E3    UXTB	R3, R4
0x229A	0xB2EA    UXTB	R2, R5
L_setup_bonus_level324:
; k start address is: 4 (R1)
; i start address is: 8 (R2)
; j start address is: 12 (R3)
0x229C	0x1D10    ADDS	R0, R2, #4
0x229E	0xB200    SXTH	R0, R0
0x22A0	0x4281    CMP	R1, R0
0x22A2	0xDA24    BGE	L_setup_bonus_level325
;MatrixRGB_Demo_Project.c, 959 :: 		matrixrgb_write_pixel( 8, k, 1, 0, 0 );
0x22A4	0x2000    MOVS	R0, #0
0x22A6	0xF88D3004  STRB	R3, [SP, #4]
0x22AA	0xF88D2005  STRB	R2, [SP, #5]
0x22AE	0xF88D1006  STRB	R1, [SP, #6]
0x22B2	0xB401    PUSH	(R0)
0x22B4	0x2300    MOVS	R3, #0
0x22B6	0x2201    MOVS	R2, #1
0x22B8	0x2008    MOVS	R0, #8
0x22BA	0xB200    SXTH	R0, R0
0x22BC	0xF7FFFA48  BL	_matrixrgb_write_pixel+0
0x22C0	0xB001    ADD	SP, SP, #4
0x22C2	0xF89D1006  LDRB	R1, [SP, #6]
;MatrixRGB_Demo_Project.c, 960 :: 		matrixrgb_write_pixel( 9, k, 1, 0, 0 );
0x22C6	0x2000    MOVS	R0, #0
0x22C8	0xF88D1006  STRB	R1, [SP, #6]
0x22CC	0xB401    PUSH	(R0)
0x22CE	0x2300    MOVS	R3, #0
0x22D0	0x2201    MOVS	R2, #1
0x22D2	0x2009    MOVS	R0, #9
0x22D4	0xB200    SXTH	R0, R0
0x22D6	0xF7FFFA3B  BL	_matrixrgb_write_pixel+0
0x22DA	0xB001    ADD	SP, SP, #4
0x22DC	0xF89D1006  LDRB	R1, [SP, #6]
0x22E0	0xF89D2005  LDRB	R2, [SP, #5]
0x22E4	0xF89D3004  LDRB	R3, [SP, #4]
;MatrixRGB_Demo_Project.c, 957 :: 		for ( k = i; k < ( i + 4 ); k++ )
0x22E8	0x1C49    ADDS	R1, R1, #1
0x22EA	0xB2C9    UXTB	R1, R1
;MatrixRGB_Demo_Project.c, 961 :: 		}
; k end address is: 4 (R1)
0x22EC	0xE7D6    B	L_setup_bonus_level324
L_setup_bonus_level325:
;MatrixRGB_Demo_Project.c, 951 :: 		for ( i = 4 + offset; i < 8 + offset; i += 4, j++ )
0x22EE	0x1D10    ADDS	R0, R2, #4
; i end address is: 8 (R2)
; i start address is: 20 (R5)
0x22F0	0xB2C5    UXTB	R5, R0
0x22F2	0x1C5C    ADDS	R4, R3, #1
0x22F4	0xB2E4    UXTB	R4, R4
; j end address is: 12 (R3)
; j start address is: 16 (R4)
;MatrixRGB_Demo_Project.c, 962 :: 		}
; i end address is: 20 (R5)
0x22F6	0xE7A0    B	L_setup_bonus_level320
L_setup_bonus_level321:
;MatrixRGB_Demo_Project.c, 963 :: 		for ( i = 4 + offset; i < 8 + offset; i += 4, j++ )
0x22F8	0x4896    LDR	R0, [PC, #600]
0x22FA	0x7800    LDRB	R0, [R0, #0]
0x22FC	0x1D00    ADDS	R0, R0, #4
; i start address is: 20 (R5)
0x22FE	0xB2C5    UXTB	R5, R0
; i end address is: 20 (R5)
; j end address is: 16 (R4)
L_setup_bonus_level327:
; i start address is: 20 (R5)
; j start address is: 16 (R4)
0x2300	0x4894    LDR	R0, [PC, #592]
0x2302	0x7800    LDRB	R0, [R0, #0]
0x2304	0x3008    ADDS	R0, #8
0x2306	0xB200    SXTH	R0, R0
0x2308	0x4285    CMP	R5, R0
0x230A	0xDA58    BGE	L_setup_bonus_level328
;MatrixRGB_Demo_Project.c, 965 :: 		bricks[j].color  = brick_color;
0x230C	0x2006    MOVS	R0, #6
0x230E	0xFB00F104  MUL	R1, R0, R4
0x2312	0x4891    LDR	R0, [PC, #580]
0x2314	0x1840    ADDS	R0, R0, R1
0x2316	0xF04F0303  MOV	R3, #3
0x231A	0x4602    MOV	R2, R0
0x231C	0xA902    ADD	R1, SP, #8
0x231E	0xE7FF    B	L_setup_bonus_level330
L__setup_bonus_level507:
L_setup_bonus_level330:
; j start address is: 16 (R4)
; j end address is: 16 (R4)
; i start address is: 20 (R5)
; i end address is: 20 (R5)
0x2320	0x7808    LDRB	R0, [R1, #0]
0x2322	0x7010    STRB	R0, [R2, #0]
0x2324	0x1E5B    SUBS	R3, R3, #1
0x2326	0x1C49    ADDS	R1, R1, #1
0x2328	0x1C52    ADDS	R2, R2, #1
0x232A	0x2B00    CMP	R3, #0
0x232C	0xD1F8    BNE	L__setup_bonus_level507
; i end address is: 20 (R5)
; j end address is: 16 (R4)
;MatrixRGB_Demo_Project.c, 966 :: 		bricks[j].col    = i;
; j start address is: 16 (R4)
; i start address is: 20 (R5)
0x232E	0x2006    MOVS	R0, #6
0x2330	0xFB00F104  MUL	R1, R0, R4
0x2334	0x4888    LDR	R0, [PC, #544]
0x2336	0x1840    ADDS	R0, R0, R1
0x2338	0x1D00    ADDS	R0, R0, #4
0x233A	0x7005    STRB	R5, [R0, #0]
;MatrixRGB_Demo_Project.c, 967 :: 		bricks[j].row    = 10;
0x233C	0x2006    MOVS	R0, #6
0x233E	0xFB00F104  MUL	R1, R0, R4
0x2342	0x4885    LDR	R0, [PC, #532]
0x2344	0x1840    ADDS	R0, R0, R1
0x2346	0x1CC1    ADDS	R1, R0, #3
0x2348	0x200A    MOVS	R0, #10
0x234A	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 968 :: 		bricks[j].active = true;
0x234C	0x2006    MOVS	R0, #6
0x234E	0xFB00F104  MUL	R1, R0, R4
0x2352	0x4881    LDR	R0, [PC, #516]
0x2354	0x1840    ADDS	R0, R0, R1
0x2356	0x1D41    ADDS	R1, R0, #5
0x2358	0x2001    MOVS	R0, #1
0x235A	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 969 :: 		for ( k = i; k < ( i + 4 ); k++ )
; k start address is: 4 (R1)
0x235C	0xB2E9    UXTB	R1, R5
; k end address is: 4 (R1)
; i end address is: 20 (R5)
; j end address is: 16 (R4)
0x235E	0xB2E3    UXTB	R3, R4
0x2360	0xB2EA    UXTB	R2, R5
L_setup_bonus_level331:
; k start address is: 4 (R1)
; i start address is: 8 (R2)
; j start address is: 12 (R3)
0x2362	0x1D10    ADDS	R0, R2, #4
0x2364	0xB200    SXTH	R0, R0
0x2366	0x4281    CMP	R1, R0
0x2368	0xDA24    BGE	L_setup_bonus_level332
;MatrixRGB_Demo_Project.c, 971 :: 		matrixrgb_write_pixel( 10, k, 1, 0, 0 );
0x236A	0x2000    MOVS	R0, #0
0x236C	0xF88D3004  STRB	R3, [SP, #4]
0x2370	0xF88D2005  STRB	R2, [SP, #5]
0x2374	0xF88D1006  STRB	R1, [SP, #6]
0x2378	0xB401    PUSH	(R0)
0x237A	0x2300    MOVS	R3, #0
0x237C	0x2201    MOVS	R2, #1
0x237E	0x200A    MOVS	R0, #10
0x2380	0xB200    SXTH	R0, R0
0x2382	0xF7FFF9E5  BL	_matrixrgb_write_pixel+0
0x2386	0xB001    ADD	SP, SP, #4
0x2388	0xF89D1006  LDRB	R1, [SP, #6]
;MatrixRGB_Demo_Project.c, 972 :: 		matrixrgb_write_pixel( 11, k, 1, 0, 0 );
0x238C	0x2000    MOVS	R0, #0
0x238E	0xF88D1006  STRB	R1, [SP, #6]
0x2392	0xB401    PUSH	(R0)
0x2394	0x2300    MOVS	R3, #0
0x2396	0x2201    MOVS	R2, #1
0x2398	0x200B    MOVS	R0, #11
0x239A	0xB200    SXTH	R0, R0
0x239C	0xF7FFF9D8  BL	_matrixrgb_write_pixel+0
0x23A0	0xB001    ADD	SP, SP, #4
0x23A2	0xF89D1006  LDRB	R1, [SP, #6]
0x23A6	0xF89D2005  LDRB	R2, [SP, #5]
0x23AA	0xF89D3004  LDRB	R3, [SP, #4]
;MatrixRGB_Demo_Project.c, 969 :: 		for ( k = i; k < ( i + 4 ); k++ )
0x23AE	0x1C49    ADDS	R1, R1, #1
0x23B0	0xB2C9    UXTB	R1, R1
;MatrixRGB_Demo_Project.c, 973 :: 		}
; k end address is: 4 (R1)
0x23B2	0xE7D6    B	L_setup_bonus_level331
L_setup_bonus_level332:
;MatrixRGB_Demo_Project.c, 963 :: 		for ( i = 4 + offset; i < 8 + offset; i += 4, j++ )
0x23B4	0x1D10    ADDS	R0, R2, #4
; i end address is: 8 (R2)
; i start address is: 20 (R5)
0x23B6	0xB2C5    UXTB	R5, R0
0x23B8	0x1C5C    ADDS	R4, R3, #1
0x23BA	0xB2E4    UXTB	R4, R4
; j end address is: 12 (R3)
; j start address is: 16 (R4)
;MatrixRGB_Demo_Project.c, 974 :: 		}
; i end address is: 20 (R5)
0x23BC	0xE7A0    B	L_setup_bonus_level327
L_setup_bonus_level328:
;MatrixRGB_Demo_Project.c, 975 :: 		for ( i = 4 + offset; i < 8 + offset; i += 4, j++ )
0x23BE	0x4865    LDR	R0, [PC, #404]
0x23C0	0x7800    LDRB	R0, [R0, #0]
0x23C2	0x1D00    ADDS	R0, R0, #4
; i start address is: 20 (R5)
0x23C4	0xB2C5    UXTB	R5, R0
; i end address is: 20 (R5)
; j end address is: 16 (R4)
L_setup_bonus_level334:
; i start address is: 20 (R5)
; j start address is: 16 (R4)
0x23C6	0x4863    LDR	R0, [PC, #396]
0x23C8	0x7800    LDRB	R0, [R0, #0]
0x23CA	0x3008    ADDS	R0, #8
0x23CC	0xB200    SXTH	R0, R0
0x23CE	0x4285    CMP	R5, R0
0x23D0	0xDA58    BGE	L_setup_bonus_level335
;MatrixRGB_Demo_Project.c, 977 :: 		bricks[j].color  = brick_color;
0x23D2	0x2006    MOVS	R0, #6
0x23D4	0xFB00F104  MUL	R1, R0, R4
0x23D8	0x485F    LDR	R0, [PC, #380]
0x23DA	0x1840    ADDS	R0, R0, R1
0x23DC	0xF04F0303  MOV	R3, #3
0x23E0	0x4602    MOV	R2, R0
0x23E2	0xA902    ADD	R1, SP, #8
0x23E4	0xE7FF    B	L_setup_bonus_level337
L__setup_bonus_level508:
L_setup_bonus_level337:
; j start address is: 16 (R4)
; j end address is: 16 (R4)
; i start address is: 20 (R5)
; i end address is: 20 (R5)
0x23E6	0x7808    LDRB	R0, [R1, #0]
0x23E8	0x7010    STRB	R0, [R2, #0]
0x23EA	0x1E5B    SUBS	R3, R3, #1
0x23EC	0x1C49    ADDS	R1, R1, #1
0x23EE	0x1C52    ADDS	R2, R2, #1
0x23F0	0x2B00    CMP	R3, #0
0x23F2	0xD1F8    BNE	L__setup_bonus_level508
; i end address is: 20 (R5)
; j end address is: 16 (R4)
;MatrixRGB_Demo_Project.c, 978 :: 		bricks[j].col    = i;
; j start address is: 16 (R4)
; i start address is: 20 (R5)
0x23F4	0x2006    MOVS	R0, #6
0x23F6	0xFB00F104  MUL	R1, R0, R4
0x23FA	0x4857    LDR	R0, [PC, #348]
0x23FC	0x1840    ADDS	R0, R0, R1
0x23FE	0x1D00    ADDS	R0, R0, #4
0x2400	0x7005    STRB	R5, [R0, #0]
;MatrixRGB_Demo_Project.c, 979 :: 		bricks[j].row    = 10;
0x2402	0x2006    MOVS	R0, #6
0x2404	0xFB00F104  MUL	R1, R0, R4
0x2408	0x4853    LDR	R0, [PC, #332]
0x240A	0x1840    ADDS	R0, R0, R1
0x240C	0x1CC1    ADDS	R1, R0, #3
0x240E	0x200A    MOVS	R0, #10
0x2410	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 980 :: 		bricks[j].active = true;
0x2412	0x2006    MOVS	R0, #6
0x2414	0xFB00F104  MUL	R1, R0, R4
0x2418	0x484F    LDR	R0, [PC, #316]
0x241A	0x1840    ADDS	R0, R0, R1
0x241C	0x1D41    ADDS	R1, R0, #5
0x241E	0x2001    MOVS	R0, #1
0x2420	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 981 :: 		for ( k = i; k < ( i + 4 ); k++ )
; k start address is: 4 (R1)
0x2422	0xB2E9    UXTB	R1, R5
; k end address is: 4 (R1)
; i end address is: 20 (R5)
; j end address is: 16 (R4)
0x2424	0xB2E3    UXTB	R3, R4
0x2426	0xB2EA    UXTB	R2, R5
L_setup_bonus_level338:
; k start address is: 4 (R1)
; i start address is: 8 (R2)
; j start address is: 12 (R3)
0x2428	0x1D10    ADDS	R0, R2, #4
0x242A	0xB200    SXTH	R0, R0
0x242C	0x4281    CMP	R1, R0
0x242E	0xDA24    BGE	L_setup_bonus_level339
;MatrixRGB_Demo_Project.c, 983 :: 		matrixrgb_write_pixel( 12, k, 1, 0, 0 );
0x2430	0x2000    MOVS	R0, #0
0x2432	0xF88D3004  STRB	R3, [SP, #4]
0x2436	0xF88D2005  STRB	R2, [SP, #5]
0x243A	0xF88D1006  STRB	R1, [SP, #6]
0x243E	0xB401    PUSH	(R0)
0x2440	0x2300    MOVS	R3, #0
0x2442	0x2201    MOVS	R2, #1
0x2444	0x200C    MOVS	R0, #12
0x2446	0xB200    SXTH	R0, R0
0x2448	0xF7FFF982  BL	_matrixrgb_write_pixel+0
0x244C	0xB001    ADD	SP, SP, #4
0x244E	0xF89D1006  LDRB	R1, [SP, #6]
;MatrixRGB_Demo_Project.c, 984 :: 		matrixrgb_write_pixel( 13, k, 1, 0, 0 );
0x2452	0x2000    MOVS	R0, #0
0x2454	0xF88D1006  STRB	R1, [SP, #6]
0x2458	0xB401    PUSH	(R0)
0x245A	0x2300    MOVS	R3, #0
0x245C	0x2201    MOVS	R2, #1
0x245E	0x200D    MOVS	R0, #13
0x2460	0xB200    SXTH	R0, R0
0x2462	0xF7FFF975  BL	_matrixrgb_write_pixel+0
0x2466	0xB001    ADD	SP, SP, #4
0x2468	0xF89D1006  LDRB	R1, [SP, #6]
0x246C	0xF89D2005  LDRB	R2, [SP, #5]
0x2470	0xF89D3004  LDRB	R3, [SP, #4]
;MatrixRGB_Demo_Project.c, 981 :: 		for ( k = i; k < ( i + 4 ); k++ )
0x2474	0x1C49    ADDS	R1, R1, #1
0x2476	0xB2C9    UXTB	R1, R1
;MatrixRGB_Demo_Project.c, 985 :: 		}
; k end address is: 4 (R1)
0x2478	0xE7D6    B	L_setup_bonus_level338
L_setup_bonus_level339:
;MatrixRGB_Demo_Project.c, 975 :: 		for ( i = 4 + offset; i < 8 + offset; i += 4, j++ )
0x247A	0x1D10    ADDS	R0, R2, #4
; i end address is: 8 (R2)
; i start address is: 20 (R5)
0x247C	0xB2C5    UXTB	R5, R0
0x247E	0x1C5C    ADDS	R4, R3, #1
0x2480	0xB2E4    UXTB	R4, R4
; j end address is: 12 (R3)
; j start address is: 16 (R4)
;MatrixRGB_Demo_Project.c, 986 :: 		}
; i end address is: 20 (R5)
0x2482	0xE7A0    B	L_setup_bonus_level334
L_setup_bonus_level335:
;MatrixRGB_Demo_Project.c, 989 :: 		for ( i = 4 + offset; i <= 20 + offset; i += 4, j++ )                       //The bottom of the E
0x2484	0x4833    LDR	R0, [PC, #204]
0x2486	0x7800    LDRB	R0, [R0, #0]
0x2488	0x1D00    ADDS	R0, R0, #4
; i start address is: 20 (R5)
0x248A	0xB2C5    UXTB	R5, R0
; i end address is: 20 (R5)
; j end address is: 16 (R4)
L_setup_bonus_level341:
; i start address is: 20 (R5)
; j start address is: 16 (R4)
0x248C	0x4831    LDR	R0, [PC, #196]
0x248E	0x7800    LDRB	R0, [R0, #0]
0x2490	0x3014    ADDS	R0, #20
0x2492	0xB200    SXTH	R0, R0
0x2494	0x4285    CMP	R5, R0
0x2496	0xDC58    BGT	L_setup_bonus_level342
;MatrixRGB_Demo_Project.c, 991 :: 		bricks[j].color  = brick_color;
0x2498	0x2006    MOVS	R0, #6
0x249A	0xFB00F104  MUL	R1, R0, R4
0x249E	0x482E    LDR	R0, [PC, #184]
0x24A0	0x1840    ADDS	R0, R0, R1
0x24A2	0xF04F0303  MOV	R3, #3
0x24A6	0x4602    MOV	R2, R0
0x24A8	0xA902    ADD	R1, SP, #8
0x24AA	0xE7FF    B	L_setup_bonus_level344
L__setup_bonus_level509:
L_setup_bonus_level344:
; j start address is: 16 (R4)
; j end address is: 16 (R4)
; i start address is: 20 (R5)
; i end address is: 20 (R5)
0x24AC	0x7808    LDRB	R0, [R1, #0]
0x24AE	0x7010    STRB	R0, [R2, #0]
0x24B0	0x1E5B    SUBS	R3, R3, #1
0x24B2	0x1C49    ADDS	R1, R1, #1
0x24B4	0x1C52    ADDS	R2, R2, #1
0x24B6	0x2B00    CMP	R3, #0
0x24B8	0xD1F8    BNE	L__setup_bonus_level509
; i end address is: 20 (R5)
; j end address is: 16 (R4)
;MatrixRGB_Demo_Project.c, 992 :: 		bricks[j].col    = i;
; j start address is: 16 (R4)
; i start address is: 20 (R5)
0x24BA	0x2006    MOVS	R0, #6
0x24BC	0xFB00F104  MUL	R1, R0, R4
0x24C0	0x4825    LDR	R0, [PC, #148]
0x24C2	0x1840    ADDS	R0, R0, R1
0x24C4	0x1D00    ADDS	R0, R0, #4
0x24C6	0x7005    STRB	R5, [R0, #0]
;MatrixRGB_Demo_Project.c, 993 :: 		bricks[j].row    = 14;
0x24C8	0x2006    MOVS	R0, #6
0x24CA	0xFB00F104  MUL	R1, R0, R4
0x24CE	0x4822    LDR	R0, [PC, #136]
0x24D0	0x1840    ADDS	R0, R0, R1
0x24D2	0x1CC1    ADDS	R1, R0, #3
0x24D4	0x200E    MOVS	R0, #14
0x24D6	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 994 :: 		bricks[j].active = true;
0x24D8	0x2006    MOVS	R0, #6
0x24DA	0xFB00F104  MUL	R1, R0, R4
0x24DE	0x481E    LDR	R0, [PC, #120]
0x24E0	0x1840    ADDS	R0, R0, R1
0x24E2	0x1D41    ADDS	R1, R0, #5
0x24E4	0x2001    MOVS	R0, #1
0x24E6	0x7008    STRB	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 995 :: 		for ( k = i; k < ( i + 4 ); k++ )
; k start address is: 4 (R1)
0x24E8	0xB2E9    UXTB	R1, R5
; k end address is: 4 (R1)
; i end address is: 20 (R5)
; j end address is: 16 (R4)
0x24EA	0xB2E3    UXTB	R3, R4
0x24EC	0xB2EA    UXTB	R2, R5
L_setup_bonus_level345:
; k start address is: 4 (R1)
; i start address is: 8 (R2)
; j start address is: 12 (R3)
0x24EE	0x1D10    ADDS	R0, R2, #4
0x24F0	0xB200    SXTH	R0, R0
0x24F2	0x4281    CMP	R1, R0
0x24F4	0xDA24    BGE	L_setup_bonus_level346
;MatrixRGB_Demo_Project.c, 997 :: 		matrixrgb_write_pixel( 14, k, 1, 0, 0 );
0x24F6	0x2000    MOVS	R0, #0
0x24F8	0xF88D3004  STRB	R3, [SP, #4]
0x24FC	0xF88D2005  STRB	R2, [SP, #5]
0x2500	0xF88D1006  STRB	R1, [SP, #6]
0x2504	0xB401    PUSH	(R0)
0x2506	0x2300    MOVS	R3, #0
0x2508	0x2201    MOVS	R2, #1
0x250A	0x200E    MOVS	R0, #14
0x250C	0xB200    SXTH	R0, R0
0x250E	0xF7FFF91F  BL	_matrixrgb_write_pixel+0
0x2512	0xB001    ADD	SP, SP, #4
0x2514	0xF89D1006  LDRB	R1, [SP, #6]
;MatrixRGB_Demo_Project.c, 998 :: 		matrixrgb_write_pixel( 15, k, 1, 0, 0 );
0x2518	0x2000    MOVS	R0, #0
0x251A	0xF88D1006  STRB	R1, [SP, #6]
0x251E	0xB401    PUSH	(R0)
0x2520	0x2300    MOVS	R3, #0
0x2522	0x2201    MOVS	R2, #1
0x2524	0x200F    MOVS	R0, #15
0x2526	0xB200    SXTH	R0, R0
0x2528	0xF7FFF912  BL	_matrixrgb_write_pixel+0
0x252C	0xB001    ADD	SP, SP, #4
0x252E	0xF89D1006  LDRB	R1, [SP, #6]
0x2532	0xF89D2005  LDRB	R2, [SP, #5]
0x2536	0xF89D3004  LDRB	R3, [SP, #4]
;MatrixRGB_Demo_Project.c, 995 :: 		for ( k = i; k < ( i + 4 ); k++ )
0x253A	0x1C49    ADDS	R1, R1, #1
0x253C	0xB2C9    UXTB	R1, R1
;MatrixRGB_Demo_Project.c, 999 :: 		}
; k end address is: 4 (R1)
0x253E	0xE7D6    B	L_setup_bonus_level345
L_setup_bonus_level346:
;MatrixRGB_Demo_Project.c, 989 :: 		for ( i = 4 + offset; i <= 20 + offset; i += 4, j++ )                       //The bottom of the E
0x2540	0x1D10    ADDS	R0, R2, #4
; i end address is: 8 (R2)
; i start address is: 20 (R5)
0x2542	0xB2C5    UXTB	R5, R0
0x2544	0x1C58    ADDS	R0, R3, #1
; j end address is: 12 (R3)
; j start address is: 16 (R4)
0x2546	0xB2C4    UXTB	R4, R0
;MatrixRGB_Demo_Project.c, 1000 :: 		}
; i end address is: 20 (R5)
; j end address is: 16 (R4)
0x2548	0xE7A0    B	L_setup_bonus_level341
L_setup_bonus_level342:
;MatrixRGB_Demo_Project.c, 1004 :: 		}
L_end_setup_bonus_level:
0x254A	0xF8DDE000  LDR	LR, [SP, #0]
0x254E	0xB003    ADD	SP, SP, #12
0x2550	0x4770    BX	LR
0x2552	0xBF00    NOP
0x2554	0x00052000  	_offset+0
0x2558	0x08802000  	_bricks+0
; end of _setup_bonus_level
__Lib_System_105_107_InitialSetUpRCCRCC2:
;__Lib_System_105_107.c, 374 :: 		
0x2EB0	0xB081    SUB	SP, SP, #4
0x2EB2	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_System_105_107.c, 377 :: 		
; ulRCC_CR start address is: 8 (R2)
0x2EB6	0x4A46    LDR	R2, [PC, #280]
;__Lib_System_105_107.c, 378 :: 		
; ulRCC_CFGR start address is: 12 (R3)
0x2EB8	0x4B46    LDR	R3, [PC, #280]
;__Lib_System_105_107.c, 379 :: 		
; ulRCC_CFGR2 start address is: 16 (R4)
0x2EBA	0x4C47    LDR	R4, [PC, #284]
;__Lib_System_105_107.c, 380 :: 		
; Fosc_kHz start address is: 4 (R1)
0x2EBC	0x4947    LDR	R1, [PC, #284]
;__Lib_System_105_107.c, 387 :: 		
0x2EBE	0xF64B3080  MOVW	R0, #48000
0x2EC2	0x4281    CMP	R1, R0
0x2EC4	0xD906    BLS	L___Lib_System_105_107_InitialSetUpRCCRCC231
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_105_107.c, 388 :: 		
0x2EC6	0x4846    LDR	R0, [PC, #280]
0x2EC8	0x6800    LDR	R0, [R0, #0]
0x2ECA	0xF0400102  ORR	R1, R0, #2
0x2ECE	0x4844    LDR	R0, [PC, #272]
0x2ED0	0x6001    STR	R1, [R0, #0]
0x2ED2	0xE011    B	L___Lib_System_105_107_InitialSetUpRCCRCC232
L___Lib_System_105_107_InitialSetUpRCCRCC231:
;__Lib_System_105_107.c, 389 :: 		
; Fosc_kHz start address is: 4 (R1)
0x2ED4	0xF64550C0  MOVW	R0, #24000
0x2ED8	0x4281    CMP	R1, R0
0x2EDA	0xD906    BLS	L___Lib_System_105_107_InitialSetUpRCCRCC233
; Fosc_kHz end address is: 4 (R1)
;__Lib_System_105_107.c, 390 :: 		
0x2EDC	0x4840    LDR	R0, [PC, #256]
0x2EDE	0x6800    LDR	R0, [R0, #0]
0x2EE0	0xF0400101  ORR	R1, R0, #1
0x2EE4	0x483E    LDR	R0, [PC, #248]
0x2EE6	0x6001    STR	R1, [R0, #0]
0x2EE8	0xE006    B	L___Lib_System_105_107_InitialSetUpRCCRCC234
L___Lib_System_105_107_InitialSetUpRCCRCC233:
;__Lib_System_105_107.c, 392 :: 		
0x2EEA	0x483D    LDR	R0, [PC, #244]
0x2EEC	0x6801    LDR	R1, [R0, #0]
0x2EEE	0xF06F0007  MVN	R0, #7
0x2EF2	0x4001    ANDS	R1, R0
0x2EF4	0x483A    LDR	R0, [PC, #232]
0x2EF6	0x6001    STR	R1, [R0, #0]
L___Lib_System_105_107_InitialSetUpRCCRCC234:
L___Lib_System_105_107_InitialSetUpRCCRCC232:
;__Lib_System_105_107.c, 394 :: 		
0x2EF8	0xF7FEFF60  BL	__Lib_System_105_107_SystemClockSetDefault+0
;__Lib_System_105_107.c, 396 :: 		
0x2EFC	0x4839    LDR	R0, [PC, #228]
0x2EFE	0x6003    STR	R3, [R0, #0]
;__Lib_System_105_107.c, 397 :: 		
0x2F00	0x4839    LDR	R0, [PC, #228]
0x2F02	0x6004    STR	R4, [R0, #0]
; ulRCC_CFGR2 end address is: 16 (R4)
;__Lib_System_105_107.c, 398 :: 		
0x2F04	0x4839    LDR	R0, [PC, #228]
0x2F06	0xEA020100  AND	R1, R2, R0, LSL #0
0x2F0A	0x4839    LDR	R0, [PC, #228]
0x2F0C	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 400 :: 		
0x2F0E	0xF0020001  AND	R0, R2, #1
0x2F12	0xB140    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC252
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
0x2F14	0x4619    MOV	R1, R3
;__Lib_System_105_107.c, 401 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC236:
; ulRCC_CFGR start address is: 4 (R1)
; ulRCC_CR start address is: 8 (R2)
0x2F16	0x4836    LDR	R0, [PC, #216]
0x2F18	0x6800    LDR	R0, [R0, #0]
0x2F1A	0xF0000002  AND	R0, R0, #2
0x2F1E	0x2800    CMP	R0, #0
0x2F20	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC237
;__Lib_System_105_107.c, 402 :: 		
0x2F22	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC236
L___Lib_System_105_107_InitialSetUpRCCRCC237:
;__Lib_System_105_107.c, 403 :: 		
; ulRCC_CFGR end address is: 4 (R1)
0x2F24	0xE000    B	L___Lib_System_105_107_InitialSetUpRCCRCC235
; ulRCC_CR end address is: 8 (R2)
L___Lib_System_105_107_InitialSetUpRCCRCC252:
;__Lib_System_105_107.c, 400 :: 		
0x2F26	0x4619    MOV	R1, R3
;__Lib_System_105_107.c, 403 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC235:
;__Lib_System_105_107.c, 405 :: 		
; ulRCC_CFGR start address is: 4 (R1)
; ulRCC_CR start address is: 8 (R2)
0x2F28	0xF4023080  AND	R0, R2, #65536
0x2F2C	0xB140    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC253
; ulRCC_CR end address is: 8 (R2)
; ulRCC_CFGR end address is: 4 (R1)
0x2F2E	0x460B    MOV	R3, R1
;__Lib_System_105_107.c, 406 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC239:
; ulRCC_CR start address is: 8 (R2)
; ulRCC_CFGR start address is: 12 (R3)
0x2F30	0x482F    LDR	R0, [PC, #188]
0x2F32	0x6800    LDR	R0, [R0, #0]
0x2F34	0xF4003000  AND	R0, R0, #131072
0x2F38	0x2800    CMP	R0, #0
0x2F3A	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC240
;__Lib_System_105_107.c, 407 :: 		
0x2F3C	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC239
L___Lib_System_105_107_InitialSetUpRCCRCC240:
;__Lib_System_105_107.c, 408 :: 		
; ulRCC_CR end address is: 8 (R2)
0x2F3E	0xE000    B	L___Lib_System_105_107_InitialSetUpRCCRCC238
; ulRCC_CFGR end address is: 12 (R3)
L___Lib_System_105_107_InitialSetUpRCCRCC253:
;__Lib_System_105_107.c, 405 :: 		
0x2F40	0x460B    MOV	R3, R1
;__Lib_System_105_107.c, 408 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC238:
;__Lib_System_105_107.c, 410 :: 		
; ulRCC_CR start address is: 8 (R2)
; ulRCC_CFGR start address is: 12 (R3)
0x2F42	0xF0025080  AND	R0, R2, #268435456
0x2F46	0xB168    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC254
;__Lib_System_105_107.c, 411 :: 		
0x2F48	0x4829    LDR	R0, [PC, #164]
0x2F4A	0x6800    LDR	R0, [R0, #0]
0x2F4C	0xF0405180  ORR	R1, R0, #268435456
0x2F50	0x4827    LDR	R0, [PC, #156]
0x2F52	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
;__Lib_System_105_107.c, 412 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC242:
; ulRCC_CFGR start address is: 12 (R3)
; ulRCC_CR start address is: 8 (R2)
0x2F54	0x4826    LDR	R0, [PC, #152]
0x2F56	0x6800    LDR	R0, [R0, #0]
0x2F58	0xF0005000  AND	R0, R0, #536870912
0x2F5C	0x2800    CMP	R0, #0
0x2F5E	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC243
;__Lib_System_105_107.c, 413 :: 		
0x2F60	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC242
L___Lib_System_105_107_InitialSetUpRCCRCC243:
;__Lib_System_105_107.c, 414 :: 		
; ulRCC_CR end address is: 8 (R2)
0x2F62	0xE7FF    B	L___Lib_System_105_107_InitialSetUpRCCRCC241
; ulRCC_CFGR end address is: 12 (R3)
L___Lib_System_105_107_InitialSetUpRCCRCC254:
;__Lib_System_105_107.c, 410 :: 		
;__Lib_System_105_107.c, 414 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC241:
;__Lib_System_105_107.c, 416 :: 		
; ulRCC_CFGR start address is: 12 (R3)
; ulRCC_CR start address is: 8 (R2)
0x2F64	0xF0026080  AND	R0, R2, #67108864
0x2F68	0xB178    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC255
;__Lib_System_105_107.c, 417 :: 		
0x2F6A	0x4821    LDR	R0, [PC, #132]
0x2F6C	0x6800    LDR	R0, [R0, #0]
0x2F6E	0xF0406180  ORR	R1, R0, #67108864
0x2F72	0x481F    LDR	R0, [PC, #124]
0x2F74	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
0x2F76	0x4611    MOV	R1, R2
0x2F78	0x461A    MOV	R2, R3
;__Lib_System_105_107.c, 418 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC245:
; ulRCC_CR start address is: 4 (R1)
; ulRCC_CFGR start address is: 8 (R2)
0x2F7A	0x481D    LDR	R0, [PC, #116]
0x2F7C	0x6800    LDR	R0, [R0, #0]
0x2F7E	0xF0006000  AND	R0, R0, #134217728
0x2F82	0x2800    CMP	R0, #0
0x2F84	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC246
;__Lib_System_105_107.c, 419 :: 		
0x2F86	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC245
L___Lib_System_105_107_InitialSetUpRCCRCC246:
;__Lib_System_105_107.c, 420 :: 		
; ulRCC_CFGR end address is: 8 (R2)
0x2F88	0xE001    B	L___Lib_System_105_107_InitialSetUpRCCRCC244
; ulRCC_CR end address is: 4 (R1)
L___Lib_System_105_107_InitialSetUpRCCRCC255:
;__Lib_System_105_107.c, 416 :: 		
0x2F8A	0x4611    MOV	R1, R2
0x2F8C	0x461A    MOV	R2, R3
;__Lib_System_105_107.c, 420 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC244:
;__Lib_System_105_107.c, 422 :: 		
; ulRCC_CR start address is: 4 (R1)
; ulRCC_CFGR start address is: 8 (R2)
0x2F8E	0xF0017080  AND	R0, R1, #16777216
; ulRCC_CR end address is: 4 (R1)
0x2F92	0xB170    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC256
;__Lib_System_105_107.c, 423 :: 		
0x2F94	0x4816    LDR	R0, [PC, #88]
0x2F96	0x6800    LDR	R0, [R0, #0]
0x2F98	0xF0407180  ORR	R1, R0, #16777216
0x2F9C	0x4814    LDR	R0, [PC, #80]
0x2F9E	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 8 (R2)
0x2FA0	0x4611    MOV	R1, R2
;__Lib_System_105_107.c, 424 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC248:
; ulRCC_CFGR start address is: 4 (R1)
0x2FA2	0x4813    LDR	R0, [PC, #76]
0x2FA4	0x6800    LDR	R0, [R0, #0]
0x2FA6	0xF0007000  AND	R0, R0, #33554432
0x2FAA	0xB900    CBNZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC249
;__Lib_System_105_107.c, 425 :: 		
0x2FAC	0xE7F9    B	L___Lib_System_105_107_InitialSetUpRCCRCC248
L___Lib_System_105_107_InitialSetUpRCCRCC249:
;__Lib_System_105_107.c, 426 :: 		
0x2FAE	0x460A    MOV	R2, R1
0x2FB0	0xE7FF    B	L___Lib_System_105_107_InitialSetUpRCCRCC247
; ulRCC_CFGR end address is: 4 (R1)
L___Lib_System_105_107_InitialSetUpRCCRCC256:
;__Lib_System_105_107.c, 422 :: 		
;__Lib_System_105_107.c, 426 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC247:
;__Lib_System_105_107.c, 430 :: 		
; ulRCC_CFGR start address is: 8 (R2)
; ulRCC_CFGR end address is: 8 (R2)
L___Lib_System_105_107_InitialSetUpRCCRCC250:
; ulRCC_CFGR start address is: 8 (R2)
0x2FB2	0x480C    LDR	R0, [PC, #48]
0x2FB4	0x6800    LDR	R0, [R0, #0]
0x2FB6	0xF000010C  AND	R1, R0, #12
0x2FBA	0x0090    LSLS	R0, R2, #2
0x2FBC	0xF000000C  AND	R0, R0, #12
0x2FC0	0x4281    CMP	R1, R0
0x2FC2	0xD000    BEQ	L___Lib_System_105_107_InitialSetUpRCCRCC251
;__Lib_System_105_107.c, 431 :: 		
; ulRCC_CFGR end address is: 8 (R2)
0x2FC4	0xE7F5    B	L___Lib_System_105_107_InitialSetUpRCCRCC250
L___Lib_System_105_107_InitialSetUpRCCRCC251:
;__Lib_System_105_107.c, 432 :: 		
L_end_InitialSetUpRCCRCC2:
0x2FC6	0xF8DDE000  LDR	LR, [SP, #0]
0x2FCA	0xB001    ADD	SP, SP, #4
0x2FCC	0x4770    BX	LR
0x2FCE	0xBF00    NOP
0x2FD0	0x00810501  	#83951745
0x2FD4	0x8402001D  	#1934338
0x2FD8	0x06440001  	#67140
0x2FDC	0x19400001  	#72000
0x2FE0	0x20004002  	FLASH_ACR+0
0x2FE4	0x10044002  	RCC_CFGR+0
0x2FE8	0x102C4002  	RCC_CFGR2+0
0x2FEC	0xFFFF000F  	#1048575
0x2FF0	0x10004002  	RCC_CR+0
; end of __Lib_System_105_107_InitialSetUpRCCRCC2
__Lib_System_105_107_SystemClockSetDefault:
;__Lib_System_105_107.c, 347 :: 		
0x1DBC	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 350 :: 		
0x1DBE	0x4815    LDR	R0, [PC, #84]
0x1DC0	0x6800    LDR	R0, [R0, #0]
0x1DC2	0xF0400101  ORR	R1, R0, #1
0x1DC6	0x4813    LDR	R0, [PC, #76]
0x1DC8	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 353 :: 		
0x1DCA	0x4913    LDR	R1, [PC, #76]
0x1DCC	0x4813    LDR	R0, [PC, #76]
0x1DCE	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 356 :: 		
0x1DD0	0x4810    LDR	R0, [PC, #64]
0x1DD2	0x6801    LDR	R1, [R0, #0]
0x1DD4	0x4812    LDR	R0, [PC, #72]
0x1DD6	0x4001    ANDS	R1, R0
0x1DD8	0x480E    LDR	R0, [PC, #56]
0x1DDA	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 359 :: 		
0x1DDC	0x480D    LDR	R0, [PC, #52]
0x1DDE	0x6801    LDR	R1, [R0, #0]
0x1DE0	0xF46F2080  MVN	R0, #262144
0x1DE4	0x4001    ANDS	R1, R0
0x1DE6	0x480B    LDR	R0, [PC, #44]
0x1DE8	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 362 :: 		
0x1DEA	0x480C    LDR	R0, [PC, #48]
0x1DEC	0x6801    LDR	R1, [R0, #0]
0x1DEE	0xF46F00FE  MVN	R0, #8323072
0x1DF2	0x4001    ANDS	R1, R0
0x1DF4	0x4809    LDR	R0, [PC, #36]
0x1DF6	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 365 :: 		
0x1DF8	0x4806    LDR	R0, [PC, #24]
0x1DFA	0x6801    LDR	R1, [R0, #0]
0x1DFC	0xF06F50A0  MVN	R0, #335544320
0x1E00	0x4001    ANDS	R1, R0
0x1E02	0x4804    LDR	R0, [PC, #16]
0x1E04	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 368 :: 		
0x1E06	0xF04F0100  MOV	R1, #0
0x1E0A	0x4806    LDR	R0, [PC, #24]
0x1E0C	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 372 :: 		
L_end_SystemClockSetDefault:
0x1E0E	0xB001    ADD	SP, SP, #4
0x1E10	0x4770    BX	LR
0x1E12	0xBF00    NOP
0x1E14	0x10004002  	RCC_CR+0
0x1E18	0x0000F0FF  	#-251723776
0x1E1C	0x10044002  	RCC_CFGR+0
0x1E20	0xFFFFFEF6  	#-17367041
0x1E24	0x102C4002  	RCC_CFGR2+0
; end of __Lib_System_105_107_SystemClockSetDefault
__Lib_System_105_107_InitialSetUpFosc:
;__Lib_System_105_107.c, 434 :: 		
0x2E9C	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 435 :: 		
0x2E9E	0x4902    LDR	R1, [PC, #8]
0x2EA0	0x4802    LDR	R0, [PC, #8]
0x2EA2	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 436 :: 		
L_end_InitialSetUpFosc:
0x2EA4	0xB001    ADD	SP, SP, #4
0x2EA6	0x4770    BX	LR
0x2EA8	0x19400001  	#72000
0x2EAC	0x09C42000  	___System_CLOCK_IN_KHZ+0
; end of __Lib_System_105_107_InitialSetUpFosc
___GenExcept:
;__Lib_System_105_107.c, 298 :: 		
0x2E48	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 299 :: 		
L___GenExcept27:
0x2E4A	0xE7FE    B	L___GenExcept27
;__Lib_System_105_107.c, 300 :: 		
L_end___GenExcept:
0x2E4C	0xB001    ADD	SP, SP, #4
0x2E4E	0x4770    BX	LR
; end of ___GenExcept
0x3A6C	0xB500    PUSH	(R14)
0x3A6E	0xF8DFB024  LDR	R11, [PC, #36]
0x3A72	0xF8DFA024  LDR	R10, [PC, #36]
0x3A76	0xF8DFC024  LDR	R12, [PC, #36]
0x3A7A	0xF7FEFE4D  BL	10008
0x3A7E	0xF8DFB020  LDR	R11, [PC, #32]
0x3A82	0xF8DFA020  LDR	R10, [PC, #32]
0x3A86	0xF8DFC020  LDR	R12, [PC, #32]
0x3A8A	0xF7FEFE45  BL	10008
0x3A8E	0xBD00    POP	(R15)
0x3A90	0x4770    BX	LR
0x3A92	0xBF00    NOP
0x3A94	0x00002000  	#536870912
0x3A98	0x08132000  	#536872979
0x3A9C	0x31840000  	#12676
0x3AA0	0x08142000  	#536872980
0x3AA4	0x087C2000  	#536873084
0x3AA8	0x3A040000  	#14852
0x3B08	0xB500    PUSH	(R14)
0x3B0A	0xF8DFB010  LDR	R11, [PC, #16]
0x3B0E	0xF8DFA010  LDR	R10, [PC, #16]
0x3B12	0xF7FEFE0B  BL	10028
0x3B16	0xBD00    POP	(R15)
0x3B18	0x4770    BX	LR
0x3B1A	0xBF00    NOP
0x3B1C	0x00002000  	#536870912
0x3B20	0x09C82000  	#536873416
_Timer2_interrupt:
;MatrixRGB_Demo_Project.c, 873 :: 		void Timer2_interrupt() iv IVT_INT_TIM2 {
;MatrixRGB_Demo_Project.c, 874 :: 		TIM2_SR.UIF = 0;
0x2E50	0x2100    MOVS	R1, #0
0x2E52	0xB249    SXTB	R1, R1
0x2E54	0x480C    LDR	R0, [PC, #48]
0x2E56	0x6001    STR	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 876 :: 		move_flag = 1;             /**< Set Move flag for player to 1 every ? us */
0x2E58	0x2101    MOVS	R1, #1
0x2E5A	0x480C    LDR	R0, [PC, #48]
0x2E5C	0x7001    STRB	R1, [R0, #0]
;MatrixRGB_Demo_Project.c, 877 :: 		ball_count_flag++;         /**< ball_count_flag is used for speed of the ball */
0x2E5E	0x490C    LDR	R1, [PC, #48]
0x2E60	0x8808    LDRH	R0, [R1, #0]
0x2E62	0x1C40    ADDS	R0, R0, #1
0x2E64	0x8008    STRH	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 878 :: 		rand_num++;                /**< rand_num is used for random number generation */
0x2E66	0x490B    LDR	R1, [PC, #44]
0x2E68	0x8808    LDRH	R0, [R1, #0]
0x2E6A	0x1C42    ADDS	R2, R0, #1
0x2E6C	0xB292    UXTH	R2, R2
0x2E6E	0x800A    STRH	R2, [R1, #0]
;MatrixRGB_Demo_Project.c, 879 :: 		time++;
0x2E70	0x4909    LDR	R1, [PC, #36]
0x2E72	0x6808    LDR	R0, [R1, #0]
0x2E74	0x1C40    ADDS	R0, R0, #1
0x2E76	0x6008    STR	R0, [R1, #0]
;MatrixRGB_Demo_Project.c, 880 :: 		if ( rand_num >= 65500 )   /**< Instead of rolling over, I reset the value of rand_num */
0x2E78	0xF64F70DC  MOVW	R0, #65500
0x2E7C	0x4282    CMP	R2, R0
0x2E7E	0xD302    BCC	L_Timer2_interrupt287
;MatrixRGB_Demo_Project.c, 881 :: 		rand_num = 0;
0x2E80	0x2100    MOVS	R1, #0
0x2E82	0x4804    LDR	R0, [PC, #16]
0x2E84	0x8001    STRH	R1, [R0, #0]
L_Timer2_interrupt287:
;MatrixRGB_Demo_Project.c, 882 :: 		}
L_end_Timer2_interrupt:
0x2E86	0x4770    BX	LR
0x2E88	0x02004200  	TIM2_SR+0
0x2E8C	0x080E2000  	_move_flag+0
0x2E90	0x08102000  	_ball_count_flag+0
0x2E94	0x00062000  	_rand_num+0
0x2E98	0x08142000  	_time+0
; end of _Timer2_interrupt
;MatrixRGB_Demo_Project.c,0 :: ?ICS_g_ball_speed [2]
0x3184	0x0032 ;?ICS_g_ball_speed+0
; end of ?ICS_g_ball_speed
;,0 :: _initBlock_1 [2]
; Containing: ?ICS_playing [1]
;             ?ICS_ball_dir_vert [1]
0x3186	0x0001 ;_initBlock_1+0 : ?ICS_playing at 0x3186 : ?ICS_ball_dir_vert at 0x3187
; end of _initBlock_1
;,0 :: _initBlock_2 [2]
; Containing: ?ICS_ball_dir_horiz [1]
;             ?ICS_offset [1]
0x3188	0x2000 ;_initBlock_2+0 : ?ICS_ball_dir_horiz at 0x3188 : ?ICS_offset at 0x3189
; end of _initBlock_2
;MatrixRGB_Demo_Project.c,0 :: ?ICS_rand_num [2]
0x318A	0x0000 ;?ICS_rand_num+0
; end of ?ICS_rand_num
;resources.c,0 :: ?ICS_BonusLevelScreen_bmp [2054]
0x318C	0x00000000 ;?ICS_BonusLevelScreen_bmp+0
0x3190	0x00000000 ;?ICS_BonusLevelScreen_bmp+4
0x3194	0x00000000 ;?ICS_BonusLevelScreen_bmp+8
0x3198	0x00000000 ;?ICS_BonusLevelScreen_bmp+12
0x319C	0x00000000 ;?ICS_BonusLevelScreen_bmp+16
0x31A0	0x00000000 ;?ICS_BonusLevelScreen_bmp+20
0x31A4	0x00000000 ;?ICS_BonusLevelScreen_bmp+24
0x31A8	0x00000000 ;?ICS_BonusLevelScreen_bmp+28
0x31AC	0x00000000 ;?ICS_BonusLevelScreen_bmp+32
0x31B0	0x00000000 ;?ICS_BonusLevelScreen_bmp+36
0x31B4	0x00000000 ;?ICS_BonusLevelScreen_bmp+40
0x31B8	0x00000000 ;?ICS_BonusLevelScreen_bmp+44
0x31BC	0x00000000 ;?ICS_BonusLevelScreen_bmp+48
0x31C0	0x00000000 ;?ICS_BonusLevelScreen_bmp+52
0x31C4	0x00000000 ;?ICS_BonusLevelScreen_bmp+56
0x31C8	0x00000000 ;?ICS_BonusLevelScreen_bmp+60
0x31CC	0x00000000 ;?ICS_BonusLevelScreen_bmp+64
0x31D0	0x00000000 ;?ICS_BonusLevelScreen_bmp+68
0x31D4	0x00000000 ;?ICS_BonusLevelScreen_bmp+72
0x31D8	0x00000000 ;?ICS_BonusLevelScreen_bmp+76
0x31DC	0x00000000 ;?ICS_BonusLevelScreen_bmp+80
0x31E0	0x00000000 ;?ICS_BonusLevelScreen_bmp+84
0x31E4	0x00000000 ;?ICS_BonusLevelScreen_bmp+88
0x31E8	0x00000000 ;?ICS_BonusLevelScreen_bmp+92
0x31EC	0x00000000 ;?ICS_BonusLevelScreen_bmp+96
0x31F0	0x00000000 ;?ICS_BonusLevelScreen_bmp+100
0x31F4	0x00000000 ;?ICS_BonusLevelScreen_bmp+104
0x31F8	0x00000000 ;?ICS_BonusLevelScreen_bmp+108
0x31FC	0x00000000 ;?ICS_BonusLevelScreen_bmp+112
0x3200	0x00000000 ;?ICS_BonusLevelScreen_bmp+116
0x3204	0x00000000 ;?ICS_BonusLevelScreen_bmp+120
0x3208	0x00000000 ;?ICS_BonusLevelScreen_bmp+124
0x320C	0x00000000 ;?ICS_BonusLevelScreen_bmp+128
0x3210	0x00000000 ;?ICS_BonusLevelScreen_bmp+132
0x3214	0x00000000 ;?ICS_BonusLevelScreen_bmp+136
0x3218	0x00000000 ;?ICS_BonusLevelScreen_bmp+140
0x321C	0x00000000 ;?ICS_BonusLevelScreen_bmp+144
0x3220	0x00000000 ;?ICS_BonusLevelScreen_bmp+148
0x3224	0x00000000 ;?ICS_BonusLevelScreen_bmp+152
0x3228	0x00000000 ;?ICS_BonusLevelScreen_bmp+156
0x322C	0x00000000 ;?ICS_BonusLevelScreen_bmp+160
0x3230	0x00000000 ;?ICS_BonusLevelScreen_bmp+164
0x3234	0x00000000 ;?ICS_BonusLevelScreen_bmp+168
0x3238	0x00000000 ;?ICS_BonusLevelScreen_bmp+172
0x323C	0x00000000 ;?ICS_BonusLevelScreen_bmp+176
0x3240	0x00000000 ;?ICS_BonusLevelScreen_bmp+180
0x3244	0x00000000 ;?ICS_BonusLevelScreen_bmp+184
0x3248	0x00000000 ;?ICS_BonusLevelScreen_bmp+188
0x324C	0x00000000 ;?ICS_BonusLevelScreen_bmp+192
0x3250	0xFF80FF80 ;?ICS_BonusLevelScreen_bmp+196
0x3254	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+200
0x3258	0x00000000 ;?ICS_BonusLevelScreen_bmp+204
0x325C	0x00000000 ;?ICS_BonusLevelScreen_bmp+208
0x3260	0x00000000 ;?ICS_BonusLevelScreen_bmp+212
0x3264	0x00000000 ;?ICS_BonusLevelScreen_bmp+216
0x3268	0x00000000 ;?ICS_BonusLevelScreen_bmp+220
0x326C	0x00000000 ;?ICS_BonusLevelScreen_bmp+224
0x3270	0x00000000 ;?ICS_BonusLevelScreen_bmp+228
0x3274	0x00000000 ;?ICS_BonusLevelScreen_bmp+232
0x3278	0x00000000 ;?ICS_BonusLevelScreen_bmp+236
0x327C	0x00000000 ;?ICS_BonusLevelScreen_bmp+240
0x3280	0x00000000 ;?ICS_BonusLevelScreen_bmp+244
0x3284	0x00000000 ;?ICS_BonusLevelScreen_bmp+248
0x3288	0x00000000 ;?ICS_BonusLevelScreen_bmp+252
0x328C	0x00000000 ;?ICS_BonusLevelScreen_bmp+256
0x3290	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+260
0x3294	0xFF800000 ;?ICS_BonusLevelScreen_bmp+264
0x3298	0x00000000 ;?ICS_BonusLevelScreen_bmp+268
0x329C	0x00000000 ;?ICS_BonusLevelScreen_bmp+272
0x32A0	0x00000000 ;?ICS_BonusLevelScreen_bmp+276
0x32A4	0x00000000 ;?ICS_BonusLevelScreen_bmp+280
0x32A8	0x00000000 ;?ICS_BonusLevelScreen_bmp+284
0x32AC	0x00000000 ;?ICS_BonusLevelScreen_bmp+288
0x32B0	0x00000000 ;?ICS_BonusLevelScreen_bmp+292
0x32B4	0x00000000 ;?ICS_BonusLevelScreen_bmp+296
0x32B8	0x00000000 ;?ICS_BonusLevelScreen_bmp+300
0x32BC	0x00000000 ;?ICS_BonusLevelScreen_bmp+304
0x32C0	0x00000000 ;?ICS_BonusLevelScreen_bmp+308
0x32C4	0x00000000 ;?ICS_BonusLevelScreen_bmp+312
0x32C8	0x00000000 ;?ICS_BonusLevelScreen_bmp+316
0x32CC	0x00000000 ;?ICS_BonusLevelScreen_bmp+320
0x32D0	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+324
0x32D4	0xFF800000 ;?ICS_BonusLevelScreen_bmp+328
0x32D8	0x00000000 ;?ICS_BonusLevelScreen_bmp+332
0x32DC	0x00000000 ;?ICS_BonusLevelScreen_bmp+336
0x32E0	0x00000000 ;?ICS_BonusLevelScreen_bmp+340
0x32E4	0x00000000 ;?ICS_BonusLevelScreen_bmp+344
0x32E8	0x00000000 ;?ICS_BonusLevelScreen_bmp+348
0x32EC	0x00000000 ;?ICS_BonusLevelScreen_bmp+352
0x32F0	0x00000000 ;?ICS_BonusLevelScreen_bmp+356
0x32F4	0x00000000 ;?ICS_BonusLevelScreen_bmp+360
0x32F8	0xFF800000 ;?ICS_BonusLevelScreen_bmp+364
0x32FC	0x00000000 ;?ICS_BonusLevelScreen_bmp+368
0x3300	0x00000000 ;?ICS_BonusLevelScreen_bmp+372
0x3304	0x00000000 ;?ICS_BonusLevelScreen_bmp+376
0x3308	0x00000000 ;?ICS_BonusLevelScreen_bmp+380
0x330C	0x00000000 ;?ICS_BonusLevelScreen_bmp+384
0x3310	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+388
0x3314	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+392
0x3318	0x00000000 ;?ICS_BonusLevelScreen_bmp+396
0x331C	0xFF80FF80 ;?ICS_BonusLevelScreen_bmp+400
0x3320	0x00000000 ;?ICS_BonusLevelScreen_bmp+404
0x3324	0xFF80FF80 ;?ICS_BonusLevelScreen_bmp+408
0x3328	0xFF80FF80 ;?ICS_BonusLevelScreen_bmp+412
0x332C	0xFF800000 ;?ICS_BonusLevelScreen_bmp+416
0x3330	0x00000000 ;?ICS_BonusLevelScreen_bmp+420
0x3334	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+424
0x3338	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+428
0x333C	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+432
0x3340	0x00000000 ;?ICS_BonusLevelScreen_bmp+436
0x3344	0x00000000 ;?ICS_BonusLevelScreen_bmp+440
0x3348	0x00000000 ;?ICS_BonusLevelScreen_bmp+444
0x334C	0x00000000 ;?ICS_BonusLevelScreen_bmp+448
0x3350	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+452
0x3354	0xFF800000 ;?ICS_BonusLevelScreen_bmp+456
0x3358	0xFF800000 ;?ICS_BonusLevelScreen_bmp+460
0x335C	0x00000000 ;?ICS_BonusLevelScreen_bmp+464
0x3360	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+468
0x3364	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+472
0x3368	0xFF800000 ;?ICS_BonusLevelScreen_bmp+476
0x336C	0xFF800000 ;?ICS_BonusLevelScreen_bmp+480
0x3370	0x00000000 ;?ICS_BonusLevelScreen_bmp+484
0x3374	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+488
0x3378	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+492
0x337C	0x00000000 ;?ICS_BonusLevelScreen_bmp+496
0x3380	0x00000000 ;?ICS_BonusLevelScreen_bmp+500
0x3384	0x00000000 ;?ICS_BonusLevelScreen_bmp+504
0x3388	0x00000000 ;?ICS_BonusLevelScreen_bmp+508
0x338C	0x00000000 ;?ICS_BonusLevelScreen_bmp+512
0x3390	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+516
0x3394	0xFF800000 ;?ICS_BonusLevelScreen_bmp+520
0x3398	0xFF800000 ;?ICS_BonusLevelScreen_bmp+524
0x339C	0x00000000 ;?ICS_BonusLevelScreen_bmp+528
0x33A0	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+532
0x33A4	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+536
0x33A8	0xFF800000 ;?ICS_BonusLevelScreen_bmp+540
0x33AC	0xFF800000 ;?ICS_BonusLevelScreen_bmp+544
0x33B0	0x00000000 ;?ICS_BonusLevelScreen_bmp+548
0x33B4	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+552
0x33B8	0xFF800000 ;?ICS_BonusLevelScreen_bmp+556
0x33BC	0x00000000 ;?ICS_BonusLevelScreen_bmp+560
0x33C0	0x00000000 ;?ICS_BonusLevelScreen_bmp+564
0x33C4	0x00000000 ;?ICS_BonusLevelScreen_bmp+568
0x33C8	0x00000000 ;?ICS_BonusLevelScreen_bmp+572
0x33CC	0x00000000 ;?ICS_BonusLevelScreen_bmp+576
0x33D0	0xFF80FF80 ;?ICS_BonusLevelScreen_bmp+580
0x33D4	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+584
0x33D8	0x00000000 ;?ICS_BonusLevelScreen_bmp+588
0x33DC	0xFF80FF80 ;?ICS_BonusLevelScreen_bmp+592
0x33E0	0x00000000 ;?ICS_BonusLevelScreen_bmp+596
0x33E4	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+600
0x33E8	0xFF800000 ;?ICS_BonusLevelScreen_bmp+604
0x33EC	0xFF800000 ;?ICS_BonusLevelScreen_bmp+608
0x33F0	0xFF80FF80 ;?ICS_BonusLevelScreen_bmp+612
0x33F4	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+616
0x33F8	0x00000000 ;?ICS_BonusLevelScreen_bmp+620
0x33FC	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+624
0x3400	0x00000000 ;?ICS_BonusLevelScreen_bmp+628
0x3404	0x00000000 ;?ICS_BonusLevelScreen_bmp+632
0x3408	0x00000000 ;?ICS_BonusLevelScreen_bmp+636
0x340C	0x00000000 ;?ICS_BonusLevelScreen_bmp+640
0x3410	0x00000000 ;?ICS_BonusLevelScreen_bmp+644
0x3414	0x00000000 ;?ICS_BonusLevelScreen_bmp+648
0x3418	0x00000000 ;?ICS_BonusLevelScreen_bmp+652
0x341C	0x00000000 ;?ICS_BonusLevelScreen_bmp+656
0x3420	0x00000000 ;?ICS_BonusLevelScreen_bmp+660
0x3424	0x00000000 ;?ICS_BonusLevelScreen_bmp+664
0x3428	0x00000000 ;?ICS_BonusLevelScreen_bmp+668
0x342C	0x00000000 ;?ICS_BonusLevelScreen_bmp+672
0x3430	0x00000000 ;?ICS_BonusLevelScreen_bmp+676
0x3434	0x00000000 ;?ICS_BonusLevelScreen_bmp+680
0x3438	0xFF80FF80 ;?ICS_BonusLevelScreen_bmp+684
0x343C	0x00000000 ;?ICS_BonusLevelScreen_bmp+688
0x3440	0xFF800000 ;?ICS_BonusLevelScreen_bmp+692
0x3444	0xFF80FF80 ;?ICS_BonusLevelScreen_bmp+696
0x3448	0x00000000 ;?ICS_BonusLevelScreen_bmp+700
0x344C	0x00000000 ;?ICS_BonusLevelScreen_bmp+704
0x3450	0x00000000 ;?ICS_BonusLevelScreen_bmp+708
0x3454	0x00000000 ;?ICS_BonusLevelScreen_bmp+712
0x3458	0x00000000 ;?ICS_BonusLevelScreen_bmp+716
0x345C	0x00000000 ;?ICS_BonusLevelScreen_bmp+720
0x3460	0x00000000 ;?ICS_BonusLevelScreen_bmp+724
0x3464	0x00000000 ;?ICS_BonusLevelScreen_bmp+728
0x3468	0x00000000 ;?ICS_BonusLevelScreen_bmp+732
0x346C	0x00000000 ;?ICS_BonusLevelScreen_bmp+736
0x3470	0x00000000 ;?ICS_BonusLevelScreen_bmp+740
0x3474	0x00000000 ;?ICS_BonusLevelScreen_bmp+744
0x3478	0x00000000 ;?ICS_BonusLevelScreen_bmp+748
0x347C	0x00000000 ;?ICS_BonusLevelScreen_bmp+752
0x3480	0xFF800000 ;?ICS_BonusLevelScreen_bmp+756
0x3484	0xFF80FF80 ;?ICS_BonusLevelScreen_bmp+760
0x3488	0x00000000 ;?ICS_BonusLevelScreen_bmp+764
0x348C	0x00000000 ;?ICS_BonusLevelScreen_bmp+768
0x3490	0x00000000 ;?ICS_BonusLevelScreen_bmp+772
0x3494	0x00000000 ;?ICS_BonusLevelScreen_bmp+776
0x3498	0x00000000 ;?ICS_BonusLevelScreen_bmp+780
0x349C	0x00000000 ;?ICS_BonusLevelScreen_bmp+784
0x34A0	0x00000000 ;?ICS_BonusLevelScreen_bmp+788
0x34A4	0x00000000 ;?ICS_BonusLevelScreen_bmp+792
0x34A8	0x00000000 ;?ICS_BonusLevelScreen_bmp+796
0x34AC	0x00000000 ;?ICS_BonusLevelScreen_bmp+800
0x34B0	0x00000000 ;?ICS_BonusLevelScreen_bmp+804
0x34B4	0x00000000 ;?ICS_BonusLevelScreen_bmp+808
0x34B8	0x00000000 ;?ICS_BonusLevelScreen_bmp+812
0x34BC	0x00000000 ;?ICS_BonusLevelScreen_bmp+816
0x34C0	0xFF800000 ;?ICS_BonusLevelScreen_bmp+820
0x34C4	0xFF80FF80 ;?ICS_BonusLevelScreen_bmp+824
0x34C8	0x00000000 ;?ICS_BonusLevelScreen_bmp+828
0x34CC	0x00000000 ;?ICS_BonusLevelScreen_bmp+832
0x34D0	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+836
0x34D4	0x00000000 ;?ICS_BonusLevelScreen_bmp+840
0x34D8	0x00000000 ;?ICS_BonusLevelScreen_bmp+844
0x34DC	0x00000000 ;?ICS_BonusLevelScreen_bmp+848
0x34E0	0x00000000 ;?ICS_BonusLevelScreen_bmp+852
0x34E4	0x00000000 ;?ICS_BonusLevelScreen_bmp+856
0x34E8	0x00000000 ;?ICS_BonusLevelScreen_bmp+860
0x34EC	0x00000000 ;?ICS_BonusLevelScreen_bmp+864
0x34F0	0x00000000 ;?ICS_BonusLevelScreen_bmp+868
0x34F4	0x00000000 ;?ICS_BonusLevelScreen_bmp+872
0x34F8	0xFF800000 ;?ICS_BonusLevelScreen_bmp+876
0x34FC	0x00000000 ;?ICS_BonusLevelScreen_bmp+880
0x3500	0xFF800000 ;?ICS_BonusLevelScreen_bmp+884
0x3504	0xFF80FF80 ;?ICS_BonusLevelScreen_bmp+888
0x3508	0x00000000 ;?ICS_BonusLevelScreen_bmp+892
0x350C	0x00000000 ;?ICS_BonusLevelScreen_bmp+896
0x3510	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+900
0x3514	0x00000000 ;?ICS_BonusLevelScreen_bmp+904
0x3518	0x00000000 ;?ICS_BonusLevelScreen_bmp+908
0x351C	0xFF800000 ;?ICS_BonusLevelScreen_bmp+912
0x3520	0x00000000 ;?ICS_BonusLevelScreen_bmp+916
0x3524	0x00000000 ;?ICS_BonusLevelScreen_bmp+920
0x3528	0x00000000 ;?ICS_BonusLevelScreen_bmp+924
0x352C	0x00000000 ;?ICS_BonusLevelScreen_bmp+928
0x3530	0xFF800000 ;?ICS_BonusLevelScreen_bmp+932
0x3534	0x00000000 ;?ICS_BonusLevelScreen_bmp+936
0x3538	0xFF800000 ;?ICS_BonusLevelScreen_bmp+940
0x353C	0x00000000 ;?ICS_BonusLevelScreen_bmp+944
0x3540	0xFF800000 ;?ICS_BonusLevelScreen_bmp+948
0x3544	0xFF80FF80 ;?ICS_BonusLevelScreen_bmp+952
0x3548	0x00000000 ;?ICS_BonusLevelScreen_bmp+956
0x354C	0x00000000 ;?ICS_BonusLevelScreen_bmp+960
0x3550	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+964
0x3554	0x00000000 ;?ICS_BonusLevelScreen_bmp+968
0x3558	0x00000000 ;?ICS_BonusLevelScreen_bmp+972
0x355C	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+976
0x3560	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+980
0x3564	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+984
0x3568	0x00000000 ;?ICS_BonusLevelScreen_bmp+988
0x356C	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+992
0x3570	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+996
0x3574	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+1000
0x3578	0xFF800000 ;?ICS_BonusLevelScreen_bmp+1004
0x357C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1008
0x3580	0x00000000 ;?ICS_BonusLevelScreen_bmp+1012
0x3584	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+1016
0x3588	0x00000000 ;?ICS_BonusLevelScreen_bmp+1020
0x358C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1024
0x3590	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+1028
0x3594	0x00000000 ;?ICS_BonusLevelScreen_bmp+1032
0x3598	0x00000000 ;?ICS_BonusLevelScreen_bmp+1036
0x359C	0xFF80FF80 ;?ICS_BonusLevelScreen_bmp+1040
0x35A0	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+1044
0x35A4	0xFF80FF80 ;?ICS_BonusLevelScreen_bmp+1048
0x35A8	0xFF800000 ;?ICS_BonusLevelScreen_bmp+1052
0x35AC	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+1056
0x35B0	0xFF80FF80 ;?ICS_BonusLevelScreen_bmp+1060
0x35B4	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+1064
0x35B8	0xFF800000 ;?ICS_BonusLevelScreen_bmp+1068
0x35BC	0x00000000 ;?ICS_BonusLevelScreen_bmp+1072
0x35C0	0x00000000 ;?ICS_BonusLevelScreen_bmp+1076
0x35C4	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+1080
0x35C8	0x00000000 ;?ICS_BonusLevelScreen_bmp+1084
0x35CC	0x00000000 ;?ICS_BonusLevelScreen_bmp+1088
0x35D0	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+1092
0x35D4	0x00000000 ;?ICS_BonusLevelScreen_bmp+1096
0x35D8	0x00000000 ;?ICS_BonusLevelScreen_bmp+1100
0x35DC	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+1104
0x35E0	0x00000000 ;?ICS_BonusLevelScreen_bmp+1108
0x35E4	0xFF800000 ;?ICS_BonusLevelScreen_bmp+1112
0x35E8	0xFF800000 ;?ICS_BonusLevelScreen_bmp+1116
0x35EC	0x00000000 ;?ICS_BonusLevelScreen_bmp+1120
0x35F0	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+1124
0x35F4	0x00000000 ;?ICS_BonusLevelScreen_bmp+1128
0x35F8	0xFF800000 ;?ICS_BonusLevelScreen_bmp+1132
0x35FC	0x00000000 ;?ICS_BonusLevelScreen_bmp+1136
0x3600	0x00000000 ;?ICS_BonusLevelScreen_bmp+1140
0x3604	0x00000000 ;?ICS_BonusLevelScreen_bmp+1144
0x3608	0x00000000 ;?ICS_BonusLevelScreen_bmp+1148
0x360C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1152
0x3610	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+1156
0x3614	0x00000000 ;?ICS_BonusLevelScreen_bmp+1160
0x3618	0x00000000 ;?ICS_BonusLevelScreen_bmp+1164
0x361C	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+1168
0x3620	0x00000000 ;?ICS_BonusLevelScreen_bmp+1172
0x3624	0xFF800000 ;?ICS_BonusLevelScreen_bmp+1176
0x3628	0xFF80FF80 ;?ICS_BonusLevelScreen_bmp+1180
0x362C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1184
0x3630	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+1188
0x3634	0x00000000 ;?ICS_BonusLevelScreen_bmp+1192
0x3638	0xFF800000 ;?ICS_BonusLevelScreen_bmp+1196
0x363C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1200
0x3640	0xFF800000 ;?ICS_BonusLevelScreen_bmp+1204
0x3644	0xFF80FF80 ;?ICS_BonusLevelScreen_bmp+1208
0x3648	0x00000000 ;?ICS_BonusLevelScreen_bmp+1212
0x364C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1216
0x3650	0xFF80FF80 ;?ICS_BonusLevelScreen_bmp+1220
0x3654	0xFF80FF80 ;?ICS_BonusLevelScreen_bmp+1224
0x3658	0x00000000 ;?ICS_BonusLevelScreen_bmp+1228
0x365C	0xFF800000 ;?ICS_BonusLevelScreen_bmp+1232
0x3660	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+1236
0x3664	0x00000000 ;?ICS_BonusLevelScreen_bmp+1240
0x3668	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+1244
0x366C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1248
0x3670	0xFF800000 ;?ICS_BonusLevelScreen_bmp+1252
0x3674	0x0000FF80 ;?ICS_BonusLevelScreen_bmp+1256
0x3678	0xFF800000 ;?ICS_BonusLevelScreen_bmp+1260
0x367C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1264
0x3680	0xFF800000 ;?ICS_BonusLevelScreen_bmp+1268
0x3684	0xFF80FF80 ;?ICS_BonusLevelScreen_bmp+1272
0x3688	0x00000000 ;?ICS_BonusLevelScreen_bmp+1276
0x368C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1280
0x3690	0x00000000 ;?ICS_BonusLevelScreen_bmp+1284
0x3694	0x00000000 ;?ICS_BonusLevelScreen_bmp+1288
0x3698	0x00000000 ;?ICS_BonusLevelScreen_bmp+1292
0x369C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1296
0x36A0	0x00000000 ;?ICS_BonusLevelScreen_bmp+1300
0x36A4	0x00000000 ;?ICS_BonusLevelScreen_bmp+1304
0x36A8	0x00000000 ;?ICS_BonusLevelScreen_bmp+1308
0x36AC	0x00000000 ;?ICS_BonusLevelScreen_bmp+1312
0x36B0	0x00000000 ;?ICS_BonusLevelScreen_bmp+1316
0x36B4	0x00000000 ;?ICS_BonusLevelScreen_bmp+1320
0x36B8	0x00000000 ;?ICS_BonusLevelScreen_bmp+1324
0x36BC	0x00000000 ;?ICS_BonusLevelScreen_bmp+1328
0x36C0	0x00000000 ;?ICS_BonusLevelScreen_bmp+1332
0x36C4	0x00000000 ;?ICS_BonusLevelScreen_bmp+1336
0x36C8	0x00000000 ;?ICS_BonusLevelScreen_bmp+1340
0x36CC	0x00000000 ;?ICS_BonusLevelScreen_bmp+1344
0x36D0	0x00000000 ;?ICS_BonusLevelScreen_bmp+1348
0x36D4	0x00000000 ;?ICS_BonusLevelScreen_bmp+1352
0x36D8	0x00000000 ;?ICS_BonusLevelScreen_bmp+1356
0x36DC	0x00000000 ;?ICS_BonusLevelScreen_bmp+1360
0x36E0	0x00000000 ;?ICS_BonusLevelScreen_bmp+1364
0x36E4	0x00000000 ;?ICS_BonusLevelScreen_bmp+1368
0x36E8	0x00000000 ;?ICS_BonusLevelScreen_bmp+1372
0x36EC	0x00000000 ;?ICS_BonusLevelScreen_bmp+1376
0x36F0	0x00000000 ;?ICS_BonusLevelScreen_bmp+1380
0x36F4	0x00000000 ;?ICS_BonusLevelScreen_bmp+1384
0x36F8	0x00000000 ;?ICS_BonusLevelScreen_bmp+1388
0x36FC	0x00000000 ;?ICS_BonusLevelScreen_bmp+1392
0x3700	0x00000000 ;?ICS_BonusLevelScreen_bmp+1396
0x3704	0x00000000 ;?ICS_BonusLevelScreen_bmp+1400
0x3708	0x00000000 ;?ICS_BonusLevelScreen_bmp+1404
0x370C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1408
0x3710	0x00000000 ;?ICS_BonusLevelScreen_bmp+1412
0x3714	0x00000000 ;?ICS_BonusLevelScreen_bmp+1416
0x3718	0x00000000 ;?ICS_BonusLevelScreen_bmp+1420
0x371C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1424
0x3720	0x00000000 ;?ICS_BonusLevelScreen_bmp+1428
0x3724	0x00000000 ;?ICS_BonusLevelScreen_bmp+1432
0x3728	0x00000000 ;?ICS_BonusLevelScreen_bmp+1436
0x372C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1440
0x3730	0x00000000 ;?ICS_BonusLevelScreen_bmp+1444
0x3734	0x00000000 ;?ICS_BonusLevelScreen_bmp+1448
0x3738	0x00000000 ;?ICS_BonusLevelScreen_bmp+1452
0x373C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1456
0x3740	0x00000000 ;?ICS_BonusLevelScreen_bmp+1460
0x3744	0x00000000 ;?ICS_BonusLevelScreen_bmp+1464
0x3748	0x00000000 ;?ICS_BonusLevelScreen_bmp+1468
0x374C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1472
0x3750	0x00000000 ;?ICS_BonusLevelScreen_bmp+1476
0x3754	0x00000000 ;?ICS_BonusLevelScreen_bmp+1480
0x3758	0x00000000 ;?ICS_BonusLevelScreen_bmp+1484
0x375C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1488
0x3760	0x00000000 ;?ICS_BonusLevelScreen_bmp+1492
0x3764	0x00000000 ;?ICS_BonusLevelScreen_bmp+1496
0x3768	0x00000000 ;?ICS_BonusLevelScreen_bmp+1500
0x376C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1504
0x3770	0x00000000 ;?ICS_BonusLevelScreen_bmp+1508
0x3774	0x00000000 ;?ICS_BonusLevelScreen_bmp+1512
0x3778	0x00000000 ;?ICS_BonusLevelScreen_bmp+1516
0x377C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1520
0x3780	0x00000000 ;?ICS_BonusLevelScreen_bmp+1524
0x3784	0x00000000 ;?ICS_BonusLevelScreen_bmp+1528
0x3788	0x00000000 ;?ICS_BonusLevelScreen_bmp+1532
0x378C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1536
0x3790	0x00000000 ;?ICS_BonusLevelScreen_bmp+1540
0x3794	0x00000000 ;?ICS_BonusLevelScreen_bmp+1544
0x3798	0x00000000 ;?ICS_BonusLevelScreen_bmp+1548
0x379C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1552
0x37A0	0x00000000 ;?ICS_BonusLevelScreen_bmp+1556
0x37A4	0x00000000 ;?ICS_BonusLevelScreen_bmp+1560
0x37A8	0x00000000 ;?ICS_BonusLevelScreen_bmp+1564
0x37AC	0x00000000 ;?ICS_BonusLevelScreen_bmp+1568
0x37B0	0x00000000 ;?ICS_BonusLevelScreen_bmp+1572
0x37B4	0x00000000 ;?ICS_BonusLevelScreen_bmp+1576
0x37B8	0x00000000 ;?ICS_BonusLevelScreen_bmp+1580
0x37BC	0x00000000 ;?ICS_BonusLevelScreen_bmp+1584
0x37C0	0x00000000 ;?ICS_BonusLevelScreen_bmp+1588
0x37C4	0x00000000 ;?ICS_BonusLevelScreen_bmp+1592
0x37C8	0x00000000 ;?ICS_BonusLevelScreen_bmp+1596
0x37CC	0x00000000 ;?ICS_BonusLevelScreen_bmp+1600
0x37D0	0x00000000 ;?ICS_BonusLevelScreen_bmp+1604
0x37D4	0x00000000 ;?ICS_BonusLevelScreen_bmp+1608
0x37D8	0x00000000 ;?ICS_BonusLevelScreen_bmp+1612
0x37DC	0x00000000 ;?ICS_BonusLevelScreen_bmp+1616
0x37E0	0x00000000 ;?ICS_BonusLevelScreen_bmp+1620
0x37E4	0x00000000 ;?ICS_BonusLevelScreen_bmp+1624
0x37E8	0x00000000 ;?ICS_BonusLevelScreen_bmp+1628
0x37EC	0x00000000 ;?ICS_BonusLevelScreen_bmp+1632
0x37F0	0x00000000 ;?ICS_BonusLevelScreen_bmp+1636
0x37F4	0x00000000 ;?ICS_BonusLevelScreen_bmp+1640
0x37F8	0x00000000 ;?ICS_BonusLevelScreen_bmp+1644
0x37FC	0x00000000 ;?ICS_BonusLevelScreen_bmp+1648
0x3800	0x00000000 ;?ICS_BonusLevelScreen_bmp+1652
0x3804	0x00000000 ;?ICS_BonusLevelScreen_bmp+1656
0x3808	0x00000000 ;?ICS_BonusLevelScreen_bmp+1660
0x380C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1664
0x3810	0x00000000 ;?ICS_BonusLevelScreen_bmp+1668
0x3814	0x00000000 ;?ICS_BonusLevelScreen_bmp+1672
0x3818	0x00000000 ;?ICS_BonusLevelScreen_bmp+1676
0x381C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1680
0x3820	0x00000000 ;?ICS_BonusLevelScreen_bmp+1684
0x3824	0x00000000 ;?ICS_BonusLevelScreen_bmp+1688
0x3828	0x00000000 ;?ICS_BonusLevelScreen_bmp+1692
0x382C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1696
0x3830	0x00000000 ;?ICS_BonusLevelScreen_bmp+1700
0x3834	0x00000000 ;?ICS_BonusLevelScreen_bmp+1704
0x3838	0x00000000 ;?ICS_BonusLevelScreen_bmp+1708
0x383C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1712
0x3840	0x00000000 ;?ICS_BonusLevelScreen_bmp+1716
0x3844	0x00000000 ;?ICS_BonusLevelScreen_bmp+1720
0x3848	0x00000000 ;?ICS_BonusLevelScreen_bmp+1724
0x384C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1728
0x3850	0x00000000 ;?ICS_BonusLevelScreen_bmp+1732
0x3854	0x00000000 ;?ICS_BonusLevelScreen_bmp+1736
0x3858	0x00000000 ;?ICS_BonusLevelScreen_bmp+1740
0x385C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1744
0x3860	0x00000000 ;?ICS_BonusLevelScreen_bmp+1748
0x3864	0x00000000 ;?ICS_BonusLevelScreen_bmp+1752
0x3868	0x00000000 ;?ICS_BonusLevelScreen_bmp+1756
0x386C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1760
0x3870	0x00000000 ;?ICS_BonusLevelScreen_bmp+1764
0x3874	0x00000000 ;?ICS_BonusLevelScreen_bmp+1768
0x3878	0x00000000 ;?ICS_BonusLevelScreen_bmp+1772
0x387C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1776
0x3880	0x00000000 ;?ICS_BonusLevelScreen_bmp+1780
0x3884	0x00000000 ;?ICS_BonusLevelScreen_bmp+1784
0x3888	0x00000000 ;?ICS_BonusLevelScreen_bmp+1788
0x388C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1792
0x3890	0x00000000 ;?ICS_BonusLevelScreen_bmp+1796
0x3894	0x00000000 ;?ICS_BonusLevelScreen_bmp+1800
0x3898	0x00000000 ;?ICS_BonusLevelScreen_bmp+1804
0x389C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1808
0x38A0	0x00000000 ;?ICS_BonusLevelScreen_bmp+1812
0x38A4	0x00000000 ;?ICS_BonusLevelScreen_bmp+1816
0x38A8	0x00000000 ;?ICS_BonusLevelScreen_bmp+1820
0x38AC	0x00000000 ;?ICS_BonusLevelScreen_bmp+1824
0x38B0	0x00000000 ;?ICS_BonusLevelScreen_bmp+1828
0x38B4	0x00000000 ;?ICS_BonusLevelScreen_bmp+1832
0x38B8	0x00000000 ;?ICS_BonusLevelScreen_bmp+1836
0x38BC	0x00000000 ;?ICS_BonusLevelScreen_bmp+1840
0x38C0	0x00000000 ;?ICS_BonusLevelScreen_bmp+1844
0x38C4	0x00000000 ;?ICS_BonusLevelScreen_bmp+1848
0x38C8	0x00000000 ;?ICS_BonusLevelScreen_bmp+1852
0x38CC	0x00000000 ;?ICS_BonusLevelScreen_bmp+1856
0x38D0	0x00000000 ;?ICS_BonusLevelScreen_bmp+1860
0x38D4	0x00000000 ;?ICS_BonusLevelScreen_bmp+1864
0x38D8	0x00000000 ;?ICS_BonusLevelScreen_bmp+1868
0x38DC	0x00000000 ;?ICS_BonusLevelScreen_bmp+1872
0x38E0	0x00000000 ;?ICS_BonusLevelScreen_bmp+1876
0x38E4	0x00000000 ;?ICS_BonusLevelScreen_bmp+1880
0x38E8	0x00000000 ;?ICS_BonusLevelScreen_bmp+1884
0x38EC	0x00000000 ;?ICS_BonusLevelScreen_bmp+1888
0x38F0	0x00000000 ;?ICS_BonusLevelScreen_bmp+1892
0x38F4	0x00000000 ;?ICS_BonusLevelScreen_bmp+1896
0x38F8	0x00000000 ;?ICS_BonusLevelScreen_bmp+1900
0x38FC	0x00000000 ;?ICS_BonusLevelScreen_bmp+1904
0x3900	0x00000000 ;?ICS_BonusLevelScreen_bmp+1908
0x3904	0x00000000 ;?ICS_BonusLevelScreen_bmp+1912
0x3908	0x00000000 ;?ICS_BonusLevelScreen_bmp+1916
0x390C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1920
0x3910	0x00000000 ;?ICS_BonusLevelScreen_bmp+1924
0x3914	0x00000000 ;?ICS_BonusLevelScreen_bmp+1928
0x3918	0x00000000 ;?ICS_BonusLevelScreen_bmp+1932
0x391C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1936
0x3920	0x00000000 ;?ICS_BonusLevelScreen_bmp+1940
0x3924	0x00000000 ;?ICS_BonusLevelScreen_bmp+1944
0x3928	0x00000000 ;?ICS_BonusLevelScreen_bmp+1948
0x392C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1952
0x3930	0x00000000 ;?ICS_BonusLevelScreen_bmp+1956
0x3934	0x00000000 ;?ICS_BonusLevelScreen_bmp+1960
0x3938	0x00000000 ;?ICS_BonusLevelScreen_bmp+1964
0x393C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1968
0x3940	0x00000000 ;?ICS_BonusLevelScreen_bmp+1972
0x3944	0x00000000 ;?ICS_BonusLevelScreen_bmp+1976
0x3948	0x00000000 ;?ICS_BonusLevelScreen_bmp+1980
0x394C	0x00000000 ;?ICS_BonusLevelScreen_bmp+1984
0x3950	0x00000000 ;?ICS_BonusLevelScreen_bmp+1988
0x3954	0x00000000 ;?ICS_BonusLevelScreen_bmp+1992
0x3958	0x00000000 ;?ICS_BonusLevelScreen_bmp+1996
0x395C	0x00000000 ;?ICS_BonusLevelScreen_bmp+2000
0x3960	0x00000000 ;?ICS_BonusLevelScreen_bmp+2004
0x3964	0x00000000 ;?ICS_BonusLevelScreen_bmp+2008
0x3968	0x00000000 ;?ICS_BonusLevelScreen_bmp+2012
0x396C	0x00000000 ;?ICS_BonusLevelScreen_bmp+2016
0x3970	0x00000000 ;?ICS_BonusLevelScreen_bmp+2020
0x3974	0x00000000 ;?ICS_BonusLevelScreen_bmp+2024
0x3978	0x00000000 ;?ICS_BonusLevelScreen_bmp+2028
0x397C	0x00000000 ;?ICS_BonusLevelScreen_bmp+2032
0x3980	0x00000000 ;?ICS_BonusLevelScreen_bmp+2036
0x3984	0x00000000 ;?ICS_BonusLevelScreen_bmp+2040
0x3988	0x00000000 ;?ICS_BonusLevelScreen_bmp+2044
0x398C	0x00000000 ;?ICS_BonusLevelScreen_bmp+2048
0x3990	0x0000 ;?ICS_BonusLevelScreen_bmp+2052
; end of ?ICS_BonusLevelScreen_bmp
;,0 :: _initBlock_5 [2]
; Containing: ?ICS_move_flag [1]
;             ?ICS_safe [1]
0x3992	0x0100 ;_initBlock_5+0 : ?ICS_move_flag at 0x3992 : ?ICS_safe at 0x3993
; end of _initBlock_5
;MatrixRGB_Demo_Project.c,0 :: ?ICS_ball_count_flag [2]
0x3994	0x0000 ;?ICS_ball_count_flag+0
; end of ?ICS_ball_count_flag
;MatrixRGB_Demo_Project.c,0 :: ?ICS_time_s [1]
0x3996	0x00 ;?ICS_time_s+0
; end of ?ICS_time_s
;__Lib_GPIO_32F10x_Defs.c,675 :: __GPIO_MODULE_SPI3_PC10_11_12 [108]
0x3998	0x0000002A ;__GPIO_MODULE_SPI3_PC10_11_12+0
0x399C	0x0000002B ;__GPIO_MODULE_SPI3_PC10_11_12+4
0x39A0	0x0000002C ;__GPIO_MODULE_SPI3_PC10_11_12+8
0x39A4	0xFFFFFFFF ;__GPIO_MODULE_SPI3_PC10_11_12+12
0x39A8	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+16
0x39AC	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+20
0x39B0	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+24
0x39B4	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+28
0x39B8	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+32
0x39BC	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+36
0x39C0	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+40
0x39C4	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+44
0x39C8	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+48
0x39CC	0x00000818 ;__GPIO_MODULE_SPI3_PC10_11_12+52
0x39D0	0x00000818 ;__GPIO_MODULE_SPI3_PC10_11_12+56
0x39D4	0x00000818 ;__GPIO_MODULE_SPI3_PC10_11_12+60
0x39D8	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+64
0x39DC	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+68
0x39E0	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+72
0x39E4	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+76
0x39E8	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+80
0x39EC	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+84
0x39F0	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+88
0x39F4	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+92
0x39F8	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+96
0x39FC	0x00000000 ;__GPIO_MODULE_SPI3_PC10_11_12+100
0x3A00	0x08201100 ;__GPIO_MODULE_SPI3_PC10_11_12+104
; end of __GPIO_MODULE_SPI3_PC10_11_12
;MatrixRGB_Demo_Project.c,0 :: ?ICS_time [4]
0x3A04	0x00000000 ;?ICS_time+0
; end of ?ICS_time
;matrixrgb_hw.c,0 :: ?ICSmatrixrgb_hw_spi_buffer [100]
0x3A08	0x00000000 ;?ICSmatrixrgb_hw_spi_buffer+0
0x3A0C	0x00000000 ;?ICSmatrixrgb_hw_spi_buffer+4
0x3A10	0x00000000 ;?ICSmatrixrgb_hw_spi_buffer+8
0x3A14	0x00000000 ;?ICSmatrixrgb_hw_spi_buffer+12
0x3A18	0x00000000 ;?ICSmatrixrgb_hw_spi_buffer+16
0x3A1C	0x00000000 ;?ICSmatrixrgb_hw_spi_buffer+20
0x3A20	0x00000000 ;?ICSmatrixrgb_hw_spi_buffer+24
0x3A24	0x00000000 ;?ICSmatrixrgb_hw_spi_buffer+28
0x3A28	0x00000000 ;?ICSmatrixrgb_hw_spi_buffer+32
0x3A2C	0x00000000 ;?ICSmatrixrgb_hw_spi_buffer+36
0x3A30	0x00000000 ;?ICSmatrixrgb_hw_spi_buffer+40
0x3A34	0x00000000 ;?ICSmatrixrgb_hw_spi_buffer+44
0x3A38	0x00000000 ;?ICSmatrixrgb_hw_spi_buffer+48
0x3A3C	0x00000000 ;?ICSmatrixrgb_hw_spi_buffer+52
0x3A40	0x00000000 ;?ICSmatrixrgb_hw_spi_buffer+56
0x3A44	0x00000000 ;?ICSmatrixrgb_hw_spi_buffer+60
0x3A48	0x00000000 ;?ICSmatrixrgb_hw_spi_buffer+64
0x3A4C	0x00000000 ;?ICSmatrixrgb_hw_spi_buffer+68
0x3A50	0x00000000 ;?ICSmatrixrgb_hw_spi_buffer+72
0x3A54	0x00000000 ;?ICSmatrixrgb_hw_spi_buffer+76
0x3A58	0x00000000 ;?ICSmatrixrgb_hw_spi_buffer+80
0x3A5C	0x00000000 ;?ICSmatrixrgb_hw_spi_buffer+84
0x3A60	0x00000000 ;?ICSmatrixrgb_hw_spi_buffer+88
0x3A64	0x00000000 ;?ICSmatrixrgb_hw_spi_buffer+92
0x3A68	0x00000000 ;?ICSmatrixrgb_hw_spi_buffer+96
; end of ?ICSmatrixrgb_hw_spi_buffer
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0150      [34]    __Lib_SPI_123_SPIx_Read
0x0174     [140]    _GPIO_Clk_Enable
0x0200      [28]    _SPI2_Write
0x021C      [16]    _matrixrgb_hal_cs_high
0x022C     [152]    __Lib_GPIO_32F10x_GPIO_Configure_Pin
0x02C4      [28]    _SPI1_Write
0x02E0      [16]    _matrixrgb_hal_cs_low
0x02F0      [28]    _SPI3_Write
0x0310      [24]    _Delay_1us
0x0328      [52]    _matrixrgb_hal_init
0x035C     [296]    __Lib_ADC_12_32F10x_16ch_ADCx_Init
0x0484     [120]    _erase_brick
0x04FC     [120]    _NVIC_IntEnable
0x0574     [104]    _is_player_there
0x05DC      [84]    _matrixrgb_hal_write
0x0630      [66]    __Lib_SPI_123_SPIx_Init_Advanced
0x0674     [272]    _GPIO_Alternate_Function_Enable
0x0784     [500]    _GPIO_Config
0x0978      [24]    _GPIO_Analog_Input
0x0990      [28]    _srand
0x09AC     [124]    _check_ball_boundaries
0x0A28    [3324]    _is_brick_hit
0x1724      [44]    _is_game_over
0x1750     [120]    _matrixrgb_write_pixel
0x17C8      [68]    _matrixrgb_erase_pixel
0x1810      [24]    _Delay_500us
0x1828     [150]    __Lib_ADC_12_32F10x_16ch_ADCx_Get_Sample
0x18C0      [68]    _rand
0x1904      [68]    _set_vector
0x1948      [84]    _SPI3_Init_Advanced
0x199C      [24]    _GPIO_Digital_Input
0x19B4     [288]    _ADC_Set_Input_Channel
0x1AD4      [52]    _ADC1_Init
0x1B08     [112]    _matrixrgb_init
0x1B78      [28]    _GPIO_Digital_Output
0x1B94      [84]    _InitTimer2
0x1BE8     [172]    _matrixrgb_image_load
0x1C94     [200]    _set_ball_pos
0x1D5C      [96]    _display_bonuslevel
0x1DBC     [108]    __Lib_System_105_107_SystemClockSetDefault
0x1E28      [96]    _move_ball
0x1E88    [1748]    _setup_bonus_level
0x255C     [188]    _move_player
0x2618     [212]    _system_setup
0x26EC      [12]    _wait_for_choice
0x26F8      [32]    _matrixrgb_clear_screen
0x2718      [20]    ___CC2DW
0x272C      [58]    ___FillZeros
0x2768      [12]    _matrixrgb_set_color
0x2774      [32]    _matrixrgb_refresh
0x2794      [28]    _ADC1_Get_Sample
0x27B0     [106]    _Button
0x281C    [1332]    _setup_gameboard
0x2D50     [104]    _setup_player
0x2DB8     [144]    _setup_ball
0x2E48       [8]    ___GenExcept
0x2E50      [76]    _Timer2_interrupt
0x2E9C      [20]    __Lib_System_105_107_InitialSetUpFosc
0x2EB0     [324]    __Lib_System_105_107_InitialSetUpRCCRCC2
0x2FF8     [396]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x20000000       [2]    _g_ball_speed
0x20000002       [1]    _playing
0x20000003       [1]    _ball_dir_vert
0x20000004       [1]    _ball_dir_horiz
0x20000005       [1]    _offset
0x20000006       [2]    _rand_num
0x20000008    [2054]    _BonusLevelScreen_bmp
0x2000080E       [1]    _move_flag
0x2000080F       [1]    _safe
0x20000810       [2]    _ball_count_flag
0x20000812       [1]    _time_s
0x20000813       [1]    _player_surface
0x20000814       [4]    _time
0x20000818     [100]    matrixrgb_hw_spi_buffer
0x2000087C       [2]    _ball_speed
0x2000087E       [2]    _ball_curr_pos
0x20000880     [288]    _bricks
0x200009A0       [1]    _brick_side_horiz
0x200009A1       [1]    _brick_side_vert
0x200009A2       [2]    _player_curr_pos
0x200009A4       [4]    _adc_pos
0x200009A8       [4]    matrixrgb_hal_write_spi_p
0x200009AC       [4]    _SPI_Wr_Ptr
0x200009B0       [4]    matrixrgb_hal_read_spi_p
0x200009B4       [4]    _SPI_Rd_Ptr
0x200009B8       [4]    _ADC_Get_Sample_Ptr
0x200009BC       [2]    __Lib_CStdlib_randf
0x200009C0       [4]    __Lib_CStdlib_randx
0x200009C4       [4]    ___System_CLOCK_IN_KHZ
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x3184       [2]    ?ICS_g_ball_speed
0x3186       [1]    ?ICS_playing
0x3187       [1]    ?ICS_ball_dir_vert
0x3188       [1]    ?ICS_ball_dir_horiz
0x3189       [1]    ?ICS_offset
0x318A       [2]    ?ICS_rand_num
0x318C    [2054]    ?ICS_BonusLevelScreen_bmp
0x3992       [1]    ?ICS_move_flag
0x3993       [1]    ?ICS_safe
0x3994       [2]    ?ICS_ball_count_flag
0x3996       [1]    ?ICS_time_s
0x3998     [108]    __GPIO_MODULE_SPI3_PC10_11_12
0x3A04       [4]    ?ICS_time
0x3A08     [100]    ?ICSmatrixrgb_hw_spi_buffer
