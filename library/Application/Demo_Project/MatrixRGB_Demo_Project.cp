#line 1 "C:/Users/Corey/Documents/Projects/MatrixRGB/Application/Demo_Project/MatrixRGB_Demo_Project.c"
#line 1 "c:/users/corey/documents/projects/matrixrgb/application/application_library/include/matrixrgb_hw.h"
#line 1 "c:/users/corey/documents/mikroelektronika/mikroc pro for arm/include/stdint.h"





typedef signed char int8_t;
typedef signed int int16_t;
typedef signed long int int32_t;
typedef signed long long int64_t;


typedef unsigned char uint8_t;
typedef unsigned int uint16_t;
typedef unsigned long int uint32_t;
typedef unsigned long long uint64_t;


typedef signed char int_least8_t;
typedef signed int int_least16_t;
typedef signed long int int_least32_t;
typedef signed long long int_least64_t;


typedef unsigned char uint_least8_t;
typedef unsigned int uint_least16_t;
typedef unsigned long int uint_least32_t;
typedef unsigned long long uint_least64_t;



typedef signed long int int_fast8_t;
typedef signed long int int_fast16_t;
typedef signed long int int_fast32_t;
typedef signed long long int_fast64_t;


typedef unsigned long int uint_fast8_t;
typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long long uint_fast64_t;


typedef signed long int intptr_t;
typedef unsigned long int uintptr_t;


typedef signed long long intmax_t;
typedef unsigned long long uintmax_t;
#line 116 "c:/users/corey/documents/projects/matrixrgb/application/application_library/include/matrixrgb_hw.h"
typedef struct
{
 uint8_t red;
 uint8_t green;
 uint8_t blue;
}color_t;
#line 147 "c:/users/corey/documents/projects/matrixrgb/application/application_library/include/matrixrgb_hw.h"
void matrixrgb_init( char level, uint8_t width, uint8_t height );

void matrixrgb_write_text( char *text, color_t color, uint8_t text_size, uint8_t start_row, uint8_t start_col );
#line 164 "c:/users/corey/documents/projects/matrixrgb/application/application_library/include/matrixrgb_hw.h"
void matrixrgb_image_load( uint8_t *bmp, uint8_t width, uint8_t height );
#line 180 "c:/users/corey/documents/projects/matrixrgb/application/application_library/include/matrixrgb_hw.h"
void matrixrgb_scroll_img_left( uint8_t *bmp, uint8_t width, uint8_t height, uint8_t speed );
#line 196 "c:/users/corey/documents/projects/matrixrgb/application/application_library/include/matrixrgb_hw.h"
void matrixrgb_scroll_img_right( uint8_t *bmp, uint8_t width, uint8_t height, uint8_t speed );
#line 210 "c:/users/corey/documents/projects/matrixrgb/application/application_library/include/matrixrgb_hw.h"
void matrixrgb_write_pixel( int row, int column, char red, char green, char blue );
#line 227 "c:/users/corey/documents/projects/matrixrgb/application/application_library/include/matrixrgb_hw.h"
void matrixrgb_write_pixel_img( int row, int column, char red, char green, char blue );
#line 238 "c:/users/corey/documents/projects/matrixrgb/application/application_library/include/matrixrgb_hw.h"
void matrixrgb_erase_pixel( int row, int column );
#line 251 "c:/users/corey/documents/projects/matrixrgb/application/application_library/include/matrixrgb_hw.h"
void matrixrgb_scroll_text_right( char *text, color_t color, uint8_t speed , uint8_t text_size );
#line 264 "c:/users/corey/documents/projects/matrixrgb/application/application_library/include/matrixrgb_hw.h"
void matrixrgb_scroll_text_left( char *text, color_t color, uint8_t speed , uint8_t text_size );
#line 273 "c:/users/corey/documents/projects/matrixrgb/application/application_library/include/matrixrgb_hw.h"
void matrixrgb_shift_up( void );
#line 282 "c:/users/corey/documents/projects/matrixrgb/application/application_library/include/matrixrgb_hw.h"
void matrixrgb_shift_down( void );
#line 291 "c:/users/corey/documents/projects/matrixrgb/application/application_library/include/matrixrgb_hw.h"
void matrixrgb_shift_right( void );
#line 300 "c:/users/corey/documents/projects/matrixrgb/application/application_library/include/matrixrgb_hw.h"
void matrixrgb_shift_left( void );
#line 310 "c:/users/corey/documents/projects/matrixrgb/application/application_library/include/matrixrgb_hw.h"
void matrixrgb_scroll_off_scrn_up( uint8_t speed );
#line 320 "c:/users/corey/documents/projects/matrixrgb/application/application_library/include/matrixrgb_hw.h"
void matrixrgb_scroll_off_scrn_down( uint8_t speed );
#line 330 "c:/users/corey/documents/projects/matrixrgb/application/application_library/include/matrixrgb_hw.h"
void matrixrgb_scroll_off_scrn_left( uint8_t speed );
#line 340 "c:/users/corey/documents/projects/matrixrgb/application/application_library/include/matrixrgb_hw.h"
void matrixrgb_scroll_off_scrn_right( uint8_t speed );
#line 354 "c:/users/corey/documents/projects/matrixrgb/application/application_library/include/matrixrgb_hw.h"
void matrixrgb_refresh( void );
#line 363 "c:/users/corey/documents/projects/matrixrgb/application/application_library/include/matrixrgb_hw.h"
void matrixrgb_clear_screen( void );
#line 375 "c:/users/corey/documents/projects/matrixrgb/application/application_library/include/matrixrgb_hw.h"
void matrixrgb_set_color( color_t *color, uint8_t red_color, uint8_t green_color, uint8_t blue_color );
#line 1 "c:/users/corey/documents/projects/matrixrgb/application/application_library/resources/resources.h"
#line 1 "c:/users/corey/documents/mikroelektronika/mikroc pro for arm/include/stdint.h"
#line 9 "c:/users/corey/documents/projects/matrixrgb/application/application_library/resources/resources.h"
extern uint8_t ime_bmp[ 2048 ];
extern uint8_t prezime_bmp[ 2048 ];
extern uint8_t Title_bmp[ 2048 ];
extern uint8_t my_img[ 2048 ];
extern uint8_t MikroeBITMAP_bmp[ 2048 ];
extern uint8_t MainMenuBreakout_bmp[2054];
extern uint8_t YouWinScreen_bmp[2054];
extern uint8_t BonusLevelScreen_bmp[2054];
extern uint8_t YouLoseScreen_bmp[2054];
extern uint8_t NewMainMenuBreakoutScreen_bmp[2054];

extern const code char mikroe[ 2048 ];
extern const unsigned short Tahoma10x11[2048];



uint8_t MikroE_Sign_bmp[2054] = {
0x00,0x00,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0x00,0x00,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xFF,0xFF,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xFF,0xFF,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xFF,0xFF,0xE4,0xE8,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xE4,0xE8,0xFF,0xFF,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xFF,0xFF,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xFF,0xFF,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0x00,0x00,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,
0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0xE4,0xE8,0x00,0x00

};
#line 1 "c:/users/corey/documents/mikroelektronika/mikroc pro for arm/include/stdbool.h"



 typedef char _Bool;
#line 10 "C:/Users/Corey/Documents/Projects/MatrixRGB/Application/Demo_Project/MatrixRGB_Demo_Project.c"
sbit MATRIXRGB_CS at GPIOD_ODR.B13;
sbit MATRIXRGB_READY at GPIOD_IDR.B10;
sbit MATRIXRGB_RST at GPIOC_ODR.B2;

void system_setup( char brightness, uint8_t width, uint8_t height );
void InitTimer2( void );
void setup_gameboard( void );
void setup_player( void );
void setup_ball( void );
void move_ball( void );
void move_player( void );
void check_ball_boundaries( void );
 _Bool  is_player_there( void );
 _Bool  is_brick_hit( void );
void erase_brick( uint8_t number );
void set_vector( uint8_t *amount );
void set_ball_pos( uint8_t vector_amount );
 _Bool  is_game_over( void );
void display_main_menu( void );
void set_option( void );
uint8_t get_option( void );
void wait_for_choice( void );
void display_youwin( void );
void display_youlose( void );
void display_bonuslevel( void );
void setup_bonus_level( void );
void display_time( void );
void clear_time_zone( void );

typedef enum
{
 UP = 0,
 DOWN
} vert_direction_t;

typedef enum
{
 LEFT = 0,
 RIGHT
} horiz_direction_t;

typedef struct
{
 uint8_t row;
 uint8_t col;
} position_t;

typedef struct
{
 color_t color;
 uint8_t row;
 uint8_t col;
  _Bool  active;
} brick_t;

typedef enum
{
 TOP_SIDE = 0,
 BOTTOM_SIDE,
 RIGHT_SIDE,
 LEFT_SIDE
} brick_side_t;

typedef enum
{
 LEFT_SURFACE = 0,
 MIDDLE_SURFACE,
 RIGHT_SURFACE
} player_surface_t;

typedef enum
{
 EASY = 0,
 MEDIUM,
 HARD
} difficulty_t;


vert_direction_t ball_dir_vert = UP;
horiz_direction_t ball_dir_horiz = LEFT;
position_t ball_curr_pos;
position_t player_curr_pos;
uint8_t move_flag = 0;
uint16_t ball_count_flag = 0;
unsigned long adc_pos;
 _Bool  safe =  1 ;
brick_t bricks[48];
brick_side_t brick_side_vert;
brick_side_t brick_side_horiz;
player_surface_t player_surface;
uint16_t g_ball_speed = 50;
uint16_t ball_speed;
 _Bool  playing =  1 ;
uint16_t rand_num = 0;
uint32_t time = 0;
uint8_t time_s = 0;
uint8_t offset = 32;


void main()
{
 color_t my_color;
 uint8_t bonus_level = 0;



 matrixrgb_set_color( &my_color, 1, 0, 0 );
 system_setup( 100, 2, 2);

 ball_speed = g_ball_speed;
 wait_for_choice();
 matrixrgb_clear_screen();
 setup_gameboard( void );
 setup_player( void );
 setup_ball( void );


 while ( 1 )
 {
 matrixrgb_refresh();
#line 133 "C:/Users/Corey/Documents/Projects/MatrixRGB/Application/Demo_Project/MatrixRGB_Demo_Project.c"
 adc_pos = ADC1_Get_Sample(3);

 if (Button(&GPIOA_IDR, 0, 1, 1))
 {
 while ( !Button(&GPIOA_IDR, 0, 1, 0 ) )
 {

 adc_pos = ADC1_Get_Sample(3);
 move_player();

 matrixrgb_refresh();
 }
 while ( !Button(&GPIOA_IDR, 0, 1, 1) )
 matrixrgb_refresh();

 while ( !Button(&GPIOA_IDR, 0, 1, 0 ) )
 matrixrgb_refresh();
 }



 if ( move_flag )
 {
 move_player();
 move_flag = 0;
 }
 if ( ball_count_flag >= ball_speed )
 {
 move_ball();
 ball_count_flag = 0;
 }

 if ( safe ==  0  || playing ==  0  )
 {

 time_s = 0;
#line 177 "C:/Users/Corey/Documents/Projects/MatrixRGB/Application/Demo_Project/MatrixRGB_Demo_Project.c"
 if ( playing ==  0  && g_ball_speed == 200 )
 {
 bonus_level = 1;
 display_bonuslevel();
 }

 matrixrgb_clear_screen();
#line 188 "C:/Users/Corey/Documents/Projects/MatrixRGB/Application/Demo_Project/MatrixRGB_Demo_Project.c"
 matrixrgb_clear_screen();
 if ( !bonus_level )
 setup_gameboard( void );
 else
 setup_bonus_level();
 bonus_level = 0;
 setup_player( void );
 setup_ball( void );
 safe =  1 ;
 playing =  1 ;
 ball_dir_vert = UP;
 Delay_ms(50);
 time = 0;
 }
 matrixrgb_refresh();
 }
}

void clear_time_zone( void )
{
 uint8_t i, j;

 for ( i = 16; i < 29; i++ )
 for ( j = 0; j < 31; j++ )
 matrixrgb_erase_pixel( i, j );
}

void display_time( void )
{
 char time_str[3];
 color_t my_color;

 if ( time >= 10000 )
 {
 clear_time_zone();
 time_s++;
 time = 0;
 }
 matrixrgb_set_color( &my_color, 1, 0, 0 );
 matrixrgb_write_text( "Time", my_color, 4, 0, 0 );
 matrixrgb_write_text( ":", my_color, 1, 0, 27 );
 IntToStr( time_s, time_str );
 Ltrim( time_str );
 matrixrgb_write_text( time_str, my_color, 3, 16, 12 );
}

void display_youwin( void )
{
  _Bool  wait =  1 ;
 color_t my_color;
 matrixrgb_set_color( &my_color, 0, 0, 1 );

 matrixrgb_clear_screen();
 matrixrgb_write_text( " You  Win!", my_color, 10, 0, 0 );

 while ( wait )
 {
 if (Button(&GPIOA_IDR, 0, 1, 1))
 {
 matrixrgb_clear_screen();
 while ( !Button(&GPIOA_IDR, 0, 1, 0 ) );

 wait =  0 ;
 }
 matrixrgb_refresh();
 }
}

void display_youlose( void )
{
  _Bool  wait =  1 ;
 color_t my_color;
 matrixrgb_set_color( &my_color, 1, 0, 0 );

 matrixrgb_clear_screen();
 matrixrgb_write_text( "You  Lose!", my_color, 10, 0, 0 );

 while ( wait )
 {
 if (Button(&GPIOA_IDR, 0, 1, 1))
 {
 matrixrgb_clear_screen();
 while ( !Button(&GPIOA_IDR, 0, 1, 0 ) );

 wait =  0 ;
 }
 matrixrgb_refresh();
 }
}

void display_bonuslevel( void )
{
  _Bool  wait =  1 ;
 matrixrgb_clear_screen();
 matrixrgb_image_load(BonusLevelScreen_bmp, 32, 32 );

 while ( wait )
 {
 if (Button(&GPIOA_IDR, 0, 1, 1))
 {
 matrixrgb_clear_screen();
 while ( !Button(&GPIOA_IDR, 0, 1, 0 ) );

 wait =  0 ;
 }
 matrixrgb_refresh();
 }
}


void wait_for_choice( void )
{
  _Bool  waiting =  1 ;
#line 321 "C:/Users/Corey/Documents/Projects/MatrixRGB/Application/Demo_Project/MatrixRGB_Demo_Project.c"
 g_ball_speed = 1;

}

void set_option( void )
{
 uint8_t position;

 adc_pos = ADC1_Get_Sample(3);
 position = adc_pos / 1365;

 matrixrgb_erase_pixel( 10, 3 );
 matrixrgb_erase_pixel( 17, 3 );
 matrixrgb_erase_pixel( 24, 3 );
 matrixrgb_write_pixel( 10, 3 , 1, 0, 0 );
 matrixrgb_write_pixel( 17, 3 , 1, 0, 0 );
 matrixrgb_write_pixel( 24, 3 , 1, 0, 0 );

 if ( position == EASY )
 matrixrgb_write_pixel( 10, 3 , 1, 1, 1 );
 else if ( position == MEDIUM )
 matrixrgb_write_pixel( 17, 3 , 1, 1, 1 );
 else if ( position == HARD )
 matrixrgb_write_pixel( 24, 3 , 1, 1, 1 );

}

uint8_t get_option( void )
{
 uint8_t position;
 uint16_t speed;

 adc_pos = ADC1_Get_Sample(3);
 position = adc_pos / 1365;

 if ( position == EASY )
 speed = 500;
 else if ( position == MEDIUM )
 speed = 400;
 else if ( position == HARD )
 speed = 200;

 return speed;
}

void display_main_menu( void )
{
 uint8_t i = 0;

 matrixrgb_image_load( NewMainMenuBreakoutScreen_bmp, 32, 32 );


}

 _Bool  is_game_over( void )
{
 uint8_t i;

 for ( i = 0; i < 48; i++ )
 {
 if ( bricks[i].active ==  1  )
 return  1 ;
 }
 return  0 ;
}

void set_ball_pos( uint8_t vector_amount )
{
 if ( ball_dir_vert == UP )
 ball_curr_pos.row--;
 else if ( ball_dir_vert == DOWN )
 ball_curr_pos.row++;

 if ( ball_dir_horiz == LEFT )
 ball_curr_pos.col -= vector_amount;
 else if ( ball_dir_horiz == RIGHT )
 ball_curr_pos.col += vector_amount;

 if ( ball_curr_pos.col == 0 + offset || ball_curr_pos.col == ( 0 + offset - 1) || ball_curr_pos.col == 255 )
 {
 ball_curr_pos.col = 0 + offset;
 ball_dir_horiz = RIGHT;
 }
 else if ( ball_curr_pos.col == 31 + offset || ball_curr_pos.col == 32 + offset )
 {
 ball_curr_pos.col = 31 + offset;
 ball_dir_horiz = LEFT;
 }
}

void set_vector( uint8_t *amount )
{
 if ( player_surface == MIDDLE_SURFACE )
 {
 *amount = 1;
 ball_speed = g_ball_speed;
 }
 else if ( player_surface == LEFT_SURFACE || player_surface == RIGHT_SURFACE )
 {
 *amount = 2;
 ball_speed = g_ball_speed + 5;
 }
}

void erase_brick( uint8_t number )
{
 uint8_t i;

 for ( i = 0; i < 4; i++ )
 {
 matrixrgb_erase_pixel( bricks[number].row, ( bricks[number].col + i ) );
 matrixrgb_erase_pixel( ( bricks[number].row + 1 ), ( bricks[number].col + i ) );
 }

}

 _Bool  is_brick_hit( void )
{
 uint8_t i;
  _Bool  is_hit =  0 ;

 for ( i = 0; i < 48; i++ )
 {
 if ( bricks[i].active )
 {
 if ( player_surface == MIDDLE_SURFACE )
 {
 if ( ball_dir_vert == UP )
 {
 if ( ball_dir_horiz == LEFT )
 {
 if ( ( ball_curr_pos.row == bricks[i].row || ball_curr_pos.row == bricks[i].row + 1 ) && ball_curr_pos.col == bricks[i].col + 4 )
 {
 brick_side_horiz = RIGHT_SIDE;
 ball_dir_vert = UP;
 ball_dir_horiz = RIGHT;
 bricks[i].active =  0 ;
 erase_brick( i );
 is_hit =  1 ;
 }
 else if ( ball_curr_pos.row == bricks[i].row + 2 && ( ball_curr_pos.col == bricks[i].col || ball_curr_pos.col == bricks[i].col + 1 || ball_curr_pos.col == bricks[i].col + 2 || ball_curr_pos.col == bricks[i].col + 3 || ball_curr_pos.col == bricks[i].col + 4 ) )
 {
 brick_side_vert = BOTTOM_SIDE;
 ball_dir_horiz = LEFT;
 ball_dir_vert = DOWN;
 bricks[i].active =  0 ;
 erase_brick( i );
 is_hit =  1 ;
 }
 }
 else if ( ball_dir_horiz == RIGHT )
 {
 if ( ( ball_curr_pos.row == bricks[i].row || ball_curr_pos.row == bricks[i].row + 1 ) && ball_curr_pos.col == bricks[i].col - 1 )
 {
 brick_side_horiz = LEFT_SIDE;
 ball_dir_vert = UP;
 ball_dir_horiz = LEFT;
 bricks[i].active =  0 ;
 erase_brick( i );
 is_hit =  1 ;
 }
 else if ( ball_curr_pos.row == bricks[i].row + 2 && ( ball_curr_pos.col == bricks[i].col - 1 || ball_curr_pos.col == bricks[i].col || ball_curr_pos.col == bricks[i].col + 1 || ball_curr_pos.col == bricks[i].col + 2 || ball_curr_pos.col == bricks[i].col + 3 ) )
 {
 brick_side_vert = BOTTOM_SIDE;
 ball_dir_vert = DOWN;
 ball_dir_horiz = RIGHT;
 bricks[i].active =  0 ;
 erase_brick( i );
 is_hit =  1 ;
 }

 }
 }
 else if ( ball_dir_vert == DOWN )
 {
 if ( ball_dir_horiz == LEFT )
 {
 if ( ( ball_curr_pos.row == bricks[i].row || ball_curr_pos.row == bricks[i].row + 1 ) && ball_curr_pos.col == bricks[i].col + 4 )
 {
 brick_side_horiz = RIGHT_SIDE;
 ball_dir_horiz = RIGHT;
 ball_dir_vert = DOWN;
 bricks[i].active =  0 ;
 erase_brick( i );
 is_hit =  1 ;
 }
 else if ( ball_curr_pos.row == bricks[i].row - 1 && ( ball_curr_pos.col == bricks[i].col || ball_curr_pos.col == bricks[i].col + 1 || ball_curr_pos.col == bricks[i].col + 2 || ball_curr_pos.col == bricks[i].col + 3 || ball_curr_pos.col == bricks[i].col + 4 ) )
 {
 brick_side_vert = TOP_SIDE;
 ball_dir_horiz = LEFT;
 ball_dir_vert = UP;
 bricks[i].active =  0 ;
 erase_brick( i );
 is_hit =  1 ;
 }
 }
 else if ( ball_dir_horiz == RIGHT )
 {
 if ( ( ball_curr_pos.row == bricks[i].row || ball_curr_pos.row == bricks[i].row + 1 ) && ball_curr_pos.col == bricks[i].col - 1 )
 {
 brick_side_horiz = LEFT_SIDE;
 ball_dir_horiz = LEFT;
 ball_dir_vert = DOWN;
 bricks[i].active =  0 ;
 erase_brick( i );
 is_hit =  1 ;
 }
 else if ( ball_curr_pos.row == bricks[i].row - 1 && ( ball_curr_pos.col == bricks[i].col - 1 || ball_curr_pos.col == bricks[i].col || ball_curr_pos.col == bricks[i].col + 1 || ball_curr_pos.col == bricks[i].col + 2 || ball_curr_pos.col == bricks[i].col + 3 ) )
 {
 brick_side_vert = TOP_SIDE;
 ball_dir_horiz = RIGHT;
 ball_dir_vert = UP;
 bricks[i].active =  0 ;
 erase_brick( i );
 is_hit =  1 ;
 }

 }
 }
 }
 else if ( player_surface == LEFT_SURFACE || player_surface == RIGHT_SURFACE )
 {
 if ( ball_dir_vert == UP )
 {
 if ( ball_dir_horiz == LEFT )
 {
 if ( ( ball_curr_pos.row == bricks[i].row || ball_curr_pos.row == bricks[i].row + 1 ) && ( ball_curr_pos.col == bricks[i].col + 4 || ball_curr_pos.col == bricks[i].col + 3 ) )
 {
 brick_side_horiz = RIGHT_SIDE;
 ball_dir_vert = UP;
 ball_dir_horiz = RIGHT;
 bricks[i].active =  0 ;
 erase_brick( i );
 is_hit =  1 ;
 }
 else if ( ( ball_curr_pos.row == bricks[i].row + 2 || ball_curr_pos.row == bricks[i].row + 1 ) && ( ball_curr_pos.col == bricks[i].col || ball_curr_pos.col == bricks[i].col + 1 || ball_curr_pos.col == bricks[i].col + 2 || ball_curr_pos.col == bricks[i].col + 3 || ball_curr_pos.col == bricks[i].col + 4 ) )
 {
 brick_side_vert = BOTTOM_SIDE;
 ball_dir_horiz = LEFT;
 ball_dir_vert = DOWN;
 bricks[i].active =  0 ;
 erase_brick( i );
 is_hit =  1 ;
 }
 }
 else if ( ball_dir_horiz == RIGHT )
 {
 if ( ( ball_curr_pos.row == bricks[i].row || ball_curr_pos.row == bricks[i].row + 1 ) && ( ball_curr_pos.col == bricks[i].col - 1 || ball_curr_pos.col == bricks[i].col ) )
 {
 brick_side_horiz = LEFT_SIDE;
 ball_dir_vert = UP;
 ball_dir_horiz = LEFT;
 bricks[i].active =  0 ;
 erase_brick( i );
 is_hit =  1 ;
 }
 else if ( ( ball_curr_pos.row == bricks[i].row + 2 || ball_curr_pos.row == bricks[i].row + 1 ) && ( ball_curr_pos.col == bricks[i].col - 1 || ball_curr_pos.col == bricks[i].col || ball_curr_pos.col == bricks[i].col + 1 || ball_curr_pos.col == bricks[i].col + 2 || ball_curr_pos.col == bricks[i].col + 3 ) )
 {
 brick_side_vert = BOTTOM_SIDE;
 ball_dir_vert = DOWN;
 ball_dir_horiz = RIGHT;
 bricks[i].active =  0 ;
 erase_brick( i );
 is_hit =  1 ;
 }

 }
 }
 else if ( ball_dir_vert == DOWN )
 {
 if ( ball_dir_horiz == LEFT )
 {
 if ( ( ball_curr_pos.row == bricks[i].row || ball_curr_pos.row == bricks[i].row + 1 ) && ( ball_curr_pos.col == bricks[i].col + 4 || ball_curr_pos.col == bricks[i].col + 3 ) )
 {
 brick_side_horiz = RIGHT_SIDE;
 ball_dir_horiz = RIGHT;
 ball_dir_vert = DOWN;
 bricks[i].active =  0 ;
 erase_brick( i );
 is_hit =  1 ;
 }
 else if ( ( ball_curr_pos.row == bricks[i].row - 1 || ball_curr_pos.row == bricks[i].row ) && ( ball_curr_pos.col == bricks[i].col || ball_curr_pos.col == bricks[i].col + 1 || ball_curr_pos.col == bricks[i].col + 2 || ball_curr_pos.col == bricks[i].col + 3 || ball_curr_pos.col == bricks[i].col + 4 ) )
 {
 brick_side_vert = TOP_SIDE;
 ball_dir_horiz = LEFT;
 ball_dir_vert = UP;
 bricks[i].active =  0 ;
 erase_brick( i );
 is_hit =  1 ;
 }
 }
 else if ( ball_dir_horiz == RIGHT )
 {
 if ( ( ball_curr_pos.row == bricks[i].row || ball_curr_pos.row == bricks[i].row + 1 ) && ( ball_curr_pos.col == bricks[i].col - 1 || ball_curr_pos.col == bricks[i].col ) )
 {
 brick_side_horiz = LEFT_SIDE;
 ball_dir_horiz = LEFT;
 ball_dir_vert = DOWN;
 bricks[i].active =  0 ;
 erase_brick( i );
 is_hit =  1 ;
 }
 else if ( ( ball_curr_pos.row == bricks[i].row - 1 || ball_curr_pos.row == bricks[i].row ) && ( ball_curr_pos.col == bricks[i].col - 1 || ball_curr_pos.col == bricks[i].col || ball_curr_pos.col == bricks[i].col + 1 || ball_curr_pos.col == bricks[i].col + 2 || ball_curr_pos.col == bricks[i].col + 3 ) )
 {
 brick_side_vert = TOP_SIDE;
 ball_dir_horiz = RIGHT;
 ball_dir_vert = UP;
 bricks[i].active =  0 ;
 erase_brick( i );
 is_hit =  1 ;
 }

 }
 }

 }
 }
 }

 return is_hit;
}

 _Bool  is_player_there( void )
{
 if ( ball_curr_pos.col >= player_curr_pos.col &&
 ball_curr_pos.col < ( player_curr_pos.col + 6 ) )
 {
 if ( ball_curr_pos.col >= ( player_curr_pos.col + 4 ) )
 player_surface = RIGHT_SURFACE;
 else if ( ball_curr_pos.col > ( player_curr_pos.col + 2 ) )
 player_surface = MIDDLE_SURFACE;
 else
 player_surface = LEFT_SURFACE;
 return  1 ;
 }
 else return  0 ;

}

void check_ball_boundaries( void )
{
 if ( ball_curr_pos.row == 0 )
 ball_dir_vert = DOWN;
 else if ( ball_curr_pos.row >= 30 )
 {
 if ( !is_player_there() )
 safe =  0 ;
 else
 ball_dir_vert = UP;
 }

 if ( ball_curr_pos.col == 0 + offset )
 ball_dir_horiz = RIGHT;
 else if ( ball_curr_pos.col == 31 + offset )
 ball_dir_horiz = LEFT;

}

void move_player( void )
{
 uint8_t i;
 uint8_t position;

 for ( i = player_curr_pos.col; i < ( player_curr_pos.col + 6 ); i++ )
 matrixrgb_erase_pixel( player_curr_pos.row, i );

 position = ( adc_pos / 157 ) + offset;

 if ( ball_curr_pos.col < ( 3 + offset ) )
 player_curr_pos.col = 0 + offset;
 else if ( ball_curr_pos.col >= ( 29 + offset ) )
 player_curr_pos.col = 26 + offset;
 else
 player_curr_pos.col = ball_curr_pos.col - 3;
#line 699 "C:/Users/Corey/Documents/Projects/MatrixRGB/Application/Demo_Project/MatrixRGB_Demo_Project.c"
 for ( i = player_curr_pos.col; i < ( player_curr_pos.col + 6 ); i++ )
 matrixrgb_write_pixel( player_curr_pos.row, i, 1, 0, 0 );

}

void move_ball( void )
{
 uint8_t amount;

 set_vector( &amount );

 matrixrgb_erase_pixel( ball_curr_pos.row, ball_curr_pos.col );
 if ( is_brick_hit() )
 {
 is_brick_hit();
 playing = is_game_over();
 }
 check_ball_boundaries();
 set_ball_pos( amount );
 matrixrgb_write_pixel( ball_curr_pos.row, ball_curr_pos.col, 1, 1, 1 );

}

void setup_ball( void )
{
 uint8_t random_row, random_col, random_direction;

 srand( rand_num );
 random_row = ( rand() % 13 ) + 12;
 random_col = ( rand() % 32 ) + offset;
 random_direction = rand() % 2;

 ball_dir_horiz = random_direction;
 ball_curr_pos.row = random_row;
 ball_curr_pos.col = random_col;
 matrixrgb_write_pixel( ball_curr_pos.row, ball_curr_pos.col, 1, 1, 1 );
}

void setup_gameboard( void )
{
 uint8_t i, j, k;
 color_t brick_color;

 matrixrgb_set_color( &brick_color, 0, 0, 1 );
 for ( i = 0 + offset, j = 0; i <= 28 + offset; i += 4, j++ )
 {
 bricks[j].color = brick_color;
 bricks[j].col = i;
 bricks[j].row = 0;
 bricks[j].active =  1 ;
 for ( k = i; k < ( i + 4 ); k++ )
 {
 matrixrgb_write_pixel( 0, k, 1, 0, 0 );
 matrixrgb_write_pixel( 1, k, 1, 0, 0 );
 }
 }
 matrixrgb_set_color( &brick_color, 0, 1, 0 );
 for ( i = 0 + offset; i <= 28 + offset; i += 4, j++ )
 {
 bricks[j].color = brick_color;
 bricks[j].col = i;
 bricks[j].row = 2;
 bricks[j].active =  1 ;
 for ( k = i; k < ( i + 4 ); k++ )
 {
 matrixrgb_write_pixel( 2, k, 0, 1, 0 );
 matrixrgb_write_pixel( 3, k, 0, 1, 0 );
 }
 }
 matrixrgb_set_color( &brick_color, 1, 0, 0 );
 for ( i = 0 + offset; i <= 28 + offset; i += 4, j++ )
 {
 bricks[j].color = brick_color;
 bricks[j].col = i;
 bricks[j].row = 4;
 bricks[j].active =  1 ;
 for ( k = i; k < ( i + 4 ); k++ )
 {
 matrixrgb_write_pixel( 4, k, 0, 0, 1 );
 matrixrgb_write_pixel( 5, k, 0, 0, 1 );
 }
 }
 matrixrgb_set_color( &brick_color, 0, 0, 1 );
 for ( i = 0 + offset; i <= 28 + offset; i += 4, j++ )
 {
 bricks[j].color = brick_color;
 bricks[j].col = i;
 bricks[j].row = 6;
 bricks[j].active =  1 ;
 for ( k = i; k < ( i + 4 ); k++ )
 {
 matrixrgb_write_pixel( 6, k, 1, 0, 0 );
 matrixrgb_write_pixel( 7, k, 1, 0, 0 );
 }
 }
 matrixrgb_set_color( &brick_color, 0, 1, 0 );
 for ( i = 0 + offset; i <= 28 + offset; i += 4, j++ )
 {
 bricks[j].color = brick_color;
 bricks[j].col = i;
 bricks[j].row = 8;
 bricks[j].active =  1 ;
 for ( k = i; k < ( i + 4 ); k++ )
 {
 matrixrgb_write_pixel( 8, k, 0, 1, 0 );
 matrixrgb_write_pixel( 9, k, 0, 1, 0 );
 }
 }
 matrixrgb_set_color( &brick_color, 1, 0, 0 );
 for ( i = 0 + offset; i <= 28 + offset; i += 4, j++ )
 {
 bricks[j].color = brick_color;
 bricks[j].col = i;
 bricks[j].row = 10;
 bricks[j].active =  1 ;
 for ( k = i; k < ( i + 4 ); k++ )
 {
 matrixrgb_write_pixel( 10, k, 0, 0, 1 );
 matrixrgb_write_pixel( 11, k, 0, 0, 1 );
 }
 }

}

void setup_player( void )
{
 uint8_t i;

 player_curr_pos.row = 31;
 player_curr_pos.col = 12 + offset;
 for ( i = 12 + offset; i < 18 + offset; i++ )
 matrixrgb_write_pixel( player_curr_pos.row, i, 1, 0, 0 );
 player_surface = MIDDLE_SURFACE;
}

void system_setup( char brightness, uint8_t width, uint8_t height )
{

 GPIO_Digital_Output( &GPIOD_BASE, _GPIO_PINMASK_13);
 GPIO_Digital_Output( &GPIOC_BASE, _GPIO_PINMASK_2 );
 GPIO_Digital_Input( &GPIOD_BASE, _GPIO_PINMASK_10);
 GPIO_Digital_Input(&GPIOA_IDR, _GPIO_PINMASK_0);

 SPI3_Init_Advanced(_SPI_FPCLK_DIV2, _SPI_MASTER | _SPI_8_BIT |
 _SPI_CLK_IDLE_LOW | _SPI_FIRST_CLK_EDGE_TRANSITION |
 _SPI_MSB_FIRST | _SPI_SS_DISABLE | _SPI_SSM_DISABLE | _SPI_SSI_1,
 &_GPIO_MODULE_SPI3_PC10_11_12);

 ADC_Set_Input_Channel(_ADC_CHANNEL_3);
 ADC1_Init();
 Delay_ms(100);

 MATRIXRGB_RST = 0;
 MATRIXRGB_RST = 1;
 Delay_ms(200);

 matrixrgb_init( brightness, width, height );
 Delay_ms(200);

 InitTimer2();

}


void InitTimer2() {
 RCC_APB1ENR.TIM2EN = 1;
 TIM2_CR1.CEN = 0;
 TIM2_PSC = 0;
 TIM2_ARR = 7199;
 NVIC_IntEnable(IVT_INT_TIM2);
 TIM2_DIER.UIE = 1;
 TIM2_CR1.CEN = 1;
}

void Timer2_interrupt() iv IVT_INT_TIM2 {
 TIM2_SR.UIF = 0;

 move_flag = 1;
 ball_count_flag++;
 rand_num++;
 time++;
 if ( rand_num >= 65500 )
 rand_num = 0;
}



void setup_bonus_level( void )
{
 uint8_t i, j, k;
 color_t brick_color;
 matrixrgb_set_color( &brick_color, 1, 0, 0 );

 for ( i = 0 + offset; i < 48 + offset; i++ )
 {
 bricks[i].color = brick_color;
 bricks[i].col = 0;
 bricks[i].row = 0;
 bricks[i].active =  0 ;
 }


 for ( i = 4 + offset, j = 0; i <= 20 + offset; i += 4, j++ )
 {
 bricks[j].color = brick_color;
 bricks[j].col = i;
 bricks[j].row = 0;
 bricks[j].active =  1 ;
 for ( k = i; k < ( i + 4 ); k++ )
 {
 matrixrgb_write_pixel( 0, k, 1, 0, 0 );
 matrixrgb_write_pixel( 1, k, 1, 0, 0 );
 }
 }
 for ( i = 4 + offset; i < 8 + offset; i += 4 , j++ )
 {
 bricks[j].color = brick_color;
 bricks[j].col = i;
 bricks[j].row = 2;
 bricks[j].active =  1 ;
 for ( k = i; k < ( i + 4 ); k++ )
 {
 matrixrgb_write_pixel( 2, k, 1, 0, 0 );
 matrixrgb_write_pixel( 3, k, 1, 0, 0 );
 }
 }
 for ( i = 4 + offset; i < 8 + offset; i += 4, j++ )
 {
 bricks[j].color = brick_color;
 bricks[j].col = i;
 bricks[j].row = 4;
 bricks[j].active =  1 ;
 for ( k = i; k < ( i + 4 ); k++ )
 {
 matrixrgb_write_pixel( 4, k, 1, 0, 0 );
 matrixrgb_write_pixel( 5, k, 1, 0, 0 );
 }
 }

 for ( i = 4 + offset; i <= 16 + offset; i += 4, j++ )
 {
 bricks[j].color = brick_color;
 bricks[j].col = i;
 bricks[j].row = 6;
 bricks[j].active =  1 ;
 for ( k = i; k < ( i + 4 ); k++ )
 {
 matrixrgb_write_pixel( 6, k, 1, 0, 0 );
 matrixrgb_write_pixel( 7, k, 1, 0, 0 );
 }
 }

 for ( i = 4 + offset; i < 8 + offset; i += 4, j++ )
 {
 bricks[j].color = brick_color;
 bricks[j].col = i;
 bricks[j].row = 8;
 bricks[j].active =  1 ;
 for ( k = i; k < ( i + 4 ); k++ )
 {
 matrixrgb_write_pixel( 8, k, 1, 0, 0 );
 matrixrgb_write_pixel( 9, k, 1, 0, 0 );
 }
 }
 for ( i = 4 + offset; i < 8 + offset; i += 4, j++ )
 {
 bricks[j].color = brick_color;
 bricks[j].col = i;
 bricks[j].row = 10;
 bricks[j].active =  1 ;
 for ( k = i; k < ( i + 4 ); k++ )
 {
 matrixrgb_write_pixel( 10, k, 1, 0, 0 );
 matrixrgb_write_pixel( 11, k, 1, 0, 0 );
 }
 }
 for ( i = 4 + offset; i < 8 + offset; i += 4, j++ )
 {
 bricks[j].color = brick_color;
 bricks[j].col = i;
 bricks[j].row = 10;
 bricks[j].active =  1 ;
 for ( k = i; k < ( i + 4 ); k++ )
 {
 matrixrgb_write_pixel( 12, k, 1, 0, 0 );
 matrixrgb_write_pixel( 13, k, 1, 0, 0 );
 }
 }


 for ( i = 4 + offset; i <= 20 + offset; i += 4, j++ )
 {
 bricks[j].color = brick_color;
 bricks[j].col = i;
 bricks[j].row = 14;
 bricks[j].active =  1 ;
 for ( k = i; k < ( i + 4 ); k++ )
 {
 matrixrgb_write_pixel( 14, k, 1, 0, 0 );
 matrixrgb_write_pixel( 15, k, 1, 0, 0 );
 }
 }



}
